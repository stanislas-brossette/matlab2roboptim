// compile command: 
// g++ -ggdb3 -I/usr/include/log4cxx `pkg-config --cflags roboptim-core` src/generatedFiles/@FUNCTION_NAME@.cc `pkg-config --libs roboptim-core` -o bin/@FUNCTION_NAME@
#include <iostream>
#include <vector>
#include <boost/mpl/vector.hpp>
#include <boost/make_shared.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/timer/timer.hpp>
#include <boost/math/constants/constants.hpp>
#include <roboptim/core/differentiable-function.hh>
#include <roboptim/core/linear-function.hh>
#include <roboptim/core/function/constant.hh>
#include <roboptim/core/solver.hh>
#include <roboptim/core/solver-factory.hh>
#include <roboptim/core/result.hh>

typedef roboptim::Solver <
  roboptim::GenericDifferentiableFunction< roboptim::EigenMatrixDense>,
  boost::mpl::vector<
    roboptim::GenericLinearFunction<roboptim::EigenMatrixDense>,
    roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense>
    >
  >
  solver_t;

static const double pi = boost::math::constants::pi<double>();


template <typename T>
class CostFunction : public roboptim::GenericLinearFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericLinearFunction<T>);
  
  explicit CostFunction (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
CostFunction<T>::CostFunction (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericLinearFunction<T>
    (89, 1, "CostFunction_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
CostFunction<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.0;
}

template <typename T>
void
CostFunction<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_1 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_1 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_1<T>::LiftConstraint_1 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_1_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_1<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = pow(w_01_01,2) + pow(w_01_02,2) - 1.0;
}

template <typename T>
void
LiftConstraint_1<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 2.0*w_01_01; 
			 grad[1] = 2.0*w_01_02; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_2 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_2 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_2<T>::LiftConstraint_2 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_2_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_2<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = pow(w_01_03,2) + pow(w_01_06,2) - 1.0;
}

template <typename T>
void
LiftConstraint_2<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 2.0*w_01_03; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 2.0*w_01_06; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_3 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_3 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_3<T>::LiftConstraint_3 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_3_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_3<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = pow(w_01_04,2) + pow(w_01_10,2) - 1.0;
}

template <typename T>
void
LiftConstraint_3<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 2.0*w_01_04; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 2.0*w_01_10; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_4 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_4 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_4<T>::LiftConstraint_4 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_4_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_4<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = pow(w_01_05,2) + pow(w_01_08,2) - 1.0;
}

template <typename T>
void
LiftConstraint_4<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 2.0*w_01_05; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 2.0*w_01_08; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_5 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_5 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_5<T>::LiftConstraint_5 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_5_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_5<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = pow(w_01_07,2) + pow(w_01_09,2) - 1.0;
}

template <typename T>
void
LiftConstraint_5<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 2.0*w_01_07; 
			 grad[7] = 0.0; 
			 grad[8] = 2.0*w_01_09; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_6 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_6 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_6<T>::LiftConstraint_6 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_6_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_6<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = pow(w_01_11,2) + pow(w_01_13,2) - 1.0;
}

template <typename T>
void
LiftConstraint_6<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 2.0*w_01_11; 
			 grad[11] = 0.0; 
			 grad[12] = 2.0*w_01_13; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_7 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_7 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_7<T>::LiftConstraint_7 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_7_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_7<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = pow(w_01_12,2) + pow(w_01_14,2) - 1.0;
}

template <typename T>
void
LiftConstraint_7<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 2.0*w_01_12; 
			 grad[12] = 0.0; 
			 grad[13] = 2.0*w_01_14; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_8 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_8 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_8<T>::LiftConstraint_8 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_8_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_8<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_05*w_01_10 - 1.0*w_02_01;
}

template <typename T>
void
LiftConstraint_8<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = w_01_10; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = w_01_05; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = -1.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_9 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_9 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_9<T>::LiftConstraint_9 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_9_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_9<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_03*(w_01_04 + 3.7493994566546433353612919702563e-33) - 1.0*w_02_02;
}

template <typename T>
void
LiftConstraint_9<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = w_01_04 + 3.7493994566546433353612919702563e-33; 
			 grad[3] = w_01_03; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = -1.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_10 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_10 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_10<T>::LiftConstraint_10 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_10_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_10<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_06*(w_01_04 + 3.7493994566546433353612919702563e-33) - 1.0*w_02_03;
}

template <typename T>
void
LiftConstraint_10<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = w_01_06; 
			 grad[4] = 0.0; 
			 grad[5] = w_01_04 + 3.7493994566546433353612919702563e-33; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = -1.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_11 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_11 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_11<T>::LiftConstraint_11 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_11_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_11<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_04*w_01_05 - 1.0*w_02_04;
}

template <typename T>
void
LiftConstraint_11<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.00000000000000006123233995736766035868820147292*w_01_05; 
			 grad[4] = 0.00000000000000006123233995736766035868820147292*w_01_04; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = -1.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_12 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_12 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_12<T>::LiftConstraint_12 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_12_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_12<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_08*w_01_10 - 1.0*w_02_05;
}

template <typename T>
void
LiftConstraint_12<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = w_01_10; 
			 grad[8] = 0.0; 
			 grad[9] = w_01_08; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = -1.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_13 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_13 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_13<T>::LiftConstraint_13 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_13_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_13<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_04*w_01_08 - 1.0*w_02_06;
}

template <typename T>
void
LiftConstraint_13<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.00000000000000006123233995736766035868820147292*w_01_08; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.00000000000000006123233995736766035868820147292*w_01_04; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = -1.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_14 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_14 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_14<T>::LiftConstraint_14 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_14_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_14<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_10*w_01_12 - 1.0*w_02_07;
}

template <typename T>
void
LiftConstraint_14<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = w_01_12; 
			 grad[10] = 0.0; 
			 grad[11] = w_01_10; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = -1.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_15 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_15 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_15<T>::LiftConstraint_15 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_15_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_15<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_04*w_01_14 - 1.0*w_02_08;
}

template <typename T>
void
LiftConstraint_15<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.00000000000000006123233995736766035868820147292*w_01_04; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = -1.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_16 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_16 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_16<T>::LiftConstraint_16 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_16_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_16<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_05*w_01_14 - 1.0*w_02_09;
}

template <typename T>
void
LiftConstraint_16<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = w_01_14; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_01_05; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = -1.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_17 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_17 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_17<T>::LiftConstraint_17 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_17_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_17<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_08*w_01_14 - 1.0*w_02_10;
}

template <typename T>
void
LiftConstraint_17<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = w_01_14; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_01_08; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = -1.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_18 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_18 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_18<T>::LiftConstraint_18 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_18_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_18<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_05*w_01_10 - 1.0*w_02_11;
}

template <typename T>
void
LiftConstraint_18<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.00000000000000006123233995736766035868820147292*w_01_10; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.00000000000000006123233995736766035868820147292*w_01_05; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = -1.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_19 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_19 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_19<T>::LiftConstraint_19 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_19_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_19<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_08*w_01_10 - 1.0*w_02_12;
}

template <typename T>
void
LiftConstraint_19<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.00000000000000006123233995736766035868820147292*w_01_10; 
			 grad[8] = 0.0; 
			 grad[9] = 0.00000000000000006123233995736766035868820147292*w_01_08; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = -1.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_20 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_20 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_20<T>::LiftConstraint_20 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_20_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_20<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_04*w_01_05 - 1.0*w_02_13;
}

template <typename T>
void
LiftConstraint_20<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = w_01_05; 
			 grad[4] = w_01_04; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = -1.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_21 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_21 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_21<T>::LiftConstraint_21 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_21_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_21<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_04*w_01_08 - 1.0*w_02_14;
}

template <typename T>
void
LiftConstraint_21<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = w_01_08; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = w_01_04; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = -1.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_22 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_22 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_22<T>::LiftConstraint_22 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_22_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_22<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_10*w_01_14 - 1.0*w_02_15;
}

template <typename T>
void
LiftConstraint_22<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = w_01_14; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_01_10; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = -1.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_23 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_23 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_23<T>::LiftConstraint_23 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_23_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_23<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_04*w_01_12 - 1.0*w_02_16;
}

template <typename T>
void
LiftConstraint_23<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.00000000000000006123233995736766035868820147292*w_01_04; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = -1.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_24 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_24 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_24<T>::LiftConstraint_24 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_24_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_24<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_05*w_01_12 - 1.0*w_02_17;
}

template <typename T>
void
LiftConstraint_24<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = w_01_12; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = w_01_05; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = -1.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_25 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_25 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_25<T>::LiftConstraint_25 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_25_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_25<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_08*w_01_12 - 1.0*w_02_18;
}

template <typename T>
void
LiftConstraint_25<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = w_01_12; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = w_01_08; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = -1.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_26 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_26 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_26<T>::LiftConstraint_26 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_26_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_26<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_03_01 - 1.0*w_01_03*(w_02_04 - 0.00000000000000006123233995736766035868820147292*w_01_05 + w_02_05);
}

template <typename T>
void
LiftConstraint_26<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.00000000000000006123233995736766035868820147292*w_01_05 - 1.0*w_02_04 - 1.0*w_02_05; 
			 grad[3] = 0.0; 
			 grad[4] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = -1.0*w_01_03; 
			 grad[18] = -1.0*w_01_03; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = -1.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_27 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_27 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_27<T>::LiftConstraint_27 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_27_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_27<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_03_02 - 1.0*w_01_06*(w_02_04 - 0.00000000000000006123233995736766035868820147292*w_01_05 + w_02_05);
}

template <typename T>
void
LiftConstraint_27<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[5] = 0.00000000000000006123233995736766035868820147292*w_01_05 - 1.0*w_02_04 - 1.0*w_02_05; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = -1.0*w_01_06; 
			 grad[18] = -1.0*w_01_06; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = -1.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_28 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_28 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_28<T>::LiftConstraint_28 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_28_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_28<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_03*(0.00000000000000006123233995736766035868820147292*w_01_08 + w_02_01 - 1.0*w_02_06) - 1.0*w_03_03;
}

template <typename T>
void
LiftConstraint_28<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.00000000000000006123233995736766035868820147292*w_01_08 + w_02_01 - 1.0*w_02_06; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = w_01_03; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = -1.0*w_01_03; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = -1.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_29 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_29 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_29<T>::LiftConstraint_29 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_29_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_29<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_06*(0.00000000000000006123233995736766035868820147292*w_01_08 + w_02_01 - 1.0*w_02_06) - 1.0*w_03_04;
}

template <typename T>
void
LiftConstraint_29<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.00000000000000006123233995736766035868820147292*w_01_08 + w_02_01 - 1.0*w_02_06; 
			 grad[6] = 0.0; 
			 grad[7] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = w_01_06; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = -1.0*w_01_06; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = -1.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_30 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_30 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_30<T>::LiftConstraint_30 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_30_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_30<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_11*(w_02_07 - 0.00000000000000006123233995736766035868820147292*w_01_14 + w_02_08) - 1.0*w_03_05;
}

template <typename T>
void
LiftConstraint_30<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_02_07 - 0.00000000000000006123233995736766035868820147292*w_01_14 + w_02_08; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = -0.00000000000000006123233995736766035868820147292*w_01_11; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = w_01_11; 
			 grad[21] = w_01_11; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = -1.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_31 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_31 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_31<T>::LiftConstraint_31 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_31_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_31<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_12*(w_02_11 - 1.0*w_02_14) - 1.0*w_03_06;
}

template <typename T>
void
LiftConstraint_31<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = w_02_11 - 1.0*w_02_14; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = w_01_12; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = -1.0*w_01_12; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = -1.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_32 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_32 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_32<T>::LiftConstraint_32 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_32_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_32<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_03_07 - 0.00000000000000006123233995736766035868820147292*w_01_14*(w_02_04 + w_02_05);
}

template <typename T>
void
LiftConstraint_32<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = - 0.00000000000000006123233995736766035868820147292*w_02_04 - 0.00000000000000006123233995736766035868820147292*w_02_05; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = -0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[18] = -0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = -1.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_33 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_33 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_33<T>::LiftConstraint_33 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_33_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_33<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_12*(w_02_12 + w_02_13) - 1.0*w_03_08;
}

template <typename T>
void
LiftConstraint_33<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = w_02_12 + w_02_13; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = w_01_12; 
			 grad[26] = w_01_12; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = -1.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_34 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_34 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_34<T>::LiftConstraint_34 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_34_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_34<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_14*(w_02_01 - 1.0*w_02_06) - 1.0*w_03_09;
}

template <typename T>
void
LiftConstraint_34<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.00000000000000006123233995736766035868820147292*w_02_01 - 0.00000000000000006123233995736766035868820147292*w_02_06; 
			 grad[14] = 0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = -0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = -1.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_35 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_35 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_35<T>::LiftConstraint_35 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_35_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_35<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_03_10 - 1.0*w_01_13*(0.00000000000000006123233995736766035868820147292*w_01_12 + w_02_15 - 1.0*w_02_16);
}

template <typename T>
void
LiftConstraint_35<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = -0.00000000000000006123233995736766035868820147292*w_01_13; 
			 grad[12] = w_02_16 - 1.0*w_02_15 - 0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = -1.0*w_01_13; 
			 grad[29] = w_01_13; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = -1.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_36 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_36 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_36<T>::LiftConstraint_36 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_36_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_36<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_03_11 - 1.0*w_01_11*(0.00000000000000006123233995736766035868820147292*w_01_12 + w_02_15 - 1.0*w_02_16);
}

template <typename T>
void
LiftConstraint_36<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_02_16 - 1.0*w_02_15 - 0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[11] = -0.00000000000000006123233995736766035868820147292*w_01_11; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = -1.0*w_01_11; 
			 grad[29] = w_01_11; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = -1.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_37 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_37 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_37<T>::LiftConstraint_37 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_37_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_37<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_13*(w_02_07 - 0.00000000000000006123233995736766035868820147292*w_01_14 + w_02_08) - 1.0*w_03_12;
}

template <typename T>
void
LiftConstraint_37<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = w_02_07 - 0.00000000000000006123233995736766035868820147292*w_01_14 + w_02_08; 
			 grad[13] = -0.00000000000000006123233995736766035868820147292*w_01_13; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = w_01_13; 
			 grad[21] = w_01_13; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = -1.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_38 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_38 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_38<T>::LiftConstraint_38 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_38_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_38<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_14*(w_02_11 - 1.0*w_02_14) - 1.0*w_03_13;
}

template <typename T>
void
LiftConstraint_38<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_02_11 - 1.0*w_02_14; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = w_01_14; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = -1.0*w_01_14; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = -1.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_39 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_39 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_39<T>::LiftConstraint_39 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_39_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_39<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_14*(w_02_12 + w_02_13) - 1.0*w_03_14;
}

template <typename T>
void
LiftConstraint_39<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_02_12 + w_02_13; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = w_01_14; 
			 grad[26] = w_01_14; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = -1.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_40 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_40 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_40<T>::LiftConstraint_40 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_40_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_40<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_03_15 - 0.00000000000000006123233995736766035868820147292*w_01_12*(w_02_04 + w_02_05);
}

template <typename T>
void
LiftConstraint_40<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = - 0.00000000000000006123233995736766035868820147292*w_02_04 - 0.00000000000000006123233995736766035868820147292*w_02_05; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = -0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[18] = -0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = -1.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_41 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_41 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_41<T>::LiftConstraint_41 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_41_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_41<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_12*(w_02_01 - 1.0*w_02_06) - 1.0*w_03_16;
}

template <typename T>
void
LiftConstraint_41<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.00000000000000006123233995736766035868820147292*w_02_01 - 0.00000000000000006123233995736766035868820147292*w_02_06; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = -0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = -1.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_42 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_42 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_42<T>::LiftConstraint_42 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_42_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_42<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_07*(w_03_05 - 1.0*w_03_10) - 1.0*w_04_01;
}

template <typename T>
void
LiftConstraint_42<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = w_03_05 - 1.0*w_03_10; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = w_01_07; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = -1.0*w_01_07; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = -1.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_43 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_43 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_43<T>::LiftConstraint_43 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_43_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_43<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_09*(w_03_11 + w_03_12) - 1.0*w_04_02;
}

template <typename T>
void
LiftConstraint_43<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = w_03_11 + w_03_12; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = w_01_09; 
			 grad[43] = w_01_09; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = -1.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_44 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_44 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_44<T>::LiftConstraint_44 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_44_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_44<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_07*(w_03_11 + w_03_12) - 1.0*w_04_03;
}

template <typename T>
void
LiftConstraint_44<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = w_03_11 + w_03_12; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = w_01_07; 
			 grad[43] = w_01_07; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = -1.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_45 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_45 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_45<T>::LiftConstraint_45 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_45_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_45<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_09*(w_03_05 - 1.0*w_03_10) - 1.0*w_04_04;
}

template <typename T>
void
LiftConstraint_45<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = w_03_05 - 1.0*w_03_10; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = w_01_09; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = -1.0*w_01_09; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = -1.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_46 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_46 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_46<T>::LiftConstraint_46 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_46_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_46<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_04_05 - 1.0*w_01_11*(w_02_09 + w_03_06 - 1.0*w_03_07);
}

template <typename T>
void
LiftConstraint_46<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_03_07 - 1.0*w_03_06 - 1.0*w_02_09; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = -1.0*w_01_11; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = -1.0*w_01_11; 
			 grad[38] = w_01_11; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = -1.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_47 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_47 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_47<T>::LiftConstraint_47 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_47_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_47<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_04_06 - 1.0*w_01_11*(w_02_10 + w_03_08 - 1.0*w_03_09);
}

template <typename T>
void
LiftConstraint_47<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_03_09 - 1.0*w_03_08 - 1.0*w_02_10; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = -1.0*w_01_11; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = -1.0*w_01_11; 
			 grad[40] = w_01_11; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = -1.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_48 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_48 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_48<T>::LiftConstraint_48 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_48_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_48<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_13*(w_03_13 - 1.0*w_02_17 + w_03_15) - 1.0*w_04_07;
}

template <typename T>
void
LiftConstraint_48<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = w_03_13 - 1.0*w_02_17 + w_03_15; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = -1.0*w_01_13; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = w_01_13; 
			 grad[45] = 0.0; 
			 grad[46] = w_01_13; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = -1.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_49 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_49 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_49<T>::LiftConstraint_49 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_49_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_49<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_11*(w_03_13 - 1.0*w_02_17 + w_03_15) - 1.0*w_04_08;
}

template <typename T>
void
LiftConstraint_49<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_03_13 - 1.0*w_02_17 + w_03_15; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = -1.0*w_01_11; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = w_01_11; 
			 grad[45] = 0.0; 
			 grad[46] = w_01_11; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = -1.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_50 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_50 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_50<T>::LiftConstraint_50 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_50_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_50<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_04_09 - 1.0*w_01_13*(w_02_09 + w_03_06 - 1.0*w_03_07);
}

template <typename T>
void
LiftConstraint_50<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = w_03_07 - 1.0*w_03_06 - 1.0*w_02_09; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = -1.0*w_01_13; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = -1.0*w_01_13; 
			 grad[38] = w_01_13; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = -1.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_51 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_51 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_51<T>::LiftConstraint_51 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_51_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_51<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_13*(w_03_14 - 1.0*w_02_18 + w_03_16) - 1.0*w_04_10;
}

template <typename T>
void
LiftConstraint_51<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = w_03_14 - 1.0*w_02_18 + w_03_16; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = -1.0*w_01_13; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = w_01_13; 
			 grad[46] = 0.0; 
			 grad[47] = w_01_13; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = -1.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_52 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_52 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_52<T>::LiftConstraint_52 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_52_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_52<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_11*(w_03_14 - 1.0*w_02_18 + w_03_16) - 1.0*w_04_11;
}

template <typename T>
void
LiftConstraint_52<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_03_14 - 1.0*w_02_18 + w_03_16; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = -1.0*w_01_11; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = w_01_11; 
			 grad[46] = 0.0; 
			 grad[47] = w_01_11; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = -1.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_53 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_53 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_53<T>::LiftConstraint_53 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_53_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_53<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_04_12 - 1.0*w_01_13*(w_02_10 + w_03_08 - 1.0*w_03_09);
}

template <typename T>
void
LiftConstraint_53<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = w_03_09 - 1.0*w_03_08 - 1.0*w_02_10; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = -1.0*w_01_13; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = -1.0*w_01_13; 
			 grad[40] = w_01_13; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = -1.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_54 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_54 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_54<T>::LiftConstraint_54 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_54_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_54<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_02*(0.00000000000000006123233995736766035868820147292*w_01_04 + w_04_01 - 1.0*w_04_02 + 2.2958450216584678727157691077339e-49) - 1.0*w_05_01;
}

template <typename T>
void
LiftConstraint_54<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.00000000000000006123233995736766035868820147292*w_01_04 + w_04_01 - 1.0*w_04_02 + 2.2958450216584678727157691077339e-49; 
			 grad[2] = 0.0; 
			 grad[3] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = w_01_02; 
			 grad[49] = -1.0*w_01_02; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = -1.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_55 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_55 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_55<T>::LiftConstraint_55 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_55_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_55<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_03*(w_04_03 + w_04_04) - 1.0*w_05_02;
}

template <typename T>
void
LiftConstraint_55<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = w_04_03 + w_04_04; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = w_01_03; 
			 grad[51] = w_01_03; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = -1.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_56 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_56 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_56<T>::LiftConstraint_56 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_56_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_56<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_07*(w_04_05 - 1.0*w_04_07) - 1.0*w_05_03;
}

template <typename T>
void
LiftConstraint_56<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = w_04_05 - 1.0*w_04_07; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = w_01_07; 
			 grad[53] = 0.0; 
			 grad[54] = -1.0*w_01_07; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = -1.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_57 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_57 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_57<T>::LiftConstraint_57 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_57_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_57<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_07*(w_04_06 - 1.0*w_04_10) - 1.0*w_05_04;
}

template <typename T>
void
LiftConstraint_57<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = w_04_06 - 1.0*w_04_10; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = w_01_07; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = -1.0*w_01_07; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = -1.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_58 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_58 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_58<T>::LiftConstraint_58 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_58_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_58<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_06*(w_04_03 + w_04_04) - 1.0*w_05_05;
}

template <typename T>
void
LiftConstraint_58<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = w_04_03 + w_04_04; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = w_01_06; 
			 grad[51] = w_01_06; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = -1.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_59 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_59 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_59<T>::LiftConstraint_59 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_59_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_59<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_03*(w_04_01 - 1.0*w_04_02) - 1.0*w_05_06;
}

template <typename T>
void
LiftConstraint_59<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.00000000000000006123233995736766035868820147292*w_04_01 - 0.00000000000000006123233995736766035868820147292*w_04_02; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[49] = -0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = -1.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_60 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_60 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_60<T>::LiftConstraint_60 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_60_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_60<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_06*(w_04_01 - 1.0*w_04_02) - 1.0*w_05_07;
}

template <typename T>
void
LiftConstraint_60<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.00000000000000006123233995736766035868820147292*w_04_01 - 0.00000000000000006123233995736766035868820147292*w_04_02; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[49] = -0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = -1.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_61 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_61 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_61<T>::LiftConstraint_61 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_61_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_61<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_09*(w_04_08 + w_04_09) - 1.0*w_05_08;
}

template <typename T>
void
LiftConstraint_61<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = w_04_08 + w_04_09; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = w_01_09; 
			 grad[56] = w_01_09; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = -1.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_62 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_62 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_62<T>::LiftConstraint_62 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_62_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_62<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_07*(w_04_08 + w_04_09) - 1.0*w_05_09;
}

template <typename T>
void
LiftConstraint_62<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = w_04_08 + w_04_09; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = w_01_07; 
			 grad[56] = w_01_07; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = -1.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_63 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_63 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_63<T>::LiftConstraint_63 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_63_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_63<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_09*(w_04_05 - 1.0*w_04_07) - 1.0*w_05_10;
}

template <typename T>
void
LiftConstraint_63<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = w_04_05 - 1.0*w_04_07; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = w_01_09; 
			 grad[53] = 0.0; 
			 grad[54] = -1.0*w_01_09; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = -1.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_64 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_64 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_64<T>::LiftConstraint_64 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_64_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_64<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_09*(w_04_11 + w_04_12) - 1.0*w_05_11;
}

template <typename T>
void
LiftConstraint_64<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = w_04_11 + w_04_12; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = w_01_09; 
			 grad[59] = w_01_09; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = -1.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_65 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_65 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_65<T>::LiftConstraint_65 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_65_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_65<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_07*(w_04_11 + w_04_12) - 1.0*w_05_12;
}

template <typename T>
void
LiftConstraint_65<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = w_04_11 + w_04_12; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = w_01_07; 
			 grad[59] = w_01_07; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = -1.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_66 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_66 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_66<T>::LiftConstraint_66 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_66_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_66<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_09*(w_04_06 - 1.0*w_04_10) - 1.0*w_05_13;
}

template <typename T>
void
LiftConstraint_66<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = w_04_06 - 1.0*w_04_10; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = w_01_09; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = -1.0*w_01_09; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = -1.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_67 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_67 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_67<T>::LiftConstraint_67 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_67_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_67<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_06_01 - 1.0*w_01_02*(0.00000000000000006123233995736766035868820147292*w_02_04 - 3.7493994566546440195890577538583e-33*w_01_05 + 0.00000000000000006123233995736766035868820147292*w_02_05 - 1.0*w_05_03 + w_05_08);
}

template <typename T>
void
LiftConstraint_67<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 3.7493994566546440195890577538583e-33*w_01_05 - 0.00000000000000006123233995736766035868820147292*w_02_04 - 0.00000000000000006123233995736766035868820147292*w_02_05 + w_05_03 - 1.0*w_05_08; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 3.7493994566546440195890577538583e-33*w_01_02; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[18] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = w_01_02; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = -1.0*w_01_02; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = -1.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_68 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_68 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_68<T>::LiftConstraint_68 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_68_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_68<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_03*(w_05_09 + w_05_10) - 1.0*w_06_02;
}

template <typename T>
void
LiftConstraint_68<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = w_05_09 + w_05_10; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = w_01_03; 
			 grad[69] = w_01_03; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = -1.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_69 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_69 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_69<T>::LiftConstraint_69 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_69_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_69<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_02*(3.7493994566546440195890577538583e-33*w_01_08 + 0.00000000000000006123233995736766035868820147292*w_02_01 - 0.00000000000000006123233995736766035868820147292*w_02_06 + w_05_04 - 1.0*w_05_11) - 1.0*w_06_03;
}

template <typename T>
void
LiftConstraint_69<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 3.7493994566546440195890577538583e-33*w_01_08 + 0.00000000000000006123233995736766035868820147292*w_02_01 - 0.00000000000000006123233995736766035868820147292*w_02_06 + w_05_04 - 1.0*w_05_11; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 3.7493994566546440195890577538583e-33*w_01_02; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = w_01_02; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = -1.0*w_01_02; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = -1.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_70 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_70 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_70<T>::LiftConstraint_70 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_70_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_70<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_03*(w_05_12 + w_05_13) - 1.0*w_06_04;
}

template <typename T>
void
LiftConstraint_70<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = w_05_12 + w_05_13; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = w_01_03; 
			 grad[72] = w_01_03; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = -1.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_71 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_71 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_71<T>::LiftConstraint_71 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_71_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_71<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_02*(w_05_02 - 1.0*w_02_03 + w_05_07) - 1.0*w_06_05;
}

template <typename T>
void
LiftConstraint_71<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.00000000000000006123233995736766035868820147292*w_05_02 - 0.00000000000000006123233995736766035868820147292*w_02_03 + 0.00000000000000006123233995736766035868820147292*w_05_07; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = -1.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_72 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_72 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_72<T>::LiftConstraint_72 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_72_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_72<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_06_06 - 1.0*w_01_01*(w_02_02 + w_05_05 - 1.0*w_05_06);
}

template <typename T>
void
LiftConstraint_72<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = w_05_06 - 1.0*w_05_05 - 1.0*w_02_02; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = -1.0*w_01_01; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = -1.0*w_01_01; 
			 grad[65] = w_01_01; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = -1.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_73 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_73 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_73<T>::LiftConstraint_73 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_73_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_73<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_06*(w_05_09 + w_05_10) - 1.0*w_06_07;
}

template <typename T>
void
LiftConstraint_73<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = w_05_09 + w_05_10; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = w_01_06; 
			 grad[69] = w_01_06; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = -1.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_74 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_74 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_74<T>::LiftConstraint_74 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_74_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_74<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_03*(w_05_03 - 1.0*w_05_08) - 1.0*w_06_08;
}

template <typename T>
void
LiftConstraint_74<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.00000000000000006123233995736766035868820147292*w_05_03 - 0.00000000000000006123233995736766035868820147292*w_05_08; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = -0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = -1.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_75 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_75 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_75<T>::LiftConstraint_75 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_75_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_75<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_06*(w_05_03 - 1.0*w_05_08) - 1.0*w_06_09;
}

template <typename T>
void
LiftConstraint_75<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.00000000000000006123233995736766035868820147292*w_05_03 - 0.00000000000000006123233995736766035868820147292*w_05_08; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = -0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = -1.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_76 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_76 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_76<T>::LiftConstraint_76 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_76_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_76<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = w_01_06*(w_05_12 + w_05_13) - 1.0*w_06_10;
}

template <typename T>
void
LiftConstraint_76<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = w_05_12 + w_05_13; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = w_01_06; 
			 grad[72] = w_01_06; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = -1.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_77 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_77 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_77<T>::LiftConstraint_77 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_77_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_77<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_03*(w_05_04 - 1.0*w_05_11) - 1.0*w_06_11;
}

template <typename T>
void
LiftConstraint_77<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.00000000000000006123233995736766035868820147292*w_05_04 - 0.00000000000000006123233995736766035868820147292*w_05_11; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = -0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = -1.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_78 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_78 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_78<T>::LiftConstraint_78 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_78_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_78<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_06*(w_05_04 - 1.0*w_05_11) - 1.0*w_06_12;
}

template <typename T>
void
LiftConstraint_78<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.00000000000000006123233995736766035868820147292*w_05_04 - 0.00000000000000006123233995736766035868820147292*w_05_11; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = -0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = -1.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_79 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_79 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_79<T>::LiftConstraint_79 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_79_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_79<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_02*(w_06_02 - 1.0*w_03_02 + w_06_09) - 1.0*w_07_01;
}

template <typename T>
void
LiftConstraint_79<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.00000000000000006123233995736766035868820147292*w_06_02 - 0.00000000000000006123233995736766035868820147292*w_03_02 + 0.00000000000000006123233995736766035868820147292*w_06_09; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = -1.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_80 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_80 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_80<T>::LiftConstraint_80 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_80_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_80<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_07_02 - 1.0*w_01_01*(w_03_01 + w_06_07 - 1.0*w_06_08);
}

template <typename T>
void
LiftConstraint_80<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = w_06_08 - 1.0*w_06_07 - 1.0*w_03_01; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = -1.0*w_01_01; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = -1.0*w_01_01; 
			 grad[80] = w_01_01; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = -1.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_81 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_81 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_81<T>::LiftConstraint_81 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_81_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_81<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_02*(w_06_04 - 1.0*w_03_04 + w_06_12) - 1.0*w_07_03;
}

template <typename T>
void
LiftConstraint_81<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.00000000000000006123233995736766035868820147292*w_06_04 - 0.00000000000000006123233995736766035868820147292*w_03_04 + 0.00000000000000006123233995736766035868820147292*w_06_12; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = -1.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_82 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_82 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_82<T>::LiftConstraint_82 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (89, 1, "LiftConstraint_82_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_82<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = - 1.0*w_07_04 - 1.0*w_01_01*(w_03_03 + w_06_10 - 1.0*w_06_11);
}

template <typename T>
void
LiftConstraint_82<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = w_06_11 - 1.0*w_06_10 - 1.0*w_03_03; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = -1.0*w_01_01; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = -1.0*w_01_01; 
			 grad[83] = w_01_01; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = -1.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class EEConstraint_1 : public roboptim::GenericLinearFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericLinearFunction<T>);
  
  explicit EEConstraint_1 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
EEConstraint_1<T>::EEConstraint_1 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericLinearFunction<T>
    (89, 1, "EEConstraint_1_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
EEConstraint_1<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.4*w_01_05 - 1.0*EE_1_1 + 0.36*w_02_04 + 0.36*w_02_05 + 0.87*w_02_09 - 0.55*w_03_01 - 0.2*w_03_02 + 0.87*w_03_06 - 0.87*w_03_07 - 0.63*w_04_05 + 0.63*w_04_07 + 0.16*w_05_03 - 0.16*w_05_08 + 0.532*w_06_01 + 0.2*w_06_02 - 0.55*w_06_07 + 0.55*w_06_08 + 0.2*w_06_09 - 0.532*w_07_01 + 0.532*w_07_02 + 0.65;
}

template <typename T>
void
EEConstraint_1<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.4; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.36; 
			 grad[18] = 0.36; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.87; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = -0.55; 
			 grad[33] = -0.2; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.87; 
			 grad[38] = -0.87; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = -0.63; 
			 grad[53] = 0.0; 
			 grad[54] = 0.63; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.16; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = -0.16; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.532; 
			 grad[74] = 0.2; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = -0.55; 
			 grad[80] = 0.55; 
			 grad[81] = 0.2; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = -0.532; 
			 grad[86] = 0.532; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class EEConstraint_2 : public roboptim::GenericLinearFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericLinearFunction<T>);
  
  explicit EEConstraint_2 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
EEConstraint_2<T>::EEConstraint_2 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericLinearFunction<T>
    (89, 1, "EEConstraint_2_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
EEConstraint_2<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.4*w_01_08 - 1.0*EE_1_2 - 0.36*w_02_01 + 0.36*w_02_06 + 0.87*w_02_10 - 0.55*w_03_03 - 0.2*w_03_04 + 0.87*w_03_08 - 0.87*w_03_09 - 0.63*w_04_06 + 0.63*w_04_10 + 0.16*w_05_04 - 0.16*w_05_11 + 0.532*w_06_03 + 0.2*w_06_04 - 0.55*w_06_10 + 0.55*w_06_11 + 0.2*w_06_12 - 0.532*w_07_03 + 0.532*w_07_04;
}

template <typename T>
void
EEConstraint_2<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.4; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = -0.36; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.36; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.87; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = -0.55; 
			 grad[35] = -0.2; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.87; 
			 grad[40] = -0.87; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = -0.63; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.63; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.16; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = -0.16; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.532; 
			 grad[76] = 0.2; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = -0.55; 
			 grad[83] = 0.55; 
			 grad[84] = 0.2; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = -0.532; 
			 grad[88] = 0.532; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class EEConstraint_3 : public roboptim::GenericLinearFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericLinearFunction<T>);
  
  explicit EEConstraint_3 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
EEConstraint_3<T>::EEConstraint_3 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericLinearFunction<T>
    (89, 1, "EEConstraint_3_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
EEConstraint_3<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];
  
	result[0] = 0.000000000000000053272135762909869812217942235113*w_01_14 - 0.36*w_01_04 - 1.0*EE_1_3 - 0.55*w_02_02 - 0.2*w_02_03 - 0.87*w_02_07 - 0.87*w_02_08 - 0.63*w_03_05 + 0.63*w_03_10 + 0.16*w_04_01 - 0.16*w_04_02 + 0.532*w_05_01 + 0.2*w_05_02 - 0.55*w_05_05 + 0.55*w_05_06 + 0.2*w_05_07 - 0.532*w_06_05 + 0.532*w_06_06 + 1.1;
}

template <typename T>
void
EEConstraint_3<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& w_01_01 = x[0];
	const double& w_01_02 = x[1];
	const double& w_01_03 = x[2];
	const double& w_01_04 = x[3];
	const double& w_01_05 = x[4];
	const double& w_01_06 = x[5];
	const double& w_01_07 = x[6];
	const double& w_01_08 = x[7];
	const double& w_01_09 = x[8];
	const double& w_01_10 = x[9];
	const double& w_01_11 = x[10];
	const double& w_01_12 = x[11];
	const double& w_01_13 = x[12];
	const double& w_01_14 = x[13];
	const double& w_02_01 = x[14];
	const double& w_02_02 = x[15];
	const double& w_02_03 = x[16];
	const double& w_02_04 = x[17];
	const double& w_02_05 = x[18];
	const double& w_02_06 = x[19];
	const double& w_02_07 = x[20];
	const double& w_02_08 = x[21];
	const double& w_02_09 = x[22];
	const double& w_02_10 = x[23];
	const double& w_02_11 = x[24];
	const double& w_02_12 = x[25];
	const double& w_02_13 = x[26];
	const double& w_02_14 = x[27];
	const double& w_02_15 = x[28];
	const double& w_02_16 = x[29];
	const double& w_02_17 = x[30];
	const double& w_02_18 = x[31];
	const double& w_03_01 = x[32];
	const double& w_03_02 = x[33];
	const double& w_03_03 = x[34];
	const double& w_03_04 = x[35];
	const double& w_03_05 = x[36];
	const double& w_03_06 = x[37];
	const double& w_03_07 = x[38];
	const double& w_03_08 = x[39];
	const double& w_03_09 = x[40];
	const double& w_03_10 = x[41];
	const double& w_03_11 = x[42];
	const double& w_03_12 = x[43];
	const double& w_03_13 = x[44];
	const double& w_03_14 = x[45];
	const double& w_03_15 = x[46];
	const double& w_03_16 = x[47];
	const double& w_04_01 = x[48];
	const double& w_04_02 = x[49];
	const double& w_04_03 = x[50];
	const double& w_04_04 = x[51];
	const double& w_04_05 = x[52];
	const double& w_04_06 = x[53];
	const double& w_04_07 = x[54];
	const double& w_04_08 = x[55];
	const double& w_04_09 = x[56];
	const double& w_04_10 = x[57];
	const double& w_04_11 = x[58];
	const double& w_04_12 = x[59];
	const double& w_05_01 = x[60];
	const double& w_05_02 = x[61];
	const double& w_05_03 = x[62];
	const double& w_05_04 = x[63];
	const double& w_05_05 = x[64];
	const double& w_05_06 = x[65];
	const double& w_05_07 = x[66];
	const double& w_05_08 = x[67];
	const double& w_05_09 = x[68];
	const double& w_05_10 = x[69];
	const double& w_05_11 = x[70];
	const double& w_05_12 = x[71];
	const double& w_05_13 = x[72];
	const double& w_06_01 = x[73];
	const double& w_06_02 = x[74];
	const double& w_06_03 = x[75];
	const double& w_06_04 = x[76];
	const double& w_06_05 = x[77];
	const double& w_06_06 = x[78];
	const double& w_06_07 = x[79];
	const double& w_06_08 = x[80];
	const double& w_06_09 = x[81];
	const double& w_06_10 = x[82];
	const double& w_06_11 = x[83];
	const double& w_06_12 = x[84];
	const double& w_07_01 = x[85];
	const double& w_07_02 = x[86];
	const double& w_07_03 = x[87];
	const double& w_07_04 = x[88];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = -0.36; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.000000000000000053272135762909869812217942235113; 
			 grad[14] = 0.0; 
			 grad[15] = -0.55; 
			 grad[16] = -0.2; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = -0.87; 
			 grad[21] = -0.87; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = -0.63; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.63; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.16; 
			 grad[49] = -0.16; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.532; 
			 grad[61] = 0.2; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = -0.55; 
			 grad[65] = 0.55; 
			 grad[66] = 0.2; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = -0.532; 
			 grad[78] = 0.532; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}

void solveFor (const std::vector<double>& initPos, const std::vector<double>& endEffectors)
{
  // Set the starting point.
  roboptim::Function::vector_t start ( initPos.size());
  for( int i = 0; i<initPos.size(); i++)
    start[i] = initPos[i];
  
  // Set the End Effector Goal Position
  double EE_1_1 = endEffectors[0];
	double EE_1_2 = endEffectors[1];
	double EE_1_3 = endEffectors[2];

  boost::shared_ptr<CostFunction<roboptim::EigenMatrixDense> > cost = boost::make_shared<CostFunction<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);

	boost::shared_ptr<LiftConstraint_1<roboptim::EigenMatrixDense> > cstrFunc_1 = boost::make_shared<LiftConstraint_1<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_2<roboptim::EigenMatrixDense> > cstrFunc_2 = boost::make_shared<LiftConstraint_2<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_3<roboptim::EigenMatrixDense> > cstrFunc_3 = boost::make_shared<LiftConstraint_3<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_4<roboptim::EigenMatrixDense> > cstrFunc_4 = boost::make_shared<LiftConstraint_4<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_5<roboptim::EigenMatrixDense> > cstrFunc_5 = boost::make_shared<LiftConstraint_5<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_6<roboptim::EigenMatrixDense> > cstrFunc_6 = boost::make_shared<LiftConstraint_6<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_7<roboptim::EigenMatrixDense> > cstrFunc_7 = boost::make_shared<LiftConstraint_7<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_8<roboptim::EigenMatrixDense> > cstrFunc_8 = boost::make_shared<LiftConstraint_8<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_9<roboptim::EigenMatrixDense> > cstrFunc_9 = boost::make_shared<LiftConstraint_9<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_10<roboptim::EigenMatrixDense> > cstrFunc_10 = boost::make_shared<LiftConstraint_10<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_11<roboptim::EigenMatrixDense> > cstrFunc_11 = boost::make_shared<LiftConstraint_11<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_12<roboptim::EigenMatrixDense> > cstrFunc_12 = boost::make_shared<LiftConstraint_12<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_13<roboptim::EigenMatrixDense> > cstrFunc_13 = boost::make_shared<LiftConstraint_13<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_14<roboptim::EigenMatrixDense> > cstrFunc_14 = boost::make_shared<LiftConstraint_14<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_15<roboptim::EigenMatrixDense> > cstrFunc_15 = boost::make_shared<LiftConstraint_15<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_16<roboptim::EigenMatrixDense> > cstrFunc_16 = boost::make_shared<LiftConstraint_16<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_17<roboptim::EigenMatrixDense> > cstrFunc_17 = boost::make_shared<LiftConstraint_17<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_18<roboptim::EigenMatrixDense> > cstrFunc_18 = boost::make_shared<LiftConstraint_18<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_19<roboptim::EigenMatrixDense> > cstrFunc_19 = boost::make_shared<LiftConstraint_19<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_20<roboptim::EigenMatrixDense> > cstrFunc_20 = boost::make_shared<LiftConstraint_20<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_21<roboptim::EigenMatrixDense> > cstrFunc_21 = boost::make_shared<LiftConstraint_21<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_22<roboptim::EigenMatrixDense> > cstrFunc_22 = boost::make_shared<LiftConstraint_22<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_23<roboptim::EigenMatrixDense> > cstrFunc_23 = boost::make_shared<LiftConstraint_23<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_24<roboptim::EigenMatrixDense> > cstrFunc_24 = boost::make_shared<LiftConstraint_24<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_25<roboptim::EigenMatrixDense> > cstrFunc_25 = boost::make_shared<LiftConstraint_25<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_26<roboptim::EigenMatrixDense> > cstrFunc_26 = boost::make_shared<LiftConstraint_26<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_27<roboptim::EigenMatrixDense> > cstrFunc_27 = boost::make_shared<LiftConstraint_27<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_28<roboptim::EigenMatrixDense> > cstrFunc_28 = boost::make_shared<LiftConstraint_28<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_29<roboptim::EigenMatrixDense> > cstrFunc_29 = boost::make_shared<LiftConstraint_29<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_30<roboptim::EigenMatrixDense> > cstrFunc_30 = boost::make_shared<LiftConstraint_30<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_31<roboptim::EigenMatrixDense> > cstrFunc_31 = boost::make_shared<LiftConstraint_31<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_32<roboptim::EigenMatrixDense> > cstrFunc_32 = boost::make_shared<LiftConstraint_32<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_33<roboptim::EigenMatrixDense> > cstrFunc_33 = boost::make_shared<LiftConstraint_33<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_34<roboptim::EigenMatrixDense> > cstrFunc_34 = boost::make_shared<LiftConstraint_34<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_35<roboptim::EigenMatrixDense> > cstrFunc_35 = boost::make_shared<LiftConstraint_35<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_36<roboptim::EigenMatrixDense> > cstrFunc_36 = boost::make_shared<LiftConstraint_36<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_37<roboptim::EigenMatrixDense> > cstrFunc_37 = boost::make_shared<LiftConstraint_37<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_38<roboptim::EigenMatrixDense> > cstrFunc_38 = boost::make_shared<LiftConstraint_38<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_39<roboptim::EigenMatrixDense> > cstrFunc_39 = boost::make_shared<LiftConstraint_39<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_40<roboptim::EigenMatrixDense> > cstrFunc_40 = boost::make_shared<LiftConstraint_40<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_41<roboptim::EigenMatrixDense> > cstrFunc_41 = boost::make_shared<LiftConstraint_41<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_42<roboptim::EigenMatrixDense> > cstrFunc_42 = boost::make_shared<LiftConstraint_42<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_43<roboptim::EigenMatrixDense> > cstrFunc_43 = boost::make_shared<LiftConstraint_43<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_44<roboptim::EigenMatrixDense> > cstrFunc_44 = boost::make_shared<LiftConstraint_44<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_45<roboptim::EigenMatrixDense> > cstrFunc_45 = boost::make_shared<LiftConstraint_45<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_46<roboptim::EigenMatrixDense> > cstrFunc_46 = boost::make_shared<LiftConstraint_46<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_47<roboptim::EigenMatrixDense> > cstrFunc_47 = boost::make_shared<LiftConstraint_47<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_48<roboptim::EigenMatrixDense> > cstrFunc_48 = boost::make_shared<LiftConstraint_48<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_49<roboptim::EigenMatrixDense> > cstrFunc_49 = boost::make_shared<LiftConstraint_49<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_50<roboptim::EigenMatrixDense> > cstrFunc_50 = boost::make_shared<LiftConstraint_50<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_51<roboptim::EigenMatrixDense> > cstrFunc_51 = boost::make_shared<LiftConstraint_51<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_52<roboptim::EigenMatrixDense> > cstrFunc_52 = boost::make_shared<LiftConstraint_52<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_53<roboptim::EigenMatrixDense> > cstrFunc_53 = boost::make_shared<LiftConstraint_53<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_54<roboptim::EigenMatrixDense> > cstrFunc_54 = boost::make_shared<LiftConstraint_54<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_55<roboptim::EigenMatrixDense> > cstrFunc_55 = boost::make_shared<LiftConstraint_55<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_56<roboptim::EigenMatrixDense> > cstrFunc_56 = boost::make_shared<LiftConstraint_56<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_57<roboptim::EigenMatrixDense> > cstrFunc_57 = boost::make_shared<LiftConstraint_57<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_58<roboptim::EigenMatrixDense> > cstrFunc_58 = boost::make_shared<LiftConstraint_58<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_59<roboptim::EigenMatrixDense> > cstrFunc_59 = boost::make_shared<LiftConstraint_59<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_60<roboptim::EigenMatrixDense> > cstrFunc_60 = boost::make_shared<LiftConstraint_60<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_61<roboptim::EigenMatrixDense> > cstrFunc_61 = boost::make_shared<LiftConstraint_61<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_62<roboptim::EigenMatrixDense> > cstrFunc_62 = boost::make_shared<LiftConstraint_62<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_63<roboptim::EigenMatrixDense> > cstrFunc_63 = boost::make_shared<LiftConstraint_63<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_64<roboptim::EigenMatrixDense> > cstrFunc_64 = boost::make_shared<LiftConstraint_64<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_65<roboptim::EigenMatrixDense> > cstrFunc_65 = boost::make_shared<LiftConstraint_65<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_66<roboptim::EigenMatrixDense> > cstrFunc_66 = boost::make_shared<LiftConstraint_66<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_67<roboptim::EigenMatrixDense> > cstrFunc_67 = boost::make_shared<LiftConstraint_67<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_68<roboptim::EigenMatrixDense> > cstrFunc_68 = boost::make_shared<LiftConstraint_68<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_69<roboptim::EigenMatrixDense> > cstrFunc_69 = boost::make_shared<LiftConstraint_69<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_70<roboptim::EigenMatrixDense> > cstrFunc_70 = boost::make_shared<LiftConstraint_70<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_71<roboptim::EigenMatrixDense> > cstrFunc_71 = boost::make_shared<LiftConstraint_71<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_72<roboptim::EigenMatrixDense> > cstrFunc_72 = boost::make_shared<LiftConstraint_72<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_73<roboptim::EigenMatrixDense> > cstrFunc_73 = boost::make_shared<LiftConstraint_73<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_74<roboptim::EigenMatrixDense> > cstrFunc_74 = boost::make_shared<LiftConstraint_74<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_75<roboptim::EigenMatrixDense> > cstrFunc_75 = boost::make_shared<LiftConstraint_75<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_76<roboptim::EigenMatrixDense> > cstrFunc_76 = boost::make_shared<LiftConstraint_76<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_77<roboptim::EigenMatrixDense> > cstrFunc_77 = boost::make_shared<LiftConstraint_77<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_78<roboptim::EigenMatrixDense> > cstrFunc_78 = boost::make_shared<LiftConstraint_78<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_79<roboptim::EigenMatrixDense> > cstrFunc_79 = boost::make_shared<LiftConstraint_79<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_80<roboptim::EigenMatrixDense> > cstrFunc_80 = boost::make_shared<LiftConstraint_80<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_81<roboptim::EigenMatrixDense> > cstrFunc_81 = boost::make_shared<LiftConstraint_81<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_82<roboptim::EigenMatrixDense> > cstrFunc_82 = boost::make_shared<LiftConstraint_82<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<EEConstraint_1<roboptim::EigenMatrixDense> > cstrFunc_83 = boost::make_shared<EEConstraint_1<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<EEConstraint_2<roboptim::EigenMatrixDense> > cstrFunc_84 = boost::make_shared<EEConstraint_2<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<EEConstraint_3<roboptim::EigenMatrixDense> > cstrFunc_85 = boost::make_shared<EEConstraint_3<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);

  //Create problem
  solver_t::problem_t pb (*cost);

  // Set bounds for all optimization parameters
  pb.argumentBounds ()[0] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[1] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[2] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[3] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[4] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[5] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[6] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[7] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[8] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[9] = roboptim::Function::makeInterval (-pi, pi);

  // Create constraints.
  {
		LiftConstraint_1<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_1), bounds, scales); 
	}
	{
		LiftConstraint_2<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_2), bounds, scales); 
	}
	{
		LiftConstraint_3<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_3), bounds, scales); 
	}
	{
		LiftConstraint_4<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_4), bounds, scales); 
	}
	{
		LiftConstraint_5<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_5), bounds, scales); 
	}
	{
		LiftConstraint_6<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_6), bounds, scales); 
	}
	{
		LiftConstraint_7<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_7), bounds, scales); 
	}
	{
		LiftConstraint_8<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_8), bounds, scales); 
	}
	{
		LiftConstraint_9<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_9), bounds, scales); 
	}
	{
		LiftConstraint_10<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_10), bounds, scales); 
	}
	{
		LiftConstraint_11<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_11), bounds, scales); 
	}
	{
		LiftConstraint_12<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_12), bounds, scales); 
	}
	{
		LiftConstraint_13<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_13), bounds, scales); 
	}
	{
		LiftConstraint_14<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_14), bounds, scales); 
	}
	{
		LiftConstraint_15<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_15), bounds, scales); 
	}
	{
		LiftConstraint_16<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_16), bounds, scales); 
	}
	{
		LiftConstraint_17<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_17), bounds, scales); 
	}
	{
		LiftConstraint_18<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_18), bounds, scales); 
	}
	{
		LiftConstraint_19<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_19), bounds, scales); 
	}
	{
		LiftConstraint_20<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_20), bounds, scales); 
	}
	{
		LiftConstraint_21<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_21), bounds, scales); 
	}
	{
		LiftConstraint_22<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_22), bounds, scales); 
	}
	{
		LiftConstraint_23<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_23), bounds, scales); 
	}
	{
		LiftConstraint_24<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_24), bounds, scales); 
	}
	{
		LiftConstraint_25<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_25), bounds, scales); 
	}
	{
		LiftConstraint_26<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_26), bounds, scales); 
	}
	{
		LiftConstraint_27<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_27), bounds, scales); 
	}
	{
		LiftConstraint_28<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_28), bounds, scales); 
	}
	{
		LiftConstraint_29<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_29), bounds, scales); 
	}
	{
		LiftConstraint_30<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_30), bounds, scales); 
	}
	{
		LiftConstraint_31<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_31), bounds, scales); 
	}
	{
		LiftConstraint_32<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_32), bounds, scales); 
	}
	{
		LiftConstraint_33<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_33), bounds, scales); 
	}
	{
		LiftConstraint_34<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_34), bounds, scales); 
	}
	{
		LiftConstraint_35<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_35), bounds, scales); 
	}
	{
		LiftConstraint_36<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_36), bounds, scales); 
	}
	{
		LiftConstraint_37<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_37), bounds, scales); 
	}
	{
		LiftConstraint_38<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_38), bounds, scales); 
	}
	{
		LiftConstraint_39<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_39), bounds, scales); 
	}
	{
		LiftConstraint_40<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_40), bounds, scales); 
	}
	{
		LiftConstraint_41<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_41), bounds, scales); 
	}
	{
		LiftConstraint_42<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_42), bounds, scales); 
	}
	{
		LiftConstraint_43<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_43), bounds, scales); 
	}
	{
		LiftConstraint_44<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_44), bounds, scales); 
	}
	{
		LiftConstraint_45<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_45), bounds, scales); 
	}
	{
		LiftConstraint_46<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_46), bounds, scales); 
	}
	{
		LiftConstraint_47<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_47), bounds, scales); 
	}
	{
		LiftConstraint_48<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_48), bounds, scales); 
	}
	{
		LiftConstraint_49<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_49), bounds, scales); 
	}
	{
		LiftConstraint_50<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_50), bounds, scales); 
	}
	{
		LiftConstraint_51<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_51), bounds, scales); 
	}
	{
		LiftConstraint_52<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_52), bounds, scales); 
	}
	{
		LiftConstraint_53<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_53), bounds, scales); 
	}
	{
		LiftConstraint_54<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_54), bounds, scales); 
	}
	{
		LiftConstraint_55<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_55), bounds, scales); 
	}
	{
		LiftConstraint_56<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_56), bounds, scales); 
	}
	{
		LiftConstraint_57<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_57), bounds, scales); 
	}
	{
		LiftConstraint_58<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_58), bounds, scales); 
	}
	{
		LiftConstraint_59<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_59), bounds, scales); 
	}
	{
		LiftConstraint_60<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_60), bounds, scales); 
	}
	{
		LiftConstraint_61<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_61), bounds, scales); 
	}
	{
		LiftConstraint_62<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_62), bounds, scales); 
	}
	{
		LiftConstraint_63<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_63), bounds, scales); 
	}
	{
		LiftConstraint_64<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_64), bounds, scales); 
	}
	{
		LiftConstraint_65<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_65), bounds, scales); 
	}
	{
		LiftConstraint_66<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_66), bounds, scales); 
	}
	{
		LiftConstraint_67<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_67), bounds, scales); 
	}
	{
		LiftConstraint_68<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_68), bounds, scales); 
	}
	{
		LiftConstraint_69<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_69), bounds, scales); 
	}
	{
		LiftConstraint_70<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_70), bounds, scales); 
	}
	{
		LiftConstraint_71<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_71), bounds, scales); 
	}
	{
		LiftConstraint_72<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_72), bounds, scales); 
	}
	{
		LiftConstraint_73<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_73), bounds, scales); 
	}
	{
		LiftConstraint_74<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_74), bounds, scales); 
	}
	{
		LiftConstraint_75<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_75), bounds, scales); 
	}
	{
		LiftConstraint_76<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_76), bounds, scales); 
	}
	{
		LiftConstraint_77<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_77), bounds, scales); 
	}
	{
		LiftConstraint_78<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_78), bounds, scales); 
	}
	{
		LiftConstraint_79<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_79), bounds, scales); 
	}
	{
		LiftConstraint_80<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_80), bounds, scales); 
	}
	{
		LiftConstraint_81<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_81), bounds, scales); 
	}
	{
		LiftConstraint_82<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_82), bounds, scales); 
	}
	{
		EEConstraint_1<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericLinearFunction<roboptim::EigenMatrixDense> > (cstrFunc_83), bounds, scales); 
	}
	{
		EEConstraint_2<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericLinearFunction<roboptim::EigenMatrixDense> > (cstrFunc_84), bounds, scales); 
	}
	{
		EEConstraint_3<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericLinearFunction<roboptim::EigenMatrixDense> > (cstrFunc_85), bounds, scales); 
	}

  pb.startingPoint () = start;
  

  {
    roboptim::SolverFactory<solver_t> factoryTMP ("cfsqp", pb);
    boost::timer::auto_cpu_timer t;
    for( int i = 0; i<100; i++)
    {
      roboptim::SolverFactory<solver_t> factory ("cfsqp", pb);
      solver_t& solver = factory ();
      solver.solve();
    }
  }

  roboptim::SolverFactory<solver_t> factory ("cfsqp", pb);
  solver_t& solver = factory ();
  solver.solve();
  solver_t::result_t res = solver.minimum ();

  
  //std::cout << solver << std::endl;

  // Process the result
  switch (res.which ())
    {
    case solver_t::SOLVER_VALUE:
      {
        // Get the result.
	roboptim::Result& result =
	  boost::get<roboptim::Result> (res);

        // Display the result.
	std::cout << "A solution has been found: " << std::endl
                  << result << std::endl;

        return;
      }

    case solver_t::SOLVER_VALUE_WARNINGS:
      {
        // Get the result.
        roboptim::ResultWithWarnings& result =
	  boost::get<roboptim::ResultWithWarnings> (res);

        // Display the result.
	std::cout << "A solution has been found: " << std::endl
                  << result << std::endl;

        return;
      }

    case solver_t::SOLVER_NO_SOLUTION:
    case solver_t::SOLVER_ERROR:
      {
	std::cout << "A solution should have been found. Failing..."
                  << std::endl
                  << boost::get<roboptim::SolverError> (res).what ()
                  << std::endl;

        return;
      }
    }

  return;
}

int main ()
{
  	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0018044;
		start[11] = 0.0081465;
		start[12] = 0.0081153;
		start[13] = 0.0071308;
		start[14] = 0.0094723;
		start[15] = 0.0076201;
		start[16] = 0.0065017;
		start[17] = 0.0058056;
		start[18] = 0.0028803;
		start[19] = 0.00038422;
		start[20] = 0.0014081;
		start[21] = 0.0045869;
		start[22] = 0.0017655;
		start[23] = 0.0032543;
		start[24] = 0.001822;
		start[25] = 0.0082702;
		start[26] = 0.0085153;
		start[27] = 0.0036614;
		start[28] = 0.0011744;
		start[29] = 0.0042829;
		start[30] = 0.0092065;
		start[31] = 0.0050056;
		start[32] = 0.0013329;
		start[33] = 0.0045727;
		start[34] = 0.0092295;
		start[35] = 0.0054226;
		start[36] = 0.0084809;
		start[37] = 0.0026068;
		start[38] = 0.00065151;
		start[39] = 0.0060579;
		start[40] = 0.0032431;
		start[41] = 0.002269;
		start[42] = 0.0039198;
		start[43] = 0.006606;
		start[44] = 0.00044759;
		start[45] = 0.0052141;
		start[46] = 0.00033374;
		start[47] = 0.00042247;
		start[48] = 0.0050766;
		start[49] = 0.0070378;
		start[50] = 0.0048299;
		start[51] = 0.0073478;
		start[52] = 0.0093553;
		start[53] = 0.0094824;
		start[54] = 0.0061497;
		start[55] = 0.009356;
		start[56] = 0.0048776;
		start[57] = 0.0055512;
		start[58] = 0.002965;
		start[59] = 0.0083961;
		start[60] = 0.0050677;
		start[61] = 0.0039409;
		start[62] = 0.0065909;
		start[63] = 0.00052595;
		start[64] = 0.004999;
		start[65] = 0.0081678;
		start[66] = 0.0085625;
		start[67] = 0.007913;
		start[68] = 0.0075935;
		start[69] = 0.0021146;
		start[70] = 0.0083484;
		start[71] = 0.0085099;
		start[72] = 0.0020857;
		start[73] = 0.0066992;
		start[74] = 0.0091504;
		start[75] = 0.0037218;
		start[76] = 0.00045992;
		start[77] = 0.0046445;
		start[78] = 0.0070312;
		start[79] = 0.009311;
		start[80] = 0.0021853;
		start[81] = 0.0024283;
		start[82] = 0.0026832;
		start[83] = 0.001809;
		start[84] = 0.0039919;
		start[85] = 0.0009526;
		start[86] = 0.0014305;
		start[87] = 0.0087973;
		start[88] = 0.0034705;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0087821;
		start[11] = 0.0033031;
		start[12] = 0.0081617;
		start[13] = 0.0092131;
		start[14] = 0.00043676;
		start[15] = 0.0072268;
		start[16] = 0.0098622;
		start[17] = 0.0032945;
		start[18] = 0.0041783;
		start[19] = 0.0090497;
		start[20] = 0.0045979;
		start[21] = 0.00045106;
		start[22] = 0.0027779;
		start[23] = 0.0046513;
		start[24] = 0.0038341;
		start[25] = 0.0030806;
		start[26] = 0.0055978;
		start[27] = 0.00077441;
		start[28] = 0.0034527;
		start[29] = 0.0099344;
		start[30] = 0.0035346;
		start[31] = 0.0047965;
		start[32] = 0.0052893;
		start[33] = 0.0086302;
		start[34] = 0.0050954;
		start[35] = 0.0094647;
		start[36] = 0.009447;
		start[37] = 0.0070191;
		start[38] = 0.0019831;
		start[39] = 0.00011444;
		start[40] = 0.0092026;
		start[41] = 0.0049695;
		start[42] = 0.0023504;
		start[43] = 0.0022433;
		start[44] = 0.00772;
		start[45] = 0.004195;
		start[46] = 0.0077117;
		start[47] = 0.0024933;
		start[48] = 0.0079805;
		start[49] = 0.0046577;
		start[50] = 0.0010832;
		start[51] = 0.0085132;
		start[52] = 0.0055775;
		start[53] = 0.0088161;
		start[54] = 0.0016189;
		start[55] = 0.0091736;
		start[56] = 0.0066673;
		start[57] = 0.00096938;
		start[58] = 0.00166;
		start[59] = 0.0043745;
		start[60] = 0.0054044;
		start[61] = 0.0080629;
		start[62] = 0.0025636;
		start[63] = 0.0052038;
		start[64] = 0.0022847;
		start[65] = 0.0083021;
		start[66] = 0.0086218;
		start[67] = 0.0057542;
		start[68] = 0.0096145;
		start[69] = 0.0039736;
		start[70] = 0.0087911;
		start[71] = 0.00036518;
		start[72] = 0.0030341;
		start[73] = 0.0036601;
		start[74] = 0.0010012;
		start[75] = 0.0014274;
		start[76] = 0.0014013;
		start[77] = 0.0092371;
		start[78] = 0.0075715;
		start[79] = 0.0083587;
		start[80] = 0.0070445;
		start[81] = 0.0071434;
		start[82] = 0.0095062;
		start[83] = 0.0063922;
		start[84] = 0.0017502;
		start[85] = 0.0085475;
		start[86] = 0.0068827;
		start[87] = 0.0028536;
		start[88] = 0.0071449;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0080129;
		start[11] = 0.0025738;
		start[12] = 0.0022666;
		start[13] = 0.0026341;
		start[14] = 0.0071071;
		start[15] = 0.0084228;
		start[16] = 0.0012264;
		start[17] = 0.0070504;
		start[18] = 0.0015529;
		start[19] = 0.0070821;
		start[20] = 0.00037949;
		start[21] = 0.0089851;
		start[22] = 0.0023727;
		start[23] = 0.0054641;
		start[24] = 0.0079996;
		start[25] = 0.0090222;
		start[26] = 0.0087106;
		start[27] = 0.00598;
		start[28] = 0.0031366;
		start[29] = 0.00047057;
		start[30] = 0.0041014;
		start[31] = 0.0012525;
		start[32] = 0.0018149;
		start[33] = 0.0082109;
		start[34] = 3.2554e-05;
		start[35] = 0.00048906;
		start[36] = 0.0077045;
		start[37] = 0.0030131;
		start[38] = 0.0062071;
		start[39] = 0.0011986;
		start[40] = 0.0086885;
		start[41] = 0.0090076;
		start[42] = 0.003034;
		start[43] = 0.0041758;
		start[44] = 0.0066302;
		start[45] = 0.0012444;
		start[46] = 0.0098115;
		start[47] = 0.0029994;
		start[48] = 0.0054192;
		start[49] = 0.00013058;
		start[50] = 0.008451;
		start[51] = 0.0038864;
		start[52] = 0.0052098;
		start[53] = 0.0011792;
		start[54] = 0.008234;
		start[55] = 0.0086525;
		start[56] = 0.0083807;
		start[57] = 0.0061763;
		start[58] = 0.003177;
		start[59] = 0.0099883;
		start[60] = 0.0057902;
		start[61] = 0.0069852;
		start[62] = 0.0098806;
		start[63] = 0.0055953;
		start[64] = 0.004104;
		start[65] = 0.00013291;
		start[66] = 0.0098391;
		start[67] = 0.0057288;
		start[68] = 0.0031415;
		start[69] = 0.0073503;
		start[70] = 0.0019496;
		start[71] = 0.002894;
		start[72] = 0.0032589;
		start[73] = 0.0068761;
		start[74] = 0.0076507;
		start[75] = 0.0063444;
		start[76] = 0.00099504;
		start[77] = 0.0066798;
		start[78] = 0.003395;
		start[79] = 0.0079402;
		start[80] = 0.0038105;
		start[81] = 0.0027398;
		start[82] = 0.0087467;
		start[83] = 0.0098729;
		start[84] = 0.0096457;
		start[85] = 0.0072106;
		start[86] = 0.005639;
		start[87] = 0.0053905;
		start[88] = 0.0052333;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0040088;
		start[11] = 0.0015943;
		start[12] = 0.0085957;
		start[13] = 9.0518e-06;
		start[14] = 0.0056953;
		start[15] = 0.0080091;
		start[16] = 0.00039741;
		start[17] = 0.0037395;
		start[18] = 0.0066212;
		start[19] = 0.0039013;
		start[20] = 0.0057736;
		start[21] = 0.0029831;
		start[22] = 0.007361;
		start[23] = 0.0092579;
		start[24] = 0.0097822;
		start[25] = 0.00025653;
		start[26] = 0.0091273;
		start[27] = 0.0040049;
		start[28] = 0.0064299;
		start[29] = 0.0081812;
		start[30] = 0.00522;
		start[31] = 0.00010237;
		start[32] = 0.0099933;
		start[33] = 0.0080335;
		start[34] = 0.007087;
		start[35] = 0.0064689;
		start[36] = 0.0052827;
		start[37] = 0.0035617;
		start[38] = 0.0071436;
		start[39] = 0.0095209;
		start[40] = 0.0078246;
		start[41] = 0.0087085;
		start[42] = 0.0099737;
		start[43] = 0.0090542;
		start[44] = 0.0053649;
		start[45] = 0.0093523;
		start[46] = 0.0089054;
		start[47] = 0.0057299;
		start[48] = 0.0053633;
		start[49] = 0.0052736;
		start[50] = 0.0070733;
		start[51] = 6.3908e-05;
		start[52] = 0.00012624;
		start[53] = 0.0074159;
		start[54] = 0.0041541;
		start[55] = 0.0064143;
		start[56] = 0.0040722;
		start[57] = 0.0099768;
		start[58] = 0.0042289;
		start[59] = 0.00097317;
		start[60] = 0.0054848;
		start[61] = 0.0035242;
		start[62] = 0.0029364;
		start[63] = 0.0075484;
		start[64] = 0.0035251;
		start[65] = 0.0009903;
		start[66] = 0.0032683;
		start[67] = 0.0077906;
		start[68] = 0.00097979;
		start[69] = 0.0032708;
		start[70] = 0.0077266;
		start[71] = 0.003072;
		start[72] = 0.0018994;
		start[73] = 0.0092592;
		start[74] = 0.0056874;
		start[75] = 0.002067;
		start[76] = 0.0020068;
		start[77] = 0.0031609;
		start[78] = 0.0088469;
		start[79] = 0.0071996;
		start[80] = 0.0052584;
		start[81] = 0.00063032;
		start[82] = 0.00054553;
		start[83] = 0.0043923;
		start[84] = 0.0055222;
		start[85] = 0.0003059;
		start[86] = 0.0067327;
		start[87] = 0.0073884;
		start[88] = 0.0094179;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0063777;
		start[11] = 0.00416;
		start[12] = 0.0025226;
		start[13] = 0.0049211;
		start[14] = 0.0089317;
		start[15] = 0.0064951;
		start[16] = 0.009601;
		start[17] = 0.006755;
		start[18] = 0.0078958;
		start[19] = 0.0040527;
		start[20] = 0.0035037;
		start[21] = 0.003026;
		start[22] = 0.0081583;
		start[23] = 0.0052166;
		start[24] = 0.0020103;
		start[25] = 0.0040068;
		start[26] = 0.0023821;
		start[27] = 0.0039813;
		start[28] = 0.0071842;
		start[29] = 0.0041619;
		start[30] = 0.0061677;
		start[31] = 0.0020039;
		start[32] = 0.0004126;
		start[33] = 0.0055668;
		start[34] = 0.00054609;
		start[35] = 0.0043077;
		start[36] = 0.0042387;
		start[37] = 0.0051919;
		start[38] = 0.0007945;
		start[39] = 0.0082844;
		start[40] = 0.0027317;
		start[41] = 0.0049334;
		start[42] = 0.0010148;
		start[43] = 0.0037544;
		start[44] = 0.0022837;
		start[45] = 0.0048488;
		start[46] = 0.0048438;
		start[47] = 0.0047194;
		start[48] = 0.0095363;
		start[49] = 0.007752;
		start[50] = 0.0015267;
		start[51] = 0.0053594;
		start[52] = 0.0072313;
		start[53] = 0.00085452;
		start[54] = 0.0012043;
		start[55] = 0.0053882;
		start[56] = 0.0070505;
		start[57] = 0.003678;
		start[58] = 0.00096554;
		start[59] = 0.0063269;
		start[60] = 0.0051093;
		start[61] = 0.001806;
		start[62] = 0.0076783;
		start[63] = 0.003205;
		start[64] = 0.00094114;
		start[65] = 0.0090181;
		start[66] = 0.0070516;
		start[67] = 0.0035949;
		start[68] = 0.0046972;
		start[69] = 0.001959;
		start[70] = 0.008685;
		start[71] = 0.0089981;
		start[72] = 0.0096815;
		start[73] = 0.007894;
		start[74] = 0.0080029;
		start[75] = 1.1717e-05;
		start[76] = 0.0051544;
		start[77] = 0.0024156;
		start[78] = 1.7284e-05;
		start[79] = 0.0038466;
		start[80] = 0.00082649;
		start[81] = 0.0051042;
		start[82] = 0.0052711;
		start[83] = 0.0089386;
		start[84] = 0.0043207;
		start[85] = 0.0054592;
		start[86] = 0.0058972;
		start[87] = 0.0093017;
		start[88] = 0.0014365;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.00022619;
		start[11] = 0.0016496;
		start[12] = 0.0090734;
		start[13] = 0.0098512;
		start[14] = 0.0024963;
		start[15] = 0.0095657;
		start[16] = 0.0071813;
		start[17] = 0.0093215;
		start[18] = 0.0023891;
		start[19] = 0.0063572;
		start[20] = 0.0061306;
		start[21] = 0.0058622;
		start[22] = 0.0088489;
		start[23] = 0.0060021;
		start[24] = 0.0054189;
		start[25] = 0.0086874;
		start[26] = 0.004289;
		start[27] = 0.000221;
		start[28] = 0.0042058;
		start[29] = 0.0055842;
		start[30] = 0.0072481;
		start[31] = 0.0064729;
		start[32] = 0.0028792;
		start[33] = 0.0025998;
		start[34] = 0.0066022;
		start[35] = 3.9286e-05;
		start[36] = 0.0014339;
		start[37] = 0.0073023;
		start[38] = 0.0059263;
		start[39] = 0.0023308;
		start[40] = 0.0043101;
		start[41] = 0.0044304;
		start[42] = 0.0076954;
		start[43] = 0.0098591;
		start[44] = 0.0072133;
		start[45] = 0.0084058;
		start[46] = 0.0011999;
		start[47] = 0.0019177;
		start[48] = 0.0074198;
		start[49] = 0.0040253;
		start[50] = 0.0042322;
		start[51] = 0.0048837;
		start[52] = 0.008568;
		start[53] = 0.0070649;
		start[54] = 0.00049529;
		start[55] = 0.0047333;
		start[56] = 0.0084329;
		start[57] = 0.0094703;
		start[58] = 0.0088913;
		start[59] = 0.0094406;
		start[60] = 0.0016426;
		start[61] = 0.0019204;
		start[62] = 0.0043297;
		start[63] = 0.0040735;
		start[64] = 0.0029981;
		start[65] = 0.00094515;
		start[66] = 0.0023258;
		start[67] = 0.0072901;
		start[68] = 0.007228;
		start[69] = 0.0010824;
		start[70] = 0.0040314;
		start[71] = 0.009741;
		start[72] = 0.0089547;
		start[73] = 0.0099633;
		start[74] = 0.0039824;
		start[75] = 0.0010856;
		start[76] = 0.009409;
		start[77] = 0.0038002;
		start[78] = 0.0019428;
		start[79] = 0.0045593;
		start[80] = 0.0011444;
		start[81] = 0.0034468;
		start[82] = 0.0087454;
		start[83] = 0.0020528;
		start[84] = 0.00038497;
		start[85] = 0.0039223;
		start[86] = 0.00012394;
		start[87] = 0.0033207;
		start[88] = 0.0033748;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.00065972;
		start[11] = 0.0092829;
		start[12] = 0.0059112;
		start[13] = 0.0071686;
		start[14] = 0.0072026;
		start[15] = 0.00057953;
		start[16] = 0.007608;
		start[17] = 0.0098796;
		start[18] = 0.0030408;
		start[19] = 0.00072688;
		start[20] = 0.005813;
		start[21] = 0.0095386;
		start[22] = 0.0098466;
		start[23] = 0.00089009;
		start[24] = 0.0034571;
		start[25] = 0.0048886;
		start[26] = 0.0089563;
		start[27] = 0.0046533;
		start[28] = 0.0092878;
		start[29] = 0.00025816;
		start[30] = 0.00062505;
		start[31] = 0.0018894;
		start[32] = 0.0013091;
		start[33] = 0.0017449;
		start[34] = 0.0038141;
		start[35] = 0.004567;
		start[36] = 0.0072969;
		start[37] = 0.0084087;
		start[38] = 0.0013781;
		start[39] = 0.0095346;
		start[40] = 0.006801;
		start[41] = 0.0053861;
		start[42] = 0.0093863;
		start[43] = 0.0042031;
		start[44] = 0.0063399;
		start[45] = 0.0042542;
		start[46] = 0.0065239;
		start[47] = 0.0017649;
		start[48] = 0.0092108;
		start[49] = 0.0037086;
		start[50] = 0.0083456;
		start[51] = 0.0086498;
		start[52] = 0.0088405;
		start[53] = 0.0056341;
		start[54] = 0.0075542;
		start[55] = 0.00030124;
		start[56] = 0.00079338;
		start[57] = 0.0057642;
		start[58] = 0.0035666;
		start[59] = 0.0031616;
		start[60] = 0.0023663;
		start[61] = 0.0024635;
		start[62] = 0.0015063;
		start[63] = 0.0012472;
		start[64] = 0.0056326;
		start[65] = 0.0052622;
		start[66] = 0.0074996;
		start[67] = 0.0016081;
		start[68] = 0.0014122;
		start[69] = 0.0010652;
		start[70] = 0.0093593;
		start[71] = 0.00010988;
		start[72] = 0.0020378;
		start[73] = 0.0064198;
		start[74] = 0.0042298;
		start[75] = 0.0095779;
		start[76] = 0.0028383;
		start[77] = 0.0088731;
		start[78] = 0.00065643;
		start[79] = 0.0084338;
		start[80] = 0.0027653;
		start[81] = 0.0057156;
		start[82] = 0.0064965;
		start[83] = 0.0087472;
		start[84] = 0.0048755;
		start[85] = 0.001861;
		start[86] = 0.0034926;
		start[87] = 0.0043466;
		start[88] = 0.0060468;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0057719;
		start[11] = 0.0050635;
		start[12] = 0.0024883;
		start[13] = 0.0053375;
		start[14] = 0.0077286;
		start[15] = 0.0055105;
		start[16] = 0.0073974;
		start[17] = 0.009477;
		start[18] = 0.0079569;
		start[19] = 0.0026073;
		start[20] = 0.0099842;
		start[21] = 0.0032041;
		start[22] = 0.0080842;
		start[23] = 0.0073558;
		start[24] = 0.0072298;
		start[25] = 0.00074384;
		start[26] = 0.0066719;
		start[27] = 0.0042933;
		start[28] = 0.0074641;
		start[29] = 0.0031336;
		start[30] = 0.008664;
		start[31] = 0.0013585;
		start[32] = 0.0073624;
		start[33] = 0.0057461;
		start[34] = 0.0053607;
		start[35] = 0.0059543;
		start[36] = 0.0074011;
		start[37] = 0.00676;
		start[38] = 0.0086478;
		start[39] = 0.0013277;
		start[40] = 0.0049588;
		start[41] = 0.0092477;
		start[42] = 0.0020739;
		start[43] = 0.008166;
		start[44] = 0.0046639;
		start[45] = 0.0022588;
		start[46] = 0.00096323;
		start[47] = 0.0056659;
		start[48] = 0.0048269;
		start[49] = 0.0069796;
		start[50] = 0.00019557;
		start[51] = 0.0071627;
		start[52] = 0.0057518;
		start[53] = 0.0056543;
		start[54] = 0.0099401;
		start[55] = 0.0018925;
		start[56] = 0.0038078;
		start[57] = 0.0063665;
		start[58] = 0.0012622;
		start[59] = 0.0074374;
		start[60] = 0.007843;
		start[61] = 0.00011181;
		start[62] = 0.0080855;
		start[63] = 0.0094939;
		start[64] = 0.0046298;
		start[65] = 0.007316;
		start[66] = 0.0030294;
		start[67] = 0.00053948;
		start[68] = 0.0088042;
		start[69] = 0.0061441;
		start[70] = 3.4231e-05;
		start[71] = 0.009634;
		start[72] = 0.0064457;
		start[73] = 0.0048886;
		start[74] = 0.0017871;
		start[75] = 0.0038893;
		start[76] = 0.0061039;
		start[77] = 0.0065204;
		start[78] = 0.0085329;
		start[79] = 0.0048031;
		start[80] = 0.0054842;
		start[81] = 0.00012669;
		start[82] = 0.0098772;
		start[83] = 0.0003744;
		start[84] = 0.0019415;
		start[85] = 0.0044075;
		start[86] = 0.0024348;
		start[87] = 0.0066268;
		start[88] = 0.0051987;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0072059;
		start[11] = 0.0010497;
		start[12] = 0.0020064;
		start[13] = 0.0094699;
		start[14] = 0.0094937;
		start[15] = 0.0064754;
		start[16] = 0.00038262;
		start[17] = 0.0012336;
		start[18] = 0.0029397;
		start[19] = 0.00681;
		start[20] = 0.0064428;
		start[21] = 0.0018765;
		start[22] = 0.004168;
		start[23] = 0.0078235;
		start[24] = 0.0011229;
		start[25] = 0.0041381;
		start[26] = 0.0077616;
		start[27] = 0.0043915;
		start[28] = 0.0038847;
		start[29] = 0.00049866;
		start[30] = 0.00088878;
		start[31] = 0.00087514;
		start[32] = 0.0017539;
		start[33] = 0.0061505;
		start[34] = 0.006576;
		start[35] = 0.0013991;
		start[36] = 0.0071069;
		start[37] = 0.0097516;
		start[38] = 0.0015239;
		start[39] = 0.00092873;
		start[40] = 0.0022758;
		start[41] = 0.00088579;
		start[42] = 0.0070742;
		start[43] = 0.0097114;
		start[44] = 0.0039464;
		start[45] = 0.0044286;
		start[46] = 0.0081436;
		start[47] = 0.009537;
		start[48] = 0.0083589;
		start[49] = 0.0028894;
		start[50] = 0.0082417;
		start[51] = 0.0099404;
		start[52] = 0.0073487;
		start[53] = 0.0020514;
		start[54] = 0.0071618;
		start[55] = 0.0017094;
		start[56] = 0.0028468;
		start[57] = 0.0019566;
		start[58] = 0.00084895;
		start[59] = 0.0024743;
		start[60] = 0.0020083;
		start[61] = 0.0028093;
		start[62] = 0.0095451;
		start[63] = 0.0036812;
		start[64] = 0.0022341;
		start[65] = 0.0078638;
		start[66] = 0.0040364;
		start[67] = 0.0028793;
		start[68] = 0.0042186;
		start[69] = 0.0064621;
		start[70] = 0.0017039;
		start[71] = 0.008732;
		start[72] = 0.0071408;
		start[73] = 0.0015995;
		start[74] = 0.00087385;
		start[75] = 0.0011923;
		start[76] = 0.0099635;
		start[77] = 0.0061378;
		start[78] = 0.0026738;
		start[79] = 0.0025057;
		start[80] = 0.0074936;
		start[81] = 0.0034439;
		start[82] = 0.007216;
		start[83] = 0.0076916;
		start[84] = 0.009939;
		start[85] = 0.003183;
		start[86] = 0.0047394;
		start[87] = 0.0020678;
		start[88] = 0.007846;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0038219;
		start[11] = 0.0023515;
		start[12] = 0.0044198;
		start[13] = 0.0003214;
		start[14] = 0.008298;
		start[15] = 0.0087761;
		start[16] = 0.0094592;
		start[17] = 0.003979;
		start[18] = 0.0035853;
		start[19] = 0.0087825;
		start[20] = 0.0099926;
		start[21] = 0.0016857;
		start[22] = 0.0091321;
		start[23] = 0.0098597;
		start[24] = 0.0079087;
		start[25] = 0.0081951;
		start[26] = 0.0056274;
		start[27] = 0.0066805;
		start[28] = 0.0060959;
		start[29] = 0.0083213;
		start[30] = 0.0090496;
		start[31] = 0.0081358;
		start[32] = 0.0087182;
		start[33] = 0.0095928;
		start[34] = 0.0038666;
		start[35] = 0.0061001;
		start[36] = 0.0020777;
		start[37] = 0.0058138;
		start[38] = 0.0018352;
		start[39] = 0.0069686;
		start[40] = 0.007281;
		start[41] = 0.0056383;
		start[42] = 0.00067363;
		start[43] = 0.00053901;
		start[44] = 0.0047234;
		start[45] = 0.0028151;
		start[46] = 0.008467;
		start[47] = 0.0065738;
		start[48] = 0.0096559;
		start[49] = 0.0072044;
		start[50] = 0.0031929;
		start[51] = 0.0097488;
		start[52] = 0.0054713;
		start[53] = 0.0053816;
		start[54] = 0.0082159;
		start[55] = 0.0042865;
		start[56] = 0.0099455;
		start[57] = 0.0015872;
		start[58] = 0.0059299;
		start[59] = 0.0056743;
		start[60] = 0.0028473;
		start[61] = 0.0089268;
		start[62] = 0.005192;
		start[63] = 0.0034934;
		start[64] = 0.0026792;
		start[65] = 0.0012837;
		start[66] = 0.0056559;
		start[67] = 0.0097608;
		start[68] = 0.00061723;
		start[69] = 0.0075445;
		start[70] = 0.0030266;
		start[71] = 0.00056575;
		start[72] = 0.0048591;
		start[73] = 0.0098186;
		start[74] = 0.0060223;
		start[75] = 0.0081944;
		start[76] = 0.0041895;
		start[77] = 0.0084912;
		start[78] = 0.0014106;
		start[79] = 0.0055675;
		start[80] = 0.0096109;
		start[81] = 0.0087483;
		start[82] = 0.0028792;
		start[83] = 0.0036495;
		start[84] = 0.0047754;
		start[85] = 0.0034947;
		start[86] = 0.0037979;
		start[87] = 0.0030674;
		start[88] = 0.00068864;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0043988;
		start[11] = 0.0055983;
		start[12] = 0.0080571;
		start[13] = 0.0051377;
		start[14] = 0.0019355;
		start[15] = 0.004189;
		start[16] = 0.0047495;
		start[17] = 0.0034318;
		start[18] = 0.0045332;
		start[19] = 0.00077437;
		start[20] = 0.007976;
		start[21] = 0.0021282;
		start[22] = 0.0015697;
		start[23] = 0.0036409;
		start[24] = 0.0055855;
		start[25] = 0.0030813;
		start[26] = 0.0046751;
		start[27] = 0.0052179;
		start[28] = 0.00052948;
		start[29] = 0.0011293;
		start[30] = 0.0018633;
		start[31] = 0.0061217;
		start[32] = 0.0098578;
		start[33] = 0.008608;
		start[34] = 0.0030389;
		start[35] = 0.001872;
		start[36] = 0.0091277;
		start[37] = 0.0026161;
		start[38] = 0.0067067;
		start[39] = 0.0027747;
		start[40] = 0.0013432;
		start[41] = 0.00081365;
		start[42] = 0.0043485;
		start[43] = 0.0032003;
		start[44] = 0.0024154;
		start[45] = 0.0092141;
		start[46] = 0.0018283;
		start[47] = 0.0050285;
		start[48] = 0.005992;
		start[49] = 0.0044614;
		start[50] = 0.0026584;
		start[51] = 0.0033144;
		start[52] = 0.0021816;
		start[53] = 0.002287;
		start[54] = 0.0037712;
		start[55] = 0.0077899;
		start[56] = 0.0051985;
		start[57] = 0.0013923;
		start[58] = 0.0063196;
		start[59] = 0.0076545;
		start[60] = 0.0045292;
		start[61] = 0.0064288;
		start[62] = 0.0086425;
		start[63] = 0.0016799;
		start[64] = 0.0061879;
		start[65] = 0.0057213;
		start[66] = 0.0016049;
		start[67] = 0.0078661;
		start[68] = 0.0038915;
		start[69] = 0.0085493;
		start[70] = 0.0088171;
		start[71] = 0.0055258;
		start[72] = 0.0069877;
		start[73] = 0.0099897;
		start[74] = 0.0028704;
		start[75] = 0.0070999;
		start[76] = 0.0039502;
		start[77] = 0.0070007;
		start[78] = 0.0072763;
		start[79] = 0.00021106;
		start[80] = 0.005897;
		start[81] = 0.0044004;
		start[82] = 0.0058414;
		start[83] = 0.0028948;
		start[84] = 0.0079096;
		start[85] = 0.00085402;
		start[86] = 0.0060007;
		start[87] = 0.0046217;
		start[88] = 0.0047174;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.008807;
		start[11] = 0.0075738;
		start[12] = 0.00051565;
		start[13] = 0.0063874;
		start[14] = 0.0078973;
		start[15] = 0.00084189;
		start[16] = 0.0094624;
		start[17] = 0.0078421;
		start[18] = 0.0022681;
		start[19] = 0.0037605;
		start[20] = 0.0085982;
		start[21] = 0.0075294;
		start[22] = 0.0034316;
		start[23] = 0.0080291;
		start[24] = 0.0059656;
		start[25] = 0.0010252;
		start[26] = 0.0073747;
		start[27] = 0.00012961;
		start[28] = 0.0093389;
		start[29] = 0.0022903;
		start[30] = 0.0065008;
		start[31] = 0.0063536;
		start[32] = 0.006242;
		start[33] = 0.0017043;
		start[34] = 0.0097566;
		start[35] = 0.0068979;
		start[36] = 0.0027459;
		start[37] = 0.0019082;
		start[38] = 0.0051493;
		start[39] = 0.0091092;
		start[40] = 0.0081521;
		start[41] = 0.0067992;
		start[42] = 0.0085116;
		start[43] = 0.0075356;
		start[44] = 0.0066102;
		start[45] = 0.0033023;
		start[46] = 0.0047396;
		start[47] = 0.00055141;
		start[48] = 0.0024893;
		start[49] = 0.0074124;
		start[50] = 0.00083008;
		start[51] = 0.0055954;
		start[52] = 0.0095685;
		start[53] = 0.0094353;
		start[54] = 0.0036813;
		start[55] = 0.0016062;
		start[56] = 0.0009023;
		start[57] = 0.0081188;
		start[58] = 0.006811;
		start[59] = 0.0045425;
		start[60] = 0.0057426;
		start[61] = 0.0090927;
		start[62] = 0.0090392;
		start[63] = 0.0012371;
		start[64] = 0.0009155;
		start[65] = 0.0027515;
		start[66] = 0.0051941;
		start[67] = 0.0035094;
		start[68] = 0.0061881;
		start[69] = 0.0087372;
		start[70] = 0.00011187;
		start[71] = 0.0096379;
		start[72] = 0.0084413;
		start[73] = 0.00092507;
		start[74] = 0.008865;
		start[75] = 0.005091;
		start[76] = 0.0092018;
		start[77] = 0.0019705;
		start[78] = 0.0071924;
		start[79] = 0.0067459;
		start[80] = 0.0068028;
		start[81] = 0.00037164;
		start[82] = 0.0080941;
		start[83] = 0.0033235;
		start[84] = 0.00045019;
		start[85] = 0.00078577;
		start[86] = 0.0061469;
		start[87] = 0.0039956;
		start[88] = 0.009612;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0098336;
		start[11] = 0.0033088;
		start[12] = 0.00088149;
		start[13] = 0.0076311;
		start[14] = 0.0040202;
		start[15] = 2.2185e-05;
		start[16] = 0.0083532;
		start[17] = 0.0029572;
		start[18] = 0.0041977;
		start[19] = 0.0014821;
		start[20] = 0.0015876;
		start[21] = 0.0060626;
		start[22] = 0.005661;
		start[23] = 0.0017832;
		start[24] = 0.0070445;
		start[25] = 0.0021623;
		start[26] = 0.0024363;
		start[27] = 0.0038598;
		start[28] = 0.0082387;
		start[29] = 0.0082579;
		start[30] = 0.0040477;
		start[31] = 0.0047266;
		start[32] = 0.0046346;
		start[33] = 0.0011826;
		start[34] = 0.0073223;
		start[35] = 0.0052974;
		start[36] = 0.0073226;
		start[37] = 0.0026615;
		start[38] = 0.0027794;
		start[39] = 0.0064135;
		start[40] = 0.008628;
		start[41] = 0.0048306;
		start[42] = 0.0018205;
		start[43] = 0.0074737;
		start[44] = 0.0054267;
		start[45] = 0.0044291;
		start[46] = 0.00086117;
		start[47] = 0.0059051;
		start[48] = 0.0067669;
		start[49] = 0.0076907;
		start[50] = 0.0082385;
		start[51] = 0.0050155;
		start[52] = 0.003158;
		start[53] = 0.0073948;
		start[54] = 0.00096797;
		start[55] = 0.0020653;
		start[56] = 0.0092634;
		start[57] = 0.0052071;
		start[58] = 0.0024766;
		start[59] = 0.0041914;
		start[60] = 0.0040266;
		start[61] = 0.0021684;
		start[62] = 0.0063647;
		start[63] = 0.0027619;
		start[64] = 0.0069771;
		start[65] = 0.0030612;
		start[66] = 0.0077821;
		start[67] = 0.0081897;
		start[68] = 0.0040099;
		start[69] = 0.0061966;
		start[70] = 0.002222;
		start[71] = 0.0025317;
		start[72] = 0.0060641;
		start[73] = 0.0053967;
		start[74] = 0.005689;
		start[75] = 0.0022318;
		start[76] = 0.0019478;
		start[77] = 0.0051756;
		start[78] = 0.0025178;
		start[79] = 0.0060101;
		start[80] = 0.00069449;
		start[81] = 0.0063206;
		start[82] = 0.0013602;
		start[83] = 0.0045195;
		start[84] = 0.0027528;
		start[85] = 0.0024717;
		start[86] = 0.008524;
		start[87] = 0.0059026;
		start[88] = 0.0055368;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0020428;
		start[11] = 0.0084371;
		start[12] = 0.0060608;
		start[13] = 0.007806;
		start[14] = 0.0016782;
		start[15] = 0.0010309;
		start[16] = 0.0053453;
		start[17] = 0.0082876;
		start[18] = 0.0053669;
		start[19] = 0.0074642;
		start[20] = 0.0014428;
		start[21] = 0.0014588;
		start[22] = 0.0092882;
		start[23] = 0.0065152;
		start[24] = 0.0088958;
		start[25] = 0.0052598;
		start[26] = 0.0040606;
		start[27] = 0.0082669;
		start[28] = 0.0028956;
		start[29] = 0.0016837;
		start[30] = 0.0046578;
		start[31] = 0.0060883;
		start[32] = 0.0002189;
		start[33] = 0.0089666;
		start[34] = 0.0010864;
		start[35] = 0.0044828;
		start[36] = 0.0016127;
		start[37] = 0.008448;
		start[38] = 0.0059943;
		start[39] = 0.0033949;
		start[40] = 0.002876;
		start[41] = 0.0050549;
		start[42] = 0.0048174;
		start[43] = 0.0085756;
		start[44] = 0.0030677;
		start[45] = 0.0098377;
		start[46] = 0.0053247;
		start[47] = 0.0049347;
		start[48] = 0.0072562;
		start[49] = 0.0018387;
		start[50] = 0.0088624;
		start[51] = 0.0068043;
		start[52] = 0.0012017;
		start[53] = 0.0066338;
		start[54] = 0.0081083;
		start[55] = 0.0057853;
		start[56] = 0.0056904;
		start[57] = 0.0025904;
		start[58] = 0.0088001;
		start[59] = 0.007491;
		start[60] = 0.0025074;
		start[61] = 0.0015272;
		start[62] = 0.0054413;
		start[63] = 0.0083053;
		start[64] = 0.002305;
		start[65] = 0.00091633;
		start[66] = 0.002262;
		start[67] = 0.0099001;
		start[68] = 0.00043725;
		start[69] = 0.0097568;
		start[70] = 0.0040236;
		start[71] = 0.0040764;
		start[72] = 0.0073911;
		start[73] = 0.0024654;
		start[74] = 0.0024317;
		start[75] = 0.0062085;
		start[76] = 0.0088505;
		start[77] = 0.0023841;
		start[78] = 0.0033434;
		start[79] = 0.0059363;
		start[80] = 0.00073369;
		start[81] = 0.0071871;
		start[82] = 0.0037809;
		start[83] = 0.0091989;
		start[84] = 0.0062738;
		start[85] = 0.0050971;
		start[86] = 0.0068038;
		start[87] = 0.00079;
		start[88] = 0.0006462;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0015203;
		start[11] = 0.0057863;
		start[12] = 0.0050115;
		start[13] = 0.0016154;
		start[14] = 0.0017475;
		start[15] = 0.0017024;
		start[16] = 0.0037663;
		start[17] = 0.003041;
		start[18] = 0.0043335;
		start[19] = 0.0088625;
		start[20] = 0.0037109;
		start[21] = 0.00075868;
		start[22] = 0.0067717;
		start[23] = 0.0095375;
		start[24] = 0.0048874;
		start[25] = 0.0013147;
		start[26] = 0.0078186;
		start[27] = 0.0034765;
		start[28] = 0.0037405;
		start[29] = 0.0017698;
		start[30] = 0.0013087;
		start[31] = 0.0045531;
		start[32] = 0.0090678;
		start[33] = 0.0038413;
		start[34] = 0.009476;
		start[35] = 0.009531;
		start[36] = 0.0098701;
		start[37] = 0.0049764;
		start[38] = 0.00029572;
		start[39] = 0.0085391;
		start[40] = 2.4838e-05;
		start[41] = 0.0075651;
		start[42] = 0.0026303;
		start[43] = 0.0088225;
		start[44] = 0.0045676;
		start[45] = 0.0035042;
		start[46] = 0.0069464;
		start[47] = 0.0086276;
		start[48] = 0.0066295;
		start[49] = 0.0062563;
		start[50] = 0.004673;
		start[51] = 0.00088049;
		start[52] = 0.006857;
		start[53] = 0.0016781;
		start[54] = 0.0083464;
		start[55] = 0.0053861;
		start[56] = 0.0068797;
		start[57] = 0.007414;
		start[58] = 0.0054614;
		start[59] = 0.0057382;
		start[60] = 0.0040332;
		start[61] = 0.003489;
		start[62] = 0.0019045;
		start[63] = 0.0078239;
		start[64] = 0.0065259;
		start[65] = 0.0047262;
		start[66] = 0.0062671;
		start[67] = 3.3795e-05;
		start[68] = 0.0081595;
		start[69] = 0.0057864;
		start[70] = 0.0096034;
		start[71] = 0.0095552;
		start[72] = 0.0069894;
		start[73] = 0.0078513;
		start[74] = 0.0051786;
		start[75] = 0.0093542;
		start[76] = 0.006918;
		start[77] = 0.0072558;
		start[78] = 0.0019686;
		start[79] = 0.0043384;
		start[80] = 0.0099226;
		start[81] = 0.0036526;
		start[82] = 0.003273;
		start[83] = 0.0087996;
		start[84] = 0.008478;
		start[85] = 0.0060324;
		start[86] = 0.0045737;
		start[87] = 0.0020213;
		start[88] = 0.009294;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.00016969;
		start[11] = 0.0018376;
		start[12] = 0.0098956;
		start[13] = 0.007931;
		start[14] = 0.0020905;
		start[15] = 0.0084616;
		start[16] = 0.0093433;
		start[17] = 0.0010753;
		start[18] = 0.001518;
		start[19] = 0.0054363;
		start[20] = 0.008518;
		start[21] = 0.0046581;
		start[22] = 0.0050415;
		start[23] = 0.0099656;
		start[24] = 0.0018915;
		start[25] = 0.0027537;
		start[26] = 0.0037656;
		start[27] = 0.00044657;
		start[28] = 0.0011782;
		start[29] = 0.0049206;
		start[30] = 0.003065;
		start[31] = 0.002202;
		start[32] = 0.00032743;
		start[33] = 0.00016367;
		start[34] = 0.0032756;
		start[35] = 0.0049664;
		start[36] = 0.007824;
		start[37] = 0.0033222;
		start[38] = 0.008006;
		start[39] = 0.0087684;
		start[40] = 0.0031738;
		start[41] = 0.0069634;
		start[42] = 0.0092382;
		start[43] = 0.0088955;
		start[44] = 0.0059919;
		start[45] = 0.0011702;
		start[46] = 0.001384;
		start[47] = 0.0034931;
		start[48] = 0.00072919;
		start[49] = 0.0049462;
		start[50] = 0.0006564;
		start[51] = 0.0072543;
		start[52] = 0.0074307;
		start[53] = 0.0042348;
		start[54] = 0.0044689;
		start[55] = 0.0059738;
		start[56] = 0.0029197;
		start[57] = 0.0066395;
		start[58] = 0.0010965;
		start[59] = 0.0010816;
		start[60] = 0.0024126;
		start[61] = 0.003699;
		start[62] = 0.0010407;
		start[63] = 0.0017603;
		start[64] = 0.0025183;
		start[65] = 0.0089132;
		start[66] = 0.0073776;
		start[67] = 0.0048118;
		start[68] = 0.0060143;
		start[69] = 0.00014787;
		start[70] = 0.0021718;
		start[71] = 0.0037246;
		start[72] = 0.0070001;
		start[73] = 0.0054766;
		start[74] = 0.0094619;
		start[75] = 0.0095137;
		start[76] = 0.0067484;
		start[77] = 0.0052004;
		start[78] = 0.0017148;
		start[79] = 0.00030843;
		start[80] = 0.00035634;
		start[81] = 0.0088509;
		start[82] = 0.0023235;
		start[83] = 0.00048447;
		start[84] = 0.0015242;
		start[85] = 0.0035862;
		start[86] = 0.0073657;
		start[87] = 0.0082609;
		start[88] = 0.0066248;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0071036;
		start[11] = 0.0028315;
		start[12] = 0.0054392;
		start[13] = 0.0071524;
		start[14] = 0.0092336;
		start[15] = 0.006033;
		start[16] = 0.0041821;
		start[17] = 0.00055651;
		start[18] = 0.0095483;
		start[19] = 0.0036733;
		start[20] = 0.001182;
		start[21] = 0.0066795;
		start[22] = 0.0019823;
		start[23] = 0.0025817;
		start[24] = 0.0035303;
		start[25] = 0.0038121;
		start[26] = 0.0048763;
		start[27] = 0.007234;
		start[28] = 0.0086477;
		start[29] = 0.0051513;
		start[30] = 0.0093522;
		start[31] = 0.0070702;
		start[32] = 0.0047879;
		start[33] = 0.0036408;
		start[34] = 0.0063287;
		start[35] = 0.0063022;
		start[36] = 0.0089674;
		start[37] = 0.0072053;
		start[38] = 0.003347;
		start[39] = 0.0084469;
		start[40] = 0.0051421;
		start[41] = 0.0078744;
		start[42] = 0.0040759;
		start[43] = 0.0086254;
		start[44] = 0.0068573;
		start[45] = 0.0049262;
		start[46] = 0.0073296;
		start[47] = 0.000893;
		start[48] = 0.0013846;
		start[49] = 0.0069268;
		start[50] = 0.0071911;
		start[51] = 0.0086567;
		start[52] = 0.0032399;
		start[53] = 0.0049927;
		start[54] = 0.0066558;
		start[55] = 0.00087034;
		start[56] = 0.007709;
		start[57] = 0.008086;
		start[58] = 0.0048087;
		start[59] = 0.0035821;
		start[60] = 0.0093873;
		start[61] = 0.0020893;
		start[62] = 0.00097116;
		start[63] = 0.0056279;
		start[64] = 0.0016746;
		start[65] = 0.0073882;
		start[66] = 0.0095497;
		start[67] = 0.0022455;
		start[68] = 0.0028625;
		start[69] = 0.0024425;
		start[70] = 0.0048318;
		start[71] = 0.0020227;
		start[72] = 0.0032637;
		start[73] = 0.0015069;
		start[74] = 0.0046172;
		start[75] = 0.0065581;
		start[76] = 0.00076956;
		start[77] = 0.0035052;
		start[78] = 0.0021272;
		start[79] = 0.0087617;
		start[80] = 0.0055391;
		start[81] = 0.0088404;
		start[82] = 0.0035558;
		start[83] = 0.0098617;
		start[84] = 0.0082148;
		start[85] = 0.0086091;
		start[86] = 0.0016955;
		start[87] = 0.0030741;
		start[88] = 0.0074253;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0084487;
		start[11] = 0.0098796;
		start[12] = 0.0015645;
		start[13] = 0.0087115;
		start[14] = 0.0077127;
		start[15] = 0.007028;
		start[16] = 0.0049581;
		start[17] = 0.0022501;
		start[18] = 0.007066;
		start[19] = 0.0011779;
		start[20] = 0.0027207;
		start[21] = 0.0046025;
		start[22] = 0.0009864;
		start[23] = 0.003242;
		start[24] = 0.0048043;
		start[25] = 0.0025605;
		start[26] = 0.0018516;
		start[27] = 0.0063434;
		start[28] = 0.0098738;
		start[29] = 0.0083141;
		start[30] = 0.0060069;
		start[31] = 0.0020348;
		start[32] = 0.0026687;
		start[33] = 0.0055328;
		start[34] = 0.00038838;
		start[35] = 0.0096993;
		start[36] = 0.0020996;
		start[37] = 0.0046922;
		start[38] = 0.0070941;
		start[39] = 0.0040123;
		start[40] = 0.0025713;
		start[41] = 0.0026567;
		start[42] = 0.0031446;
		start[43] = 0.0096687;
		start[44] = 0.0058409;
		start[45] = 0.0017546;
		start[46] = 0.00047351;
		start[47] = 0.0032343;
		start[48] = 0.0033532;
		start[49] = 0.0046445;
		start[50] = 0.0055331;
		start[51] = 0.0086419;
		start[52] = 0.0022776;
		start[53] = 0.0053976;
		start[54] = 0.0052351;
		start[55] = 0.0018091;
		start[56] = 0.0018643;
		start[57] = 0.0099384;
		start[58] = 0.0086781;
		start[59] = 0.0064425;
		start[60] = 0.0056176;
		start[61] = 0.0010223;
		start[62] = 0.0062285;
		start[63] = 0.0023933;
		start[64] = 0.0054434;
		start[65] = 0.0087703;
		start[66] = 0.0083782;
		start[67] = 0.004609;
		start[68] = 0.0015489;
		start[69] = 0.004195;
		start[70] = 0.0067921;
		start[71] = 0.003446;
		start[72] = 0.0015957;
		start[73] = 0.004358;
		start[74] = 0.0019609;
		start[75] = 0.0086033;
		start[76] = 0.0027774;
		start[77] = 0.0069398;
		start[78] = 0.0033733;
		start[79] = 0.0065409;
		start[80] = 0.0044302;
		start[81] = 0.007343;
		start[82] = 0.0050956;
		start[83] = 0.0071056;
		start[84] = 0.0046719;
		start[85] = 0.0044763;
		start[86] = 0.0054336;
		start[87] = 0.00095875;
		start[88] = 0.00015227;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0059324;
		start[11] = 0.0075577;
		start[12] = 0.0016883;
		start[13] = 0.0020752;
		start[14] = 0.0089605;
		start[15] = 0.0054654;
		start[16] = 0.008069;
		start[17] = 0.0046742;
		start[18] = 0.00045918;
		start[19] = 0.0055306;
		start[20] = 0.0062908;
		start[21] = 0.0058836;
		start[22] = 0.0029302;
		start[23] = 0.0023911;
		start[24] = 0.004671;
		start[25] = 0.0040262;
		start[26] = 0.0092028;
		start[27] = 0.00030085;
		start[28] = 0.0074049;
		start[29] = 0.0065806;
		start[30] = 0.0069236;
		start[31] = 0.00044068;
		start[32] = 0.0023779;
		start[33] = 0.0087993;
		start[34] = 0.0024268;
		start[35] = 0.0082858;
		start[36] = 0.0039745;
		start[37] = 0.0037848;
		start[38] = 0.0016351;
		start[39] = 0.0050396;
		start[40] = 0.0014531;
		start[41] = 0.0035008;
		start[42] = 3.0291e-05;
		start[43] = 0.0025512;
		start[44] = 0.0046235;
		start[45] = 0.0063491;
		start[46] = 0.0043095;
		start[47] = 0.0091435;
		start[48] = 0.0073314;
		start[49] = 0.0091995;
		start[50] = 0.0062454;
		start[51] = 0.00099238;
		start[52] = 0.0074586;
		start[53] = 0.00092034;
		start[54] = 0.0043533;
		start[55] = 0.009819;
		start[56] = 0.008928;
		start[57] = 0.005059;
		start[58] = 0.006261;
		start[59] = 0.0049292;
		start[60] = 0.0033094;
		start[61] = 2.4411e-05;
		start[62] = 0.0083967;
		start[63] = 0.004723;
		start[64] = 0.009503;
		start[65] = 0.0058643;
		start[66] = 0.0026139;
		start[67] = 0.00067793;
		start[68] = 0.0008073;
		start[69] = 0.0066318;
		start[70] = 0.0077747;
		start[71] = 0.0019764;
		start[72] = 0.0042541;
		start[73] = 0.0065326;
		start[74] = 0.0094936;
		start[75] = 0.0071513;
		start[76] = 0.0035135;
		start[77] = 0.0042007;
		start[78] = 0.0017777;
		start[79] = 0.0031498;
		start[80] = 0.0014833;
		start[81] = 0.0017526;
		start[82] = 0.0034255;
		start[83] = 0.0072739;
		start[84] = 0.0031196;
		start[85] = 0.0053168;
		start[86] = 0.0027194;
		start[87] = 0.0052149;
		start[88] = 0.0097153;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.00060924;
		start[11] = 0.0024991;
		start[12] = 0.0021667;
		start[13] = 0.0027918;
		start[14] = 0.0082596;
		start[15] = 0.0033573;
		start[16] = 0.0022157;
		start[17] = 0.0016612;
		start[18] = 0.003117;
		start[19] = 0.0035689;
		start[20] = 0.0032393;
		start[21] = 0.0027802;
		start[22] = 0.0029555;
		start[23] = 0.00382;
		start[24] = 0.0086291;
		start[25] = 0.0070411;
		start[26] = 0.0074501;
		start[27] = 0.0023868;
		start[28] = 0.001263;
		start[29] = 0.00304;
		start[30] = 0.0083424;
		start[31] = 0.0047065;
		start[32] = 0.0020396;
		start[33] = 0.0056079;
		start[34] = 0.0075426;
		start[35] = 0.0071868;
		start[36] = 0.007286;
		start[37] = 0.0075212;
		start[38] = 0.0044913;
		start[39] = 0.0022246;
		start[40] = 0.0092794;
		start[41] = 0.0099266;
		start[42] = 0.0077145;
		start[43] = 0.0065514;
		start[44] = 0.0073868;
		start[45] = 0.0047149;
		start[46] = 0.0052608;
		start[47] = 0.0035062;
		start[48] = 0.0093113;
		start[49] = 0.0046516;
		start[50] = 0.0055021;
		start[51] = 6.734e-05;
		start[52] = 0.0030532;
		start[53] = 0.0054876;
		start[54] = 0.0026529;
		start[55] = 0.0062172;
		start[56] = 0.0098942;
		start[57] = 0.008873;
		start[58] = 0.0087457;
		start[59] = 0.0075425;
		start[60] = 0.0069295;
		start[61] = 0.0067952;
		start[62] = 0.0052044;
		start[63] = 0.0042745;
		start[64] = 0.0071666;
		start[65] = 0.0033983;
		start[66] = 0.0010075;
		start[67] = 0.0099952;
		start[68] = 0.0070679;
		start[69] = 0.0051888;
		start[70] = 0.00087597;
		start[71] = 0.0091051;
		start[72] = 0.0046715;
		start[73] = 0.0054877;
		start[74] = 0.00035134;
		start[75] = 0.0012264;
		start[76] = 0.0045162;
		start[77] = 0.0017704;
		start[78] = 0.003871;
		start[79] = 0.0020752;
		start[80] = 0.00351;
		start[81] = 0.0086444;
		start[82] = 0.0068991;
		start[83] = 0.007122;
		start[84] = 0.00031125;
		start[85] = 0.0058577;
		start[86] = 0.0055447;
		start[87] = 0.0096058;
		start[88] = 0.0091839;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0075862;
		start[11] = 0.0023855;
		start[12] = 0.0070595;
		start[13] = 0.001661;
		start[14] = 0.0036296;
		start[15] = 0.00088214;
		start[16] = 0.0021397;
		start[17] = 0.0024082;
		start[18] = 0.0024507;
		start[19] = 0.0061348;
		start[20] = 0.00095919;
		start[21] = 0.00087495;
		start[22] = 0.0019939;
		start[23] = 0.0074989;
		start[24] = 0.0073517;
		start[25] = 0.0045817;
		start[26] = 0.0085015;
		start[27] = 0.0018707;
		start[28] = 0.0094912;
		start[29] = 0.0002034;
		start[30] = 0.0012802;
		start[31] = 0.0065481;
		start[32] = 0.008708;
		start[33] = 0.0095147;
		start[34] = 0.0095695;
		start[35] = 0.0054806;
		start[36] = 0.0011432;
		start[37] = 0.0079865;
		start[38] = 0.0077274;
		start[39] = 0.0077392;
		start[40] = 0.0070263;
		start[41] = 0.0077446;
		start[42] = 3.8611e-05;
		start[43] = 0.0081213;
		start[44] = 0.00050332;
		start[45] = 0.0094059;
		start[46] = 0.0015461;
		start[47] = 0.007274;
		start[48] = 0.0015469;
		start[49] = 0.00063413;
		start[50] = 0.0038489;
		start[51] = 0.0045772;
		start[52] = 0.0010033;
		start[53] = 0.0027545;
		start[54] = 0.0071964;
		start[55] = 0.0036154;
		start[56] = 0.0038556;
		start[57] = 0.00092758;
		start[58] = 0.0096156;
		start[59] = 0.0063542;
		start[60] = 0.0079847;
		start[61] = 0.0065648;
		start[62] = 0.0085544;
		start[63] = 0.0088838;
		start[64] = 0.003013;
		start[65] = 0.00717;
		start[66] = 0.0032345;
		start[67] = 0.0028486;
		start[68] = 0.002414;
		start[69] = 0.0083333;
		start[70] = 0.0053088;
		start[71] = 0.0042226;
		start[72] = 0.0041354;
		start[73] = 0.0082615;
		start[74] = 0.0072155;
		start[75] = 0.0059824;
		start[76] = 0.0031492;
		start[77] = 0.0016138;
		start[78] = 0.00083696;
		start[79] = 0.0015845;
		start[80] = 0.007789;
		start[81] = 0.00032163;
		start[82] = 0.008596;
		start[83] = 0.001565;
		start[84] = 0.0035628;
		start[85] = 3.6348e-05;
		start[86] = 0.0087011;
		start[87] = 4.8376e-05;
		start[88] = 0.0079829;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0027529;
		start[11] = 0.00038388;
		start[12] = 0.0023029;
		start[13] = 0.0063959;
		start[14] = 0.0022596;
		start[15] = 0.0011112;
		start[16] = 0.00085013;
		start[17] = 0.0056696;
		start[18] = 0.0086171;
		start[19] = 0.0012647;
		start[20] = 0.0072947;
		start[21] = 0.001887;
		start[22] = 0.0017019;
		start[23] = 0.0016581;
		start[24] = 0.008001;
		start[25] = 0.0046287;
		start[26] = 0.0086801;
		start[27] = 0.0030232;
		start[28] = 0.0026571;
		start[29] = 0.0022411;
		start[30] = 0.0094029;
		start[31] = 0.00852;
		start[32] = 0.0056936;
		start[33] = 0.00035236;
		start[34] = 0.0051792;
		start[35] = 0.0098091;
		start[36] = 0.0067386;
		start[37] = 0.0085055;
		start[38] = 0.0016645;
		start[39] = 0.0037849;
		start[40] = 0.00079142;
		start[41] = 0.00935;
		start[42] = 0.0097669;
		start[43] = 0.0073678;
		start[44] = 0.0054809;
		start[45] = 0.0077159;
		start[46] = 0.0071797;
		start[47] = 0.0030313;
		start[48] = 0.0027498;
		start[49] = 0.0017613;
		start[50] = 0.0067164;
		start[51] = 0.0016169;
		start[52] = 0.0028745;
		start[53] = 0.0044219;
		start[54] = 0.0059279;
		start[55] = 0.0010024;
		start[56] = 0.0073953;
		start[57] = 0.0012958;
		start[58] = 0.0077969;
		start[59] = 0.0083091;
		start[60] = 0.0097464;
		start[61] = 0.0027362;
		start[62] = 0.0099402;
		start[63] = 0.0097396;
		start[64] = 0.0073398;
		start[65] = 0.0067222;
		start[66] = 0.0074901;
		start[67] = 0.0064623;
		start[68] = 0.0095468;
		start[69] = 0.0015235;
		start[70] = 0.0015781;
		start[71] = 0.0089603;
		start[72] = 0.0022498;
		start[73] = 0.0085845;
		start[74] = 0.0087365;
		start[75] = 0.00035258;
		start[76] = 0.0037158;
		start[77] = 0.00037109;
		start[78] = 0.002362;
		start[79] = 0.0043303;
		start[80] = 0.0098738;
		start[81] = 0.0017731;
		start[82] = 0.0076004;
		start[83] = 0.0053463;
		start[84] = 0.0060436;
		start[85] = 0.0015937;
		start[86] = 0.0075693;
		start[87] = 0.008896;
		start[88] = 0.0084587;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0030197;
		start[11] = 0.0032788;
		start[12] = 0.0015506;
		start[13] = 0.00088289;
		start[14] = 0.0011112;
		start[15] = 0.0083187;
		start[16] = 0.0065746;
		start[17] = 0.0072249;
		start[18] = 0.0063999;
		start[19] = 0.0046211;
		start[20] = 0.0019895;
		start[21] = 0.00095825;
		start[22] = 0.0032431;
		start[23] = 0.0025648;
		start[24] = 0.0020514;
		start[25] = 0.004335;
		start[26] = 0.0078364;
		start[27] = 0.0036919;
		start[28] = 0.0018855;
		start[29] = 0.0071655;
		start[30] = 0.0083249;
		start[31] = 0.0098435;
		start[32] = 0.0081124;
		start[33] = 0.0055031;
		start[34] = 8.5843e-05;
		start[35] = 0.0011249;
		start[36] = 0.00040883;
		start[37] = 0.00068462;
		start[38] = 0.0016773;
		start[39] = 0.0066589;
		start[40] = 0.0083967;
		start[41] = 0.0071153;
		start[42] = 0.0060117;
		start[43] = 0.0094864;
		start[44] = 0.0075185;
		start[45] = 0.0028813;
		start[46] = 0.0049333;
		start[47] = 0.0031205;
		start[48] = 0.0013488;
		start[49] = 0.0095444;
		start[50] = 0.0076037;
		start[51] = 0.00063237;
		start[52] = 0.0044469;
		start[53] = 0.0079385;
		start[54] = 0.0091185;
		start[55] = 0.0085247;
		start[56] = 0.0014856;
		start[57] = 0.0072549;
		start[58] = 0.0020765;
		start[59] = 0.0097569;
		start[60] = 0.0089524;
		start[61] = 0.00034236;
		start[62] = 0.007851;
		start[63] = 0.0063065;
		start[64] = 0.0055848;
		start[65] = 0.0089203;
		start[66] = 0.0053446;
		start[67] = 0.0068609;
		start[68] = 0.0095363;
		start[69] = 0.0073159;
		start[70] = 0.0033739;
		start[71] = 0.0031053;
		start[72] = 0.0020594;
		start[73] = 0.0057801;
		start[74] = 0.0080835;
		start[75] = 0.0062936;
		start[76] = 0.0042765;
		start[77] = 0.0035889;
		start[78] = 0.0091659;
		start[79] = 0.0015346;
		start[80] = 0.0032442;
		start[81] = 0.0020171;
		start[82] = 0.0084412;
		start[83] = 0.004653;
		start[84] = 0.009596;
		start[85] = 0.00013272;
		start[86] = 0.0012951;
		start[87] = 0.0091385;
		start[88] = 0.0019259;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0043795;
		start[11] = 0.0032771;
		start[12] = 0.0075724;
		start[13] = 0.0019293;
		start[14] = 0.0071873;
		start[15] = 0.0021802;
		start[16] = 0.0063066;
		start[17] = 0.0055121;
		start[18] = 0.0010795;
		start[19] = 0.0064791;
		start[20] = 0.0093036;
		start[21] = 0.0051127;
		start[22] = 0.0045917;
		start[23] = 0.0016514;
		start[24] = 0.0068792;
		start[25] = 0.0038308;
		start[26] = 0.0057045;
		start[27] = 0.0022198;
		start[28] = 0.0053124;
		start[29] = 0.0018377;
		start[30] = 0.0034456;
		start[31] = 0.0098327;
		start[32] = 0.0041111;
		start[33] = 0.0068292;
		start[34] = 0.0012147;
		start[35] = 0.0050559;
		start[36] = 0.0075472;
		start[37] = 0.0027438;
		start[38] = 0.0018671;
		start[39] = 0.0094383;
		start[40] = 0.008183;
		start[41] = 0.0033757;
		start[42] = 0.0087428;
		start[43] = 0.0073782;
		start[44] = 0.0014105;
		start[45] = 0.0021686;
		start[46] = 0.0026929;
		start[47] = 0.0098837;
		start[48] = 0.0093944;
		start[49] = 0.0051871;
		start[50] = 0.0087831;
		start[51] = 0.0021652;
		start[52] = 0.009222;
		start[53] = 0.0090097;
		start[54] = 0.0012199;
		start[55] = 0.006534;
		start[56] = 0.0050124;
		start[57] = 0.0090305;
		start[58] = 0.007983;
		start[59] = 0.0015553;
		start[60] = 0.00073368;
		start[61] = 0.0014939;
		start[62] = 0.0069789;
		start[63] = 0.0074755;
		start[64] = 0.0038008;
		start[65] = 0.0054468;
		start[66] = 0.0031033;
		start[67] = 0.0039454;
		start[68] = 0.0094778;
		start[69] = 0.0061604;
		start[70] = 0.0081805;
		start[71] = 0.0055907;
		start[72] = 0.0028457;
		start[73] = 0.0081066;
		start[74] = 0.0015389;
		start[75] = 0.0087583;
		start[76] = 0.0027263;
		start[77] = 0.0098024;
		start[78] = 0.0063135;
		start[79] = 0.0020422;
		start[80] = 0.0053389;
		start[81] = 0.0079385;
		start[82] = 0.0064836;
		start[83] = 0.0075241;
		start[84] = 0.0004786;
		start[85] = 0.0023133;
		start[86] = 0.00038667;
		start[87] = 0.0010302;
		start[88] = 0.0038859;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.00025949;
		start[11] = 0.00287;
		start[12] = 0.0089819;
		start[13] = 0.006001;
		start[14] = 0.00056639;
		start[15] = 0.0069903;
		start[16] = 0.0013801;
		start[17] = 0.006388;
		start[18] = 0.0069914;
		start[19] = 0.0079675;
		start[20] = 0.0064695;
		start[21] = 0.0094722;
		start[22] = 0.0087835;
		start[23] = 0.0073908;
		start[24] = 0.0039984;
		start[25] = 0.0037841;
		start[26] = 0.0031939;
		start[27] = 0.0020648;
		start[28] = 0.0075579;
		start[29] = 0.0095234;
		start[30] = 0.0042186;
		start[31] = 0.0087799;
		start[32] = 0.0012452;
		start[33] = 0.0074094;
		start[34] = 0.0028111;
		start[35] = 0.0037216;
		start[36] = 0.0098442;
		start[37] = 0.0072369;
		start[38] = 0.009862;
		start[39] = 0.006139;
		start[40] = 0.0022961;
		start[41] = 0.0023232;
		start[42] = 0.0036031;
		start[43] = 0.00088152;
		start[44] = 0.0016967;
		start[45] = 0.0077406;
		start[46] = 0.0045425;
		start[47] = 0.0043597;
		start[48] = 0.00016921;
		start[49] = 0.0039754;
		start[50] = 0.0069563;
		start[51] = 0.0078419;
		start[52] = 0.0068665;
		start[53] = 0.0089563;
		start[54] = 0.0040606;
		start[55] = 0.0048698;
		start[56] = 0.009133;
		start[57] = 0.005716;
		start[58] = 0.0071859;
		start[59] = 0.0064272;
		start[60] = 0.0059085;
		start[61] = 0.0074238;
		start[62] = 0.0078121;
		start[63] = 0.0021659;
		start[64] = 0.0096111;
		start[65] = 0.0022453;
		start[66] = 0.005757;
		start[67] = 0.0055146;
		start[68] = 0.006515;
		start[69] = 0.0073557;
		start[70] = 0.0035773;
		start[71] = 0.0046766;
		start[72] = 0.0098817;
		start[73] = 0.0042624;
		start[74] = 0.0070647;
		start[75] = 0.002296;
		start[76] = 0.00079808;
		start[77] = 0.00021531;
		start[78] = 0.0099522;
		start[79] = 0.004562;
		start[80] = 0.0065345;
		start[81] = 0.0078269;
		start[82] = 0.0048632;
		start[83] = 0.008361;
		start[84] = 0.0034357;
		start[85] = 0.0049252;
		start[86] = 0.002336;
		start[87] = 0.003312;
		start[88] = 0.0036534;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0052788;
		start[11] = 0.0095196;
		start[12] = 0.0018067;
		start[13] = 0.0015846;
		start[14] = 0.0052952;
		start[15] = 0.0095499;
		start[16] = 0.0022798;
		start[17] = 0.0081149;
		start[18] = 0.0045143;
		start[19] = 0.0071379;
		start[20] = 0.0050482;
		start[21] = 0.0065959;
		start[22] = 0.0090857;
		start[23] = 0.0046979;
		start[24] = 0.0077566;
		start[25] = 0.0019082;
		start[26] = 0.0030002;
		start[27] = 0.0027033;
		start[28] = 0.0047657;
		start[29] = 0.0098984;
		start[30] = 0.00060896;
		start[31] = 0.0010425;
		start[32] = 0.0031912;
		start[33] = 0.0075808;
		start[34] = 0.0065303;
		start[35] = 0.0040785;
		start[36] = 0.0012813;
		start[37] = 0.0086387;
		start[38] = 0.00091797;
		start[39] = 0.007252;
		start[40] = 0.00078051;
		start[41] = 0.0027471;
		start[42] = 0.0096943;
		start[43] = 0.0085472;
		start[44] = 0.0091702;
		start[45] = 0.0098913;
		start[46] = 0.0065224;
		start[47] = 0.0028176;
		start[48] = 0.0045104;
		start[49] = 0.00074651;
		start[50] = 0.0054904;
		start[51] = 0.0020746;
		start[52] = 0.005285;
		start[53] = 0.0085697;
		start[54] = 0.0046222;
		start[55] = 0.0019028;
		start[56] = 0.00090107;
		start[57] = 0.0041217;
		start[58] = 0.0022427;
		start[59] = 0.0091153;
		start[60] = 0.00055496;
		start[61] = 0.0050367;
		start[62] = 0.0074768;
		start[63] = 0.0037238;
		start[64] = 0.0056921;
		start[65] = 0.0031301;
		start[66] = 0.0029297;
		start[67] = 0.00068131;
		start[68] = 0.0034614;
		start[69] = 0.0098721;
		start[70] = 0.0013766;
		start[71] = 0.0063748;
		start[72] = 0.0049039;
		start[73] = 0.0057945;
		start[74] = 0.0060699;
		start[75] = 0.002854;
		start[76] = 0.0019716;
		start[77] = 0.0043645;
		start[78] = 0.0042613;
		start[79] = 0.0073349;
		start[80] = 0.0052053;
		start[81] = 0.0018702;
		start[82] = 0.0044713;
		start[83] = 0.0027893;
		start[84] = 0.0092027;
		start[85] = 0.0096316;
		start[86] = 0.0080106;
		start[87] = 0.0082768;
		start[88] = 0.0023447;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0057843;
		start[11] = 0.0051997;
		start[12] = 0.0082245;
		start[13] = 0.007021;
		start[14] = 0.0058313;
		start[15] = 0.0047852;
		start[16] = 0.0037316;
		start[17] = 0.0087675;
		start[18] = 0.001866;
		start[19] = 0.0043678;
		start[20] = 0.0042446;
		start[21] = 0.0082954;
		start[22] = 0.0065709;
		start[23] = 0.0036011;
		start[24] = 0.0040518;
		start[25] = 0.0033381;
		start[26] = 0.0044802;
		start[27] = 0.0056188;
		start[28] = 0.0056756;
		start[29] = 0.0091533;
		start[30] = 0.0067825;
		start[31] = 0.0024331;
		start[32] = 0.0096208;
		start[33] = 0.0058577;
		start[34] = 0.0089741;
		start[35] = 0.0022921;
		start[36] = 0.0042904;
		start[37] = 0.0092801;
		start[38] = 0.0061648;
		start[39] = 0.0085993;
		start[40] = 0.0035784;
		start[41] = 0.0055299;
		start[42] = 0.0054966;
		start[43] = 0.0074857;
		start[44] = 0.0060739;
		start[45] = 0.0050471;
		start[46] = 0.0010865;
		start[47] = 0.0050327;
		start[48] = 0.0060197;
		start[49] = 0.0085235;
		start[50] = 5.2073e-05;
		start[51] = 0.0078774;
		start[52] = 0.0069436;
		start[53] = 0.0077797;
		start[54] = 0.0026637;
		start[55] = 0.0046038;
		start[56] = 0.0083026;
		start[57] = 0.0044048;
		start[58] = 0.0006188;
		start[59] = 0.0076383;
		start[60] = 0.0093893;
		start[61] = 0.00013691;
		start[62] = 0.00050003;
		start[63] = 0.00081751;
		start[64] = 0.0040981;
		start[65] = 0.0043389;
		start[66] = 0.0017159;
		start[67] = 0.0056665;
		start[68] = 0.0095351;
		start[69] = 0.0035615;
		start[70] = 0.0049661;
		start[71] = 0.0096475;
		start[72] = 0.0097988;
		start[73] = 0.0022023;
		start[74] = 0.0087849;
		start[75] = 0.0022449;
		start[76] = 0.0047517;
		start[77] = 0.0086756;
		start[78] = 0.009061;
		start[79] = 0.0065682;
		start[80] = 0.0088189;
		start[81] = 0.0071834;
		start[82] = 0.0023962;
		start[83] = 0.0097793;
		start[84] = 0.0026494;
		start[85] = 0.00065745;
		start[86] = 0.0036641;
		start[87] = 0.0032667;
		start[88] = 0.0031957;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0025323;
		start[11] = 0.00052924;
		start[12] = 0.00029297;
		start[13] = 0.0023681;
		start[14] = 0.0072989;
		start[15] = 0.0072861;
		start[16] = 0.0081731;
		start[17] = 0.0066933;
		start[18] = 0.009364;
		start[19] = 0.0058976;
		start[20] = 0.008205;
		start[21] = 0.0064112;
		start[22] = 0.0089178;
		start[23] = 0.0076079;
		start[24] = 0.007887;
		start[25] = 0.0038801;
		start[26] = 0.0072297;
		start[27] = 0.0033079;
		start[28] = 0.0074217;
		start[29] = 0.00183;
		start[30] = 0.0025756;
		start[31] = 0.0012317;
		start[32] = 0.0040774;
		start[33] = 0.0060014;
		start[34] = 0.0086069;
		start[35] = 0.00064818;
		start[36] = 0.0074238;
		start[37] = 0.0055075;
		start[38] = 0.0047077;
		start[39] = 0.0048164;
		start[40] = 0.0020914;
		start[41] = 0.0066618;
		start[42] = 0.0061142;
		start[43] = 0.0098073;
		start[44] = 0.00079963;
		start[45] = 0.0061253;
		start[46] = 0.0077245;
		start[47] = 0.0028042;
		start[48] = 0.0001124;
		start[49] = 0.001185;
		start[50] = 0.00055118;
		start[51] = 0.0074894;
		start[52] = 0.0093356;
		start[53] = 0.00038148;
		start[54] = 0.0013652;
		start[55] = 0.0018085;
		start[56] = 0.008631;
		start[57] = 0.0036583;
		start[58] = 0.0055625;
		start[59] = 0.0082972;
		start[60] = 0.0059504;
		start[61] = 0.00052851;
		start[62] = 0.0075763;
		start[63] = 0.007331;
		start[64] = 0.0061539;
		start[65] = 0.00038091;
		start[66] = 0.0037479;
		start[67] = 0.0037785;
		start[68] = 0.005874;
		start[69] = 0.002214;
		start[70] = 0.0063364;
		start[71] = 0.0021751;
		start[72] = 0.00069879;
		start[73] = 0.0066671;
		start[74] = 0.0090014;
		start[75] = 0.0099596;
		start[76] = 0.0067057;
		start[77] = 0.0093293;
		start[78] = 0.0055212;
		start[79] = 0.0069139;
		start[80] = 0.0048364;
		start[81] = 0.0017228;
		start[82] = 0.0037537;
		start[83] = 0.007824;
		start[84] = 0.0023696;
		start[85] = 0.0077298;
		start[86] = 0.00076456;
		start[87] = 0.0026685;
		start[88] = 0.0012513;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0038328;
		start[11] = 0.0082096;
		start[12] = 0.0026131;
		start[13] = 0.00087136;
		start[14] = 0.00037378;
		start[15] = 0.003839;
		start[16] = 0.0070323;
		start[17] = 0.0084977;
		start[18] = 0.0081226;
		start[19] = 0.00028372;
		start[20] = 0.0063824;
		start[21] = 0.0093578;
		start[22] = 0.0051179;
		start[23] = 0.0017054;
		start[24] = 0.0063462;
		start[25] = 0.0069206;
		start[26] = 0.0097703;
		start[27] = 0.007969;
		start[28] = 0.0041335;
		start[29] = 0.0076656;
		start[30] = 0.003703;
		start[31] = 0.0096308;
		start[32] = 0.0053831;
		start[33] = 0.0035271;
		start[34] = 0.0076051;
		start[35] = 0.0098228;
		start[36] = 0.003814;
		start[37] = 0.0097889;
		start[38] = 0.00081207;
		start[39] = 0.0040047;
		start[40] = 0.0017489;
		start[41] = 0.004829;
		start[42] = 0.0008051;
		start[43] = 0.00026274;
		start[44] = 0.0056222;
		start[45] = 0.0041836;
		start[46] = 0.0023351;
		start[47] = 0.00063581;
		start[48] = 0.00013572;
		start[49] = 0.0078114;
		start[50] = 0.0066709;
		start[51] = 0.0027867;
		start[52] = 0.0040767;
		start[53] = 0.0032623;
		start[54] = 0.0089895;
		start[55] = 0.0040906;
		start[56] = 0.0064736;
		start[57] = 0.0070435;
		start[58] = 0.00094091;
		start[59] = 0.0035023;
		start[60] = 0.0070539;
		start[61] = 0.0045931;
		start[62] = 0.006068;
		start[63] = 0.002102;
		start[64] = 0.0053581;
		start[65] = 0.0040198;
		start[66] = 0.0031376;
		start[67] = 0.0037341;
		start[68] = 0.00045014;
		start[69] = 0.0011787;
		start[70] = 0.00015476;
		start[71] = 0.0036045;
		start[72] = 0.0069822;
		start[73] = 0.0072596;
		start[74] = 0.0025862;
		start[75] = 0.0083444;
		start[76] = 0.0050122;
		start[77] = 0.0046917;
		start[78] = 0.0017344;
		start[79] = 0.0015216;
		start[80] = 0.0046854;
		start[81] = 0.0029927;
		start[82] = 0.0057432;
		start[83] = 0.0096169;
		start[84] = 0.0093653;
		start[85] = 0.0073403;
		start[86] = 0.0080437;
		start[87] = 0.0019572;
		start[88] = 0.0049976;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0077798;
		start[11] = 0.0074979;
		start[12] = 0.00056796;
		start[13] = 0.0070971;
		start[14] = 0.00044306;
		start[15] = 0.0019418;
		start[16] = 0.005005;
		start[17] = 0.0011366;
		start[18] = 0.00527;
		start[19] = 0.0026392;
		start[20] = 0.0060887;
		start[21] = 0.0047693;
		start[22] = 0.0069386;
		start[23] = 0.0042535;
		start[24] = 0.0020018;
		start[25] = 0.0088762;
		start[26] = 0.0072862;
		start[27] = 0.0072315;
		start[28] = 0.0062516;
		start[29] = 0.00082159;
		start[30] = 0.0041409;
		start[31] = 0.0011601;
		start[32] = 0.0014381;
		start[33] = 0.0013056;
		start[34] = 0.0088712;
		start[35] = 0.001856;
		start[36] = 0.0028785;
		start[37] = 0.0046604;
		start[38] = 0.0081415;
		start[39] = 0.003244;
		start[40] = 0.0078165;
		start[41] = 0.0054084;
		start[42] = 0.0085597;
		start[43] = 0.0093304;
		start[44] = 0.0034657;
		start[45] = 0.0054174;
		start[46] = 0.0086213;
		start[47] = 0.00091187;
		start[48] = 0.00069132;
		start[49] = 0.0099345;
		start[50] = 0.0063815;
		start[51] = 0.0078023;
		start[52] = 0.0034253;
		start[53] = 0.0049678;
		start[54] = 0.0039609;
		start[55] = 0.0083148;
		start[56] = 0.0038631;
		start[57] = 0.0092547;
		start[58] = 0.0039169;
		start[59] = 0.0060098;
		start[60] = 0.0031098;
		start[61] = 0.0026283;
		start[62] = 0.0088698;
		start[63] = 0.005201;
		start[64] = 0.0060243;
		start[65] = 0.0060789;
		start[66] = 0.0085805;
		start[67] = 0.0050596;
		start[68] = 0.0072665;
		start[69] = 0.0091097;
		start[70] = 0.0089929;
		start[71] = 0.0090555;
		start[72] = 0.0070845;
		start[73] = 0.009775;
		start[74] = 0.0068276;
		start[75] = 0.005214;
		start[76] = 0.0077016;
		start[77] = 0.0078035;
		start[78] = 0.0034207;
		start[79] = 0.0012354;
		start[80] = 0.0056384;
		start[81] = 0.0022025;
		start[82] = 0.0034436;
		start[83] = 0.00012406;
		start[84] = 0.00035698;
		start[85] = 0.0020211;
		start[86] = 0.0078478;
		start[87] = 0.006443;
		start[88] = 0.00093388;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0021232;
		start[11] = 0.0052926;
		start[12] = 0.0060335;
		start[13] = 0.00015241;
		start[14] = 0.0031443;
		start[15] = 0.0028002;
		start[16] = 0.0079805;
		start[17] = 0.0061218;
		start[18] = 0.0049702;
		start[19] = 0.0041128;
		start[20] = 0.0053916;
		start[21] = 0.001143;
		start[22] = 0.0051678;
		start[23] = 0.0014188;
		start[24] = 0.0039801;
		start[25] = 0.0031577;
		start[26] = 0.0028714;
		start[27] = 0.003361;
		start[28] = 0.0096118;
		start[29] = 0.0055059;
		start[30] = 0.0088129;
		start[31] = 0.0036093;
		start[32] = 0.0042919;
		start[33] = 0.0075249;
		start[34] = 0.0040816;
		start[35] = 0.0053721;
		start[36] = 0.0018067;
		start[37] = 0.0033686;
		start[38] = 0.004184;
		start[39] = 0.0057463;
		start[40] = 0.0015225;
		start[41] = 0.0029278;
		start[42] = 0.0090992;
		start[43] = 0.0076814;
		start[44] = 0.00064745;
		start[45] = 0.0099411;
		start[46] = 0.0063155;
		start[47] = 0.009863;
		start[48] = 0.0094441;
		start[49] = 0.001381;
		start[50] = 0.0072029;
		start[51] = 0.0097549;
		start[52] = 0.0010115;
		start[53] = 0.0040686;
		start[54] = 0.0022019;
		start[55] = 0.0061139;
		start[56] = 0.00043961;
		start[57] = 0.00074596;
		start[58] = 0.009214;
		start[59] = 0.0065389;
		start[60] = 0.0061646;
		start[61] = 0.0066341;
		start[62] = 0.0095225;
		start[63] = 0.0026033;
		start[64] = 0.0034335;
		start[65] = 0.0065698;
		start[66] = 0.0007052;
		start[67] = 0.0033279;
		start[68] = 0.0044239;
		start[69] = 0.00447;
		start[70] = 0.0069924;
		start[71] = 0.0019993;
		start[72] = 0.0081898;
		start[73] = 0.0059787;
		start[74] = 0.0056402;
		start[75] = 0.0042249;
		start[76] = 0.0030051;
		start[77] = 0.0012743;
		start[78] = 0.0056424;
		start[79] = 0.0074986;
		start[80] = 0.0044761;
		start[81] = 0.0089763;
		start[82] = 0.0030754;
		start[83] = 0.0060179;
		start[84] = 0.001758;
		start[85] = 0.00047382;
		start[86] = 0.00021;
		start[87] = 0.0027702;
		start[88] = 0.0037046;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0089349;
		start[11] = 0.0016745;
		start[12] = 0.0067603;
		start[13] = 0.0078701;
		start[14] = 0.0015861;
		start[15] = 0.0068382;
		start[16] = 0.0034484;
		start[17] = 0.0064877;
		start[18] = 0.0071036;
		start[19] = 0.0048643;
		start[20] = 0.0057577;
		start[21] = 0.0017083;
		start[22] = 0.0035083;
		start[23] = 0.0043691;
		start[24] = 0.0059568;
		start[25] = 0.0095615;
		start[26] = 0.0072394;
		start[27] = 0.0074788;
		start[28] = 0.0066398;
		start[29] = 8.7311e-05;
		start[30] = 0.0054439;
		start[31] = 0.0014994;
		start[32] = 0.0049272;
		start[33] = 0.00025354;
		start[34] = 0.0015005;
		start[35] = 0.0092043;
		start[36] = 0.0045628;
		start[37] = 0.0048133;
		start[38] = 0.0012294;
		start[39] = 0.0024507;
		start[40] = 0.0093715;
		start[41] = 0.007751;
		start[42] = 0.0049678;
		start[43] = 0.0034633;
		start[44] = 0.0082204;
		start[45] = 0.001678;
		start[46] = 0.0020023;
		start[47] = 0.0046071;
		start[48] = 0.0096288;
		start[49] = 0.0095485;
		start[50] = 0.0086999;
		start[51] = 0.0030133;
		start[52] = 0.0083103;
		start[53] = 0.0026217;
		start[54] = 0.0049295;
		start[55] = 0.00053299;
		start[56] = 0.0038897;
		start[57] = 0.0088729;
		start[58] = 0.0061323;
		start[59] = 0.0072882;
		start[60] = 0.0068227;
		start[61] = 0.0056834;
		start[62] = 0.0082317;
		start[63] = 0.0043637;
		start[64] = 0.0089745;
		start[65] = 0.0031358;
		start[66] = 0.0072073;
		start[67] = 0.0022929;
		start[68] = 0.0016724;
		start[69] = 0.0016356;
		start[70] = 0.0053802;
		start[71] = 0.0074402;
		start[72] = 0.0017421;
		start[73] = 0.0073524;
		start[74] = 0.0065081;
		start[75] = 0.0081534;
		start[76] = 0.0094254;
		start[77] = 0.0010904;
		start[78] = 0.0073679;
		start[79] = 0.0061253;
		start[80] = 0.0031807;
		start[81] = 0.007886;
		start[82] = 0.00073599;
		start[83] = 0.0032133;
		start[84] = 0.00026241;
		start[85] = 0.004714;
		start[86] = 0.0067401;
		start[87] = 0.0021607;
		start[88] = 0.0087374;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0036206;
		start[11] = 0.0066528;
		start[12] = 0.0063319;
		start[13] = 0.0013534;
		start[14] = 0.0021165;
		start[15] = 0.0013304;
		start[16] = 0.0080549;
		start[17] = 0.00072528;
		start[18] = 0.00037639;
		start[19] = 0.0079635;
		start[20] = 6.5259e-05;
		start[21] = 0.00053864;
		start[22] = 0.0070723;
		start[23] = 0.0046019;
		start[24] = 0.0069994;
		start[25] = 0.0010762;
		start[26] = 0.0086846;
		start[27] = 0.008163;
		start[28] = 0.0066517;
		start[29] = 0.0061488;
		start[30] = 0.0099902;
		start[31] = 0.00026846;
		start[32] = 0.0078223;
		start[33] = 0.0067138;
		start[34] = 0.0090256;
		start[35] = 0.0071968;
		start[36] = 0.00073846;
		start[37] = 0.0041926;
		start[38] = 0.0090894;
		start[39] = 0.0014811;
		start[40] = 0.00090837;
		start[41] = 0.0050799;
		start[42] = 0.004414;
		start[43] = 0.0083252;
		start[44] = 0.00035773;
		start[45] = 0.00083227;
		start[46] = 0.0098795;
		start[47] = 0.00036448;
		start[48] = 0.0022737;
		start[49] = 0.0091821;
		start[50] = 0.0079938;
		start[51] = 0.00098948;
		start[52] = 0.0030029;
		start[53] = 0.007338;
		start[54] = 0.0092634;
		start[55] = 0.0098503;
		start[56] = 0.0019734;
		start[57] = 0.0064426;
		start[58] = 0.00099347;
		start[59] = 0.0020007;
		start[60] = 0.0033662;
		start[61] = 0.0075042;
		start[62] = 0.0018052;
		start[63] = 0.0064837;
		start[64] = 0.0018252;
		start[65] = 0.0062101;
		start[66] = 0.0075584;
		start[67] = 0.0024595;
		start[68] = 0.00088712;
		start[69] = 0.0083471;
		start[70] = 0.0053694;
		start[71] = 0.00078137;
		start[72] = 0.0047477;
		start[73] = 0.0077711;
		start[74] = 0.00055305;
		start[75] = 0.0055176;
		start[76] = 0.0042067;
		start[77] = 0.0015098;
		start[78] = 0.0099452;
		start[79] = 0.0086099;
		start[80] = 0.008416;
		start[81] = 0.0084737;
		start[82] = 0.0079995;
		start[83] = 0.0046585;
		start[84] = 0.0049356;
		start[85] = 0.0017274;
		start[86] = 0.0013225;
		start[87] = 0.0084797;
		start[88] = 0.0048026;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0092175;
		start[11] = 0.0012531;
		start[12] = 0.0064256;
		start[13] = 0.0015436;
		start[14] = 0.0099144;
		start[15] = 0.0024863;
		start[16] = 0.0085191;
		start[17] = 0.0078443;
		start[18] = 0.0089788;
		start[19] = 0.0084208;
		start[20] = 0.0019241;
		start[21] = 0.0094169;
		start[22] = 0.0020315;
		start[23] = 0.0049302;
		start[24] = 0.00099091;
		start[25] = 0.00090478;
		start[26] = 0.0019597;
		start[27] = 0.0055542;
		start[28] = 0.0079049;
		start[29] = 0.0052086;
		start[30] = 0.0034503;
		start[31] = 0.0026671;
		start[32] = 0.0054486;
		start[33] = 0.00098675;
		start[34] = 0.0057701;
		start[35] = 0.0015889;
		start[36] = 0.001836;
		start[37] = 0.0015565;
		start[38] = 1.1753e-05;
		start[39] = 0.0015002;
		start[40] = 0.0088374;
		start[41] = 0.0053096;
		start[42] = 0.0082439;
		start[43] = 0.00033296;
		start[44] = 0.0084251;
		start[45] = 0.0031503;
		start[46] = 0.0075348;
		start[47] = 0.0035361;
		start[48] = 0.00010361;
		start[49] = 0.0093273;
		start[50] = 0.0096888;
		start[51] = 0.0064221;
		start[52] = 0.0039994;
		start[53] = 0.0081122;
		start[54] = 0.0020871;
		start[55] = 0.0078349;
		start[56] = 0.0011993;
		start[57] = 0.002737;
		start[58] = 0.0057674;
		start[59] = 0.0046923;
		start[60] = 0.00926;
		start[61] = 0.0053536;
		start[62] = 0.0030394;
		start[63] = 0.0054733;
		start[64] = 1.163e-05;
		start[65] = 0.0063418;
		start[66] = 0.0068605;
		start[67] = 0.0042853;
		start[68] = 0.0030796;
		start[69] = 0.0048195;
		start[70] = 0.0090912;
		start[71] = 0.0010288;
		start[72] = 0.005107;
		start[73] = 0.0010531;
		start[74] = 0.0090514;
		start[75] = 0.0091492;
		start[76] = 0.0013115;
		start[77] = 0.0022683;
		start[78] = 0.0074294;
		start[79] = 0.0020282;
		start[80] = 0.0058402;
		start[81] = 0.001196;
		start[82] = 0.0035671;
		start[83] = 0.0014394;
		start[84] = 0.0017727;
		start[85] = 0.00070375;
		start[86] = 0.0028976;
		start[87] = 0.0063011;
		start[88] = 0.0080601;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0023104;
		start[11] = 0.0093923;
		start[12] = 0.0017021;
		start[13] = 0.0019078;
		start[14] = 0.0044355;
		start[15] = 0.0036645;
		start[16] = 0.0062292;
		start[17] = 0.00071171;
		start[18] = 0.0056599;
		start[19] = 0.00013939;
		start[20] = 0.0022854;
		start[21] = 0.004258;
		start[22] = 0.0079285;
		start[23] = 0.003587;
		start[24] = 0.0021013;
		start[25] = 0.006023;
		start[26] = 0.0043377;
		start[27] = 0.0075567;
		start[28] = 0.0050533;
		start[29] = 0.0083749;
		start[30] = 0.0002664;
		start[31] = 0.0077951;
		start[32] = 0.0033097;
		start[33] = 0.0048153;
		start[34] = 0.0071356;
		start[35] = 0.0080749;
		start[36] = 0.009178;
		start[37] = 6.2696e-05;
		start[38] = 0.0076295;
		start[39] = 0.0058284;
		start[40] = 0.0032687;
		start[41] = 0.0031525;
		start[42] = 0.0067844;
		start[43] = 0.0014996;
		start[44] = 0.0034183;
		start[45] = 0.0097337;
		start[46] = 0.0035927;
		start[47] = 0.008714;
		start[48] = 0.0059435;
		start[49] = 0.0063736;
		start[50] = 0.0031007;
		start[51] = 0.0013924;
		start[52] = 0.0063166;
		start[53] = 0.0079961;
		start[54] = 0.0047623;
		start[55] = 0.0040617;
		start[56] = 0.0020657;
		start[57] = 0.002227;
		start[58] = 0.0024362;
		start[59] = 0.0075621;
		start[60] = 0.0087254;
		start[61] = 0.0018286;
		start[62] = 0.008871;
		start[63] = 0.0032158;
		start[64] = 0.0011132;
		start[65] = 0.0027602;
		start[66] = 0.0029594;
		start[67] = 0.0072064;
		start[68] = 0.00103;
		start[69] = 0.0032931;
		start[70] = 0.0086097;
		start[71] = 0.0052297;
		start[72] = 0.0037107;
		start[73] = 0.0025126;
		start[74] = 0.0060237;
		start[75] = 0.006583;
		start[76] = 0.00029772;
		start[77] = 0.0014336;
		start[78] = 0.0099962;
		start[79] = 0.0012816;
		start[80] = 0.004981;
		start[81] = 0.0058543;
		start[82] = 0.0012094;
		start[83] = 0.00023816;
		start[84] = 0.0094955;
		start[85] = 0.0063129;
		start[86] = 0.0065211;
		start[87] = 0.006989;
		start[88] = 0.0033337;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0074683;
		start[11] = 0.0064884;
		start[12] = 0.0094032;
		start[13] = 0.00016889;
		start[14] = 0.0040356;
		start[15] = 0.0093424;
		start[16] = 0.0092091;
		start[17] = 0.0073974;
		start[18] = 0.0019081;
		start[19] = 0.0097307;
		start[20] = 0.0071562;
		start[21] = 0.0030966;
		start[22] = 0.007884;
		start[23] = 0.0031211;
		start[24] = 0.007898;
		start[25] = 0.0089307;
		start[26] = 1.0215e-05;
		start[27] = 0.0011582;
		start[28] = 0.0021356;
		start[29] = 0.0034074;
		start[30] = 0.00059664;
		start[31] = 0.0078876;
		start[32] = 0.00081212;
		start[33] = 0.0017377;
		start[34] = 0.0076145;
		start[35] = 0.0018338;
		start[36] = 0.001429;
		start[37] = 0.0075787;
		start[38] = 0.001791;
		start[39] = 0.0093795;
		start[40] = 0.0020825;
		start[41] = 0.0028512;
		start[42] = 0.0097872;
		start[43] = 0.0047526;
		start[44] = 0.0026951;
		start[45] = 0.00040873;
		start[46] = 0.007548;
		start[47] = 0.0024551;
		start[48] = 0.0090473;
		start[49] = 0.0046039;
		start[50] = 0.0072214;
		start[51] = 0.00058838;
		start[52] = 0.00011794;
		start[53] = 0.0040026;
		start[54] = 0.0099513;
		start[55] = 0.0093533;
		start[56] = 0.0072414;
		start[57] = 0.0094093;
		start[58] = 0.002775;
		start[59] = 0.003946;
		start[60] = 0.002385;
		start[61] = 0.0077615;
		start[62] = 0.00067588;
		start[63] = 0.0049571;
		start[64] = 0.00087496;
		start[65] = 0.0062156;
		start[66] = 0.0031667;
		start[67] = 0.00092177;
		start[68] = 0.0091895;
		start[69] = 0.0013853;
		start[70] = 0.0099786;
		start[71] = 0.008451;
		start[72] = 0.0068746;
		start[73] = 0.0093175;
		start[74] = 0.0057194;
		start[75] = 0.0028826;
		start[76] = 0.00607;
		start[77] = 0.0046111;
		start[78] = 0.0023679;
		start[79] = 0.0083037;
		start[80] = 0.0027999;
		start[81] = 0.0087412;
		start[82] = 0.0010642;
		start[83] = 0.0015229;
		start[84] = 0.0072078;
		start[85] = 0.00058158;
		start[86] = 0.00019472;
		start[87] = 0.0032154;
		start[88] = 0.0068116;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0082728;
		start[11] = 0.0019207;
		start[12] = 0.00918;
		start[13] = 0.0051334;
		start[14] = 0.0064925;
		start[15] = 0.0031028;
		start[16] = 0.0053873;
		start[17] = 0.0094026;
		start[18] = 0.0074441;
		start[19] = 0.0011325;
		start[20] = 0.0078211;
		start[21] = 0.008666;
		start[22] = 0.0049433;
		start[23] = 0.0084386;
		start[24] = 0.0019816;
		start[25] = 0.0041134;
		start[26] = 0.0054736;
		start[27] = 0.0048415;
		start[28] = 0.0085548;
		start[29] = 0.0056308;
		start[30] = 0.0085148;
		start[31] = 0.0043873;
		start[32] = 0.0034837;
		start[33] = 0.003997;
		start[34] = 0.0032178;
		start[35] = 0.0019938;
		start[36] = 0.0042982;
		start[37] = 0.0088334;
		start[38] = 0.0059889;
		start[39] = 0.0079114;
		start[40] = 0.0004604;
		start[41] = 0.0087693;
		start[42] = 0.0020378;
		start[43] = 0.00021668;
		start[44] = 0.0087752;
		start[45] = 0.007742;
		start[46] = 0.0084678;
		start[47] = 0.0094142;
		start[48] = 0.0052907;
		start[49] = 0.00079737;
		start[50] = 0.00023797;
		start[51] = 0.0012707;
		start[52] = 0.0062333;
		start[53] = 0.00055627;
		start[54] = 0.0023454;
		start[55] = 0.0055088;
		start[56] = 0.0049495;
		start[57] = 0.0065446;
		start[58] = 0.0098724;
		start[59] = 0.00032342;
		start[60] = 0.000579;
		start[61] = 0.0096704;
		start[62] = 0.00332;
		start[63] = 0.0053242;
		start[64] = 0.0090339;
		start[65] = 0.008252;
		start[66] = 0.0029846;
		start[67] = 0.006191;
		start[68] = 0.0090017;
		start[69] = 0.0088566;
		start[70] = 0.0007843;
		start[71] = 0.0062867;
		start[72] = 0.0092655;
		start[73] = 0.0071022;
		start[74] = 0.0045367;
		start[75] = 0.0082399;
		start[76] = 0.00147;
		start[77] = 0.0028079;
		start[78] = 0.0073062;
		start[79] = 0.0041012;
		start[80] = 0.0040637;
		start[81] = 0.0091267;
		start[82] = 0.007557;
		start[83] = 0.0048694;
		start[84] = 0.0023743;
		start[85] = 0.0037322;
		start[86] = 0.0087888;
		start[87] = 0.0085187;
		start[88] = 0.00095425;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0022326;
		start[11] = 0.0074483;
		start[12] = 0.0043829;
		start[13] = 0.0086534;
		start[14] = 0.00093847;
		start[15] = 0.007902;
		start[16] = 0.0068652;
		start[17] = 0.006775;
		start[18] = 0.0032492;
		start[19] = 0.0042304;
		start[20] = 8.1744e-05;
		start[21] = 8.1911e-05;
		start[22] = 0.0059303;
		start[23] = 0.00042827;
		start[24] = 0.00097307;
		start[25] = 0.0013037;
		start[26] = 0.0064434;
		start[27] = 0.0076265;
		start[28] = 0.0087057;
		start[29] = 0.0051657;
		start[30] = 0.0097551;
		start[31] = 0.0064983;
		start[32] = 0.0035906;
		start[33] = 0.0089074;
		start[34] = 0.0071925;
		start[35] = 0.005396;
		start[36] = 0.00065589;
		start[37] = 0.0097407;
		start[38] = 6.1097e-05;
		start[39] = 0.0099345;
		start[40] = 0.0038973;
		start[41] = 0.0083591;
		start[42] = 0.0080488;
		start[43] = 0.0086375;
		start[44] = 0.0085629;
		start[45] = 0.0092232;
		start[46] = 0.0085091;
		start[47] = 0.0088387;
		start[48] = 0.00013612;
		start[49] = 0.0021922;
		start[50] = 0.0019972;
		start[51] = 0.0095792;
		start[52] = 0.003847;
		start[53] = 0.0091892;
		start[54] = 0.0074983;
		start[55] = 0.0038646;
		start[56] = 0.0095633;
		start[57] = 0.0051715;
		start[58] = 0.0013824;
		start[59] = 0.0039697;
		start[60] = 0.0087151;
		start[61] = 0.003077;
		start[62] = 0.0070214;
		start[63] = 0.0060446;
		start[64] = 0.0067198;
		start[65] = 0.0035914;
		start[66] = 0.0047275;
		start[67] = 0.0055681;
		start[68] = 0.0035275;
		start[69] = 0.0050756;
		start[70] = 0.0094703;
		start[71] = 0.0023851;
		start[72] = 0.0069854;
		start[73] = 0.0058766;
		start[74] = 0.005234;
		start[75] = 0.0028391;
		start[76] = 0.0068001;
		start[77] = 0.0063986;
		start[78] = 0.0029376;
		start[79] = 0.0067993;
		start[80] = 0.0088734;
		start[81] = 0.0091068;
		start[82] = 0.0089773;
		start[83] = 0.00019174;
		start[84] = 0.0073209;
		start[85] = 0.0081123;
		start[86] = 0.0022051;
		start[87] = 0.0015181;
		start[88] = 0.0095641;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0080106;
		start[11] = 0.0021612;
		start[12] = 0.0074928;
		start[13] = 0.00082992;
		start[14] = 0.00083763;
		start[15] = 0.0036783;
		start[16] = 0.0094442;
		start[17] = 0.0017304;
		start[18] = 0.0081747;
		start[19] = 0.0026031;
		start[20] = 6.2744e-05;
		start[21] = 0.0065544;
		start[22] = 0.0010391;
		start[23] = 0.0062987;
		start[24] = 0.0081956;
		start[25] = 0.0068365;
		start[26] = 0.0030184;
		start[27] = 0.0070793;
		start[28] = 0.006605;
		start[29] = 0.009192;
		start[30] = 0.0090025;
		start[31] = 0.0032323;
		start[32] = 0.00333;
		start[33] = 0.0076039;
		start[34] = 0.0089827;
		start[35] = 0.006762;
		start[36] = 0.0030419;
		start[37] = 0.00034677;
		start[38] = 0.0016776;
		start[39] = 0.0096848;
		start[40] = 0.0043136;
		start[41] = 0.0079095;
		start[42] = 0.0044363;
		start[43] = 0.0071851;
		start[44] = 0.0016052;
		start[45] = 0.0063417;
		start[46] = 0.00069193;
		start[47] = 0.0050552;
		start[48] = 0.0084139;
		start[49] = 1.8868e-05;
		start[50] = 0.0062657;
		start[51] = 0.00064318;
		start[52] = 0.009299;
		start[53] = 0.0083312;
		start[54] = 0.0082135;
		start[55] = 0.0076479;
		start[56] = 0.0069746;
		start[57] = 0.0079955;
		start[58] = 0.0089926;
		start[59] = 0.0051977;
		start[60] = 0.0023308;
		start[61] = 4.687e-05;
		start[62] = 0.0038028;
		start[63] = 0.0055001;
		start[64] = 0.0043997;
		start[65] = 0.0060615;
		start[66] = 0.00093381;
		start[67] = 0.0043595;
		start[68] = 0.0097025;
		start[69] = 0.002398;
		start[70] = 0.0066174;
		start[71] = 0.0015854;
		start[72] = 0.0031527;
		start[73] = 0.00064445;
		start[74] = 0.0024811;
		start[75] = 0.0043694;
		start[76] = 0.0070104;
		start[77] = 0.0090881;
		start[78] = 0.00066243;
		start[79] = 0.0035738;
		start[80] = 0.0026953;
		start[81] = 0.0090006;
		start[82] = 0.0012526;
		start[83] = 0.0074276;
		start[84] = 0.0096914;
		start[85] = 0.00061792;
		start[86] = 0.0062369;
		start[87] = 0.0057076;
		start[88] = 0.00051365;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0084276;
		start[11] = 0.0073615;
		start[12] = 0.0080596;
		start[13] = 0.005616;
		start[14] = 0.0090393;
		start[15] = 0.0055623;
		start[16] = 0.0063618;
		start[17] = 0.0045885;
		start[18] = 0.0021241;
		start[19] = 0.009973;
		start[20] = 0.0025844;
		start[21] = 0.0022474;
		start[22] = 0.0093342;
		start[23] = 0.0032863;
		start[24] = 0.0087862;
		start[25] = 0.0032709;
		start[26] = 0.0045037;
		start[27] = 0.0050271;
		start[28] = 0.0054028;
		start[29] = 0.0051101;
		start[30] = 0.00066131;
		start[31] = 0.0060039;
		start[32] = 0.006155;
		start[33] = 0.0038422;
		start[34] = 0.0054486;
		start[35] = 0.0041309;
		start[36] = 8.3106e-05;
		start[37] = 0.0063605;
		start[38] = 0.007348;
		start[39] = 0.0079108;
		start[40] = 0.0046192;
		start[41] = 0.0027157;
		start[42] = 0.0022897;
		start[43] = 0.0088396;
		start[44] = 0.0065178;
		start[45] = 0.0002546;
		start[46] = 0.0038353;
		start[47] = 0.0088016;
		start[48] = 0.0038513;
		start[49] = 0.0085551;
		start[50] = 0.0084676;
		start[51] = 0.0041867;
		start[52] = 0.0049096;
		start[53] = 0.0092201;
		start[54] = 0.0090792;
		start[55] = 0.0041961;
		start[56] = 0.0068237;
		start[57] = 0.0016511;
		start[58] = 1.0336e-06;
		start[59] = 0.0058841;
		start[60] = 0.007996;
		start[61] = 0.0084425;
		start[62] = 0.0010075;
		start[63] = 0.0046019;
		start[64] = 0.0070053;
		start[65] = 0.0040751;
		start[66] = 0.0018398;
		start[67] = 0.0068069;
		start[68] = 0.0047632;
		start[69] = 0.0087212;
		start[70] = 0.0028762;
		start[71] = 0.0060069;
		start[72] = 0.0042092;
		start[73] = 0.007824;
		start[74] = 0.0055279;
		start[75] = 0.00018497;
		start[76] = 0.0033175;
		start[77] = 0.0075275;
		start[78] = 0.0067803;
		start[79] = 0.0045347;
		start[80] = 0.00049823;
		start[81] = 0.0079974;
		start[82] = 0.0079728;
		start[83] = 0.0073924;
		start[84] = 0.007808;
		start[85] = 0.00081449;
		start[86] = 0.008239;
		start[87] = 0.0054421;
		start[88] = 0.0036475;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0063076;
		start[11] = 0.0036392;
		start[12] = 0.00080882;
		start[13] = 0.00049847;
		start[14] = 0.0065666;
		start[15] = 0.009363;
		start[16] = 0.0092785;
		start[17] = 0.0040604;
		start[18] = 0.0078167;
		start[19] = 0.0052952;
		start[20] = 0.0095628;
		start[21] = 0.0072925;
		start[22] = 0.0092149;
		start[23] = 0.0078302;
		start[24] = 0.0056935;
		start[25] = 0.0012671;
		start[26] = 0.0053589;
		start[27] = 0.0050169;
		start[28] = 0.0019585;
		start[29] = 0.0021773;
		start[30] = 0.0061841;
		start[31] = 0.0076197;
		start[32] = 0.0011288;
		start[33] = 0.0069219;
		start[34] = 0.00059817;
		start[35] = 0.0072501;
		start[36] = 0.0025117;
		start[37] = 0.00031964;
		start[38] = 0.0061783;
		start[39] = 0.0051897;
		start[40] = 0.00012059;
		start[41] = 0.0084786;
		start[42] = 0.0037218;
		start[43] = 0.0026623;
		start[44] = 0.0079559;
		start[45] = 0.0049139;
		start[46] = 0.0077254;
		start[47] = 0.0047276;
		start[48] = 0.00047855;
		start[49] = 0.0054299;
		start[50] = 0.0006586;
		start[51] = 0.0035795;
		start[52] = 0.0017341;
		start[53] = 0.001356;
		start[54] = 0.0047103;
		start[55] = 0.0066709;
		start[56] = 0.0023645;
		start[57] = 0.0019428;
		start[58] = 0.0068903;
		start[59] = 0.0058325;
		start[60] = 0.0077713;
		start[61] = 0.0038572;
		start[62] = 4.6975e-05;
		start[63] = 0.0010787;
		start[64] = 0.00092663;
		start[65] = 0.0076121;
		start[66] = 0.0079334;
		start[67] = 0.0048607;
		start[68] = 0.0034357;
		start[69] = 0.0074123;
		start[70] = 0.0011461;
		start[71] = 0.0036426;
		start[72] = 0.0083576;
		start[73] = 0.0096555;
		start[74] = 0.0041394;
		start[75] = 0.0053299;
		start[76] = 0.00031844;
		start[77] = 5.3912e-05;
		start[78] = 0.0070826;
		start[79] = 0.0017503;
		start[80] = 0.0066007;
		start[81] = 0.007378;
		start[82] = 0.0022691;
		start[83] = 0.0031741;
		start[84] = 0.0028846;
		start[85] = 0.0040832;
		start[86] = 0.00089185;
		start[87] = 0.0036031;
		start[88] = 0.0082257;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0014296;
		start[11] = 0.0014331;
		start[12] = 0.007926;
		start[13] = 0.0081811;
		start[14] = 0.008591;
		start[15] = 0.0066702;
		start[16] = 0.0082062;
		start[17] = 0.0077544;
		start[18] = 0.002469;
		start[19] = 0.0048034;
		start[20] = 0.0054075;
		start[21] = 0.0032896;
		start[22] = 0.0034781;
		start[23] = 0.0060773;
		start[24] = 0.0091283;
		start[25] = 0.0014573;
		start[26] = 0.0063509;
		start[27] = 0.0087619;
		start[28] = 0.0053924;
		start[29] = 0.0075652;
		start[30] = 0.0048033;
		start[31] = 0.0055042;
		start[32] = 0.003255;
		start[33] = 0.00049037;
		start[34] = 0.0077541;
		start[35] = 0.007163;
		start[36] = 0.0078969;
		start[37] = 0.0084649;
		start[38] = 0.0097158;
		start[39] = 0.0026353;
		start[40] = 0.00017894;
		start[41] = 0.00097089;
		start[42] = 0.0038342;
		start[43] = 0.00018908;
		start[44] = 0.0074976;
		start[45] = 0.0038554;
		start[46] = 0.0050052;
		start[47] = 0.009041;
		start[48] = 0.0044819;
		start[49] = 0.0032051;
		start[50] = 0.00070988;
		start[51] = 0.0092228;
		start[52] = 0.0078432;
		start[53] = 0.0021191;
		start[54] = 0.0070414;
		start[55] = 0.0021377;
		start[56] = 0.0069558;
		start[57] = 0.00014139;
		start[58] = 0.0083164;
		start[59] = 0.0081722;
		start[60] = 0.0083499;
		start[61] = 0.0075424;
		start[62] = 0.0079894;
		start[63] = 0.0039155;
		start[64] = 0.0088426;
		start[65] = 0.0085365;
		start[66] = 0.0058354;
		start[67] = 0.0030643;
		start[68] = 0.0056408;
		start[69] = 0.0071123;
		start[70] = 0.0040105;
		start[71] = 0.0018739;
		start[72] = 0.0054554;
		start[73] = 0.0092448;
		start[74] = 0.005629;
		start[75] = 0.0096573;
		start[76] = 0.0023265;
		start[77] = 0.0032063;
		start[78] = 0.00039369;
		start[79] = 0.00073707;
		start[80] = 0.001532;
		start[81] = 0.0065036;
		start[82] = 0.003301;
		start[83] = 0.00069727;
		start[84] = 0.0093862;
		start[85] = 0.0031075;
		start[86] = 0.0087935;
		start[87] = 0.0031739;
		start[88] = 0.0078635;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.00066619;
		start[11] = 0.003947;
		start[12] = 0.0075955;
		start[13] = 0.0037388;
		start[14] = 0.0043309;
		start[15] = 0.0016154;
		start[16] = 0.009729;
		start[17] = 0.0040095;
		start[18] = 0.0025524;
		start[19] = 0.0084126;
		start[20] = 0.0099346;
		start[21] = 0.0041841;
		start[22] = 0.0047146;
		start[23] = 0.0089059;
		start[24] = 0.0082896;
		start[25] = 0.0055396;
		start[26] = 0.0073468;
		start[27] = 0.0080157;
		start[28] = 0.0032494;
		start[29] = 0.0089062;
		start[30] = 0.0088334;
		start[31] = 0.005065;
		start[32] = 0.0019878;
		start[33] = 0.0060862;
		start[34] = 0.0039219;
		start[35] = 0.007889;
		start[36] = 0.0047367;
		start[37] = 0.0045548;
		start[38] = 0.00065321;
		start[39] = 0.0031219;
		start[40] = 0.00018749;
		start[41] = 0.0041849;
		start[42] = 0.0065445;
		start[43] = 0.002057;
		start[44] = 0.001627;
		start[45] = 0.006954;
		start[46] = 0.009818;
		start[47] = 0.0064796;
		start[48] = 0.0063959;
		start[49] = 0.0083968;
		start[50] = 0.0075589;
		start[51] = 0.0033525;
		start[52] = 0.0079078;
		start[53] = 0.0039207;
		start[54] = 0.0092394;
		start[55] = 0.0085045;
		start[56] = 0.0040196;
		start[57] = 0.0040638;
		start[58] = 0.001457;
		start[59] = 0.00053359;
		start[60] = 0.0052566;
		start[61] = 0.00087799;
		start[62] = 0.0083589;
		start[63] = 0.0015211;
		start[64] = 0.003619;
		start[65] = 0.0027045;
		start[66] = 0.0032505;
		start[67] = 0.0059214;
		start[68] = 0.0033872;
		start[69] = 0.0020021;
		start[70] = 0.0049846;
		start[71] = 0.0033437;
		start[72] = 0.0085984;
		start[73] = 0.0061846;
		start[74] = 0.0097308;
		start[75] = 0.0037498;
		start[76] = 0.0081538;
		start[77] = 0.0013163;
		start[78] = 0.0015483;
		start[79] = 0.0075766;
		start[80] = 0.0061408;
		start[81] = 0.0078786;
		start[82] = 0.0080795;
		start[83] = 0.0018292;
		start[84] = 0.0016998;
		start[85] = 0.0024259;
		start[86] = 0.0043403;
		start[87] = 0.0087835;
		start[88] = 0.0075621;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0038555;
		start[11] = 0.0072125;
		start[12] = 0.0034108;
		start[13] = 0.0011911;
		start[14] = 0.0028985;
		start[15] = 0.0030155;
		start[16] = 0.008254;
		start[17] = 0.0049887;
		start[18] = 0.0053789;
		start[19] = 0.005158;
		start[20] = 0.0017981;
		start[21] = 0.0067384;
		start[22] = 0.005465;
		start[23] = 0.0016553;
		start[24] = 0.00060637;
		start[25] = 0.0014063;
		start[26] = 0.0096757;
		start[27] = 0.0055273;
		start[28] = 0.0059925;
		start[29] = 0.0050019;
		start[30] = 0.0033161;
		start[31] = 0.0097251;
		start[32] = 0.0067357;
		start[33] = 0.0011049;
		start[34] = 0.0071557;
		start[35] = 0.0089593;
		start[36] = 0.0098574;
		start[37] = 0.0083292;
		start[38] = 0.0076619;
		start[39] = 0.0015041;
		start[40] = 0.00053569;
		start[41] = 0.0053654;
		start[42] = 0.0075722;
		start[43] = 0.0011687;
		start[44] = 0.0034885;
		start[45] = 0.0074115;
		start[46] = 0.0056652;
		start[47] = 0.0021779;
		start[48] = 0.00576;
		start[49] = 0.0036515;
		start[50] = 0.0087757;
		start[51] = 0.001244;
		start[52] = 0.00079543;
		start[53] = 0.0094993;
		start[54] = 0.0059604;
		start[55] = 0.0041135;
		start[56] = 0.0099413;
		start[57] = 0.0084688;
		start[58] = 0.0066033;
		start[59] = 0.0082929;
		start[60] = 0.0027819;
		start[61] = 0.0012204;
		start[62] = 0.0031425;
		start[63] = 0.0035898;
		start[64] = 0.0017787;
		start[65] = 0.0094444;
		start[66] = 0.0045799;
		start[67] = 0.0095856;
		start[68] = 0.0090382;
		start[69] = 0.0092559;
		start[70] = 0.0066432;
		start[71] = 0.0087317;
		start[72] = 0.0071542;
		start[73] = 0.0039961;
		start[74] = 0.0014104;
		start[75] = 0.0050595;
		start[76] = 0.0035215;
		start[77] = 0.0057494;
		start[78] = 0.0073107;
		start[79] = 0.0045323;
		start[80] = 0.0097961;
		start[81] = 0.0077596;
		start[82] = 0.0020494;
		start[83] = 0.0031684;
		start[84] = 0.0020954;
		start[85] = 0.0086332;
		start[86] = 0.0078546;
		start[87] = 0.0021824;
		start[88] = 0.0029165;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0087733;
		start[11] = 0.0035355;
		start[12] = 0.0093506;
		start[13] = 0.0080722;
		start[14] = 0.0085804;
		start[15] = 0.005283;
		start[16] = 0.0031841;
		start[17] = 0.0083698;
		start[18] = 7.969e-05;
		start[19] = 0.0075892;
		start[20] = 0.0035622;
		start[21] = 0.0059165;
		start[22] = 0.0048921;
		start[23] = 0.00096819;
		start[24] = 0.00047893;
		start[25] = 0.0048106;
		start[26] = 0.0094979;
		start[27] = 0.0079212;
		start[28] = 0.0060209;
		start[29] = 0.0086346;
		start[30] = 0.0099192;
		start[31] = 0.0012506;
		start[32] = 0.0032762;
		start[33] = 0.0077704;
		start[34] = 0.0058079;
		start[35] = 0.005574;
		start[36] = 0.0075653;
		start[37] = 0.0029608;
		start[38] = 0.0029044;
		start[39] = 0.0088049;
		start[40] = 0.0094882;
		start[41] = 0.0051426;
		start[42] = 0.001485;
		start[43] = 0.0001367;
		start[44] = 0.0013739;
		start[45] = 0.0035966;
		start[46] = 0.001313;
		start[47] = 0.0090534;
		start[48] = 0.0097625;
		start[49] = 0.002063;
		start[50] = 0.0008021;
		start[51] = 0.0097316;
		start[52] = 0.0020179;
		start[53] = 0.003506;
		start[54] = 0.0060712;
		start[55] = 0.005483;
		start[56] = 0.0013391;
		start[57] = 0.0062652;
		start[58] = 0.00091384;
		start[59] = 0.0063877;
		start[60] = 0.0049824;
		start[61] = 0.0038283;
		start[62] = 0.0053853;
		start[63] = 0.0029627;
		start[64] = 0.0014554;
		start[65] = 0.0065499;
		start[66] = 0.00018416;
		start[67] = 0.0061846;
		start[68] = 0.00134;
		start[69] = 0.0097486;
		start[70] = 0.0010009;
		start[71] = 0.0085191;
		start[72] = 0.0065983;
		start[73] = 0.0014107;
		start[74] = 0.0085178;
		start[75] = 0.007465;
		start[76] = 0.0031536;
		start[77] = 0.0011932;
		start[78] = 0.0030767;
		start[79] = 0.0039176;
		start[80] = 0.0017045;
		start[81] = 0.0075559;
		start[82] = 0.0013847;
		start[83] = 0.0095611;
		start[84] = 0.0060189;
		start[85] = 0.0090399;
		start[86] = 0.00062769;
		start[87] = 0.00062304;
		start[88] = 0.0037306;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0037868;
		start[11] = 0.0066242;
		start[12] = 0.0059567;
		start[13] = 0.0058484;
		start[14] = 0.0037426;
		start[15] = 0.005424;
		start[16] = 0.0046285;
		start[17] = 0.0084488;
		start[18] = 0.0032153;
		start[19] = 0.0054745;
		start[20] = 0.0094728;
		start[21] = 0.0093068;
		start[22] = 0.0064743;
		start[23] = 0.0005243;
		start[24] = 0.0013654;
		start[25] = 0.0098403;
		start[26] = 0.0034263;
		start[27] = 0.0038814;
		start[28] = 0.0069001;
		start[29] = 0.0047712;
		start[30] = 0.0052826;
		start[31] = 0.0005407;
		start[32] = 0.0076957;
		start[33] = 0.0019311;
		start[34] = 0.0058188;
		start[35] = 0.0023382;
		start[36] = 0.0051402;
		start[37] = 0.000798;
		start[38] = 0.0089715;
		start[39] = 0.006372;
		start[40] = 0.0079597;
		start[41] = 0.0011122;
		start[42] = 0.001051;
		start[43] = 0.0042568;
		start[44] = 0.0067137;
		start[45] = 0.0046856;
		start[46] = 0.0067304;
		start[47] = 0.0034652;
		start[48] = 0.0078949;
		start[49] = 0.0023192;
		start[50] = 0.0033211;
		start[51] = 0.0013764;
		start[52] = 0.0072078;
		start[53] = 0.0076272;
		start[54] = 0.0051841;
		start[55] = 0.0064519;
		start[56] = 0.0091458;
		start[57] = 0.0070333;
		start[58] = 0.0026348;
		start[59] = 0.0009339;
		start[60] = 0.0056941;
		start[61] = 0.0055901;
		start[62] = 0.006089;
		start[63] = 0.0016282;
		start[64] = 0.0099488;
		start[65] = 0.003485;
		start[66] = 0.0044072;
		start[67] = 0.0068603;
		start[68] = 0.0067633;
		start[69] = 0.0028121;
		start[70] = 0.0014836;
		start[71] = 0.00038147;
		start[72] = 0.008703;
		start[73] = 0.003527;
		start[74] = 0.0092444;
		start[75] = 0.0055382;
		start[76] = 0.0074647;
		start[77] = 0.0051475;
		start[78] = 0.0013971;
		start[79] = 0.0011172;
		start[80] = 0.0087883;
		start[81] = 0.0075886;
		start[82] = 0.0026171;
		start[83] = 0.0024991;
		start[84] = 0.0086109;
		start[85] = 8.4324e-05;
		start[86] = 0.0029598;
		start[87] = 0.005737;
		start[88] = 0.0094929;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0056879;
		start[11] = 0.0054056;
		start[12] = 0.004616;
		start[13] = 0.0029214;
		start[14] = 0.0054389;
		start[15] = 0.0013039;
		start[16] = 0.0097198;
		start[17] = 0.00076794;
		start[18] = 0.0092175;
		start[19] = 0.0067549;
		start[20] = 0.0037685;
		start[21] = 0.0029409;
		start[22] = 0.009797;
		start[23] = 0.0043934;
		start[24] = 0.0015589;
		start[25] = 0.0093501;
		start[26] = 0.0014399;
		start[27] = 0.0091427;
		start[28] = 0.0093408;
		start[29] = 0.008711;
		start[30] = 0.0030097;
		start[31] = 0.0099089;
		start[32] = 0.0029213;
		start[33] = 0.0025983;
		start[34] = 0.0051041;
		start[35] = 0.0037631;
		start[36] = 0.0086734;
		start[37] = 0.00071979;
		start[38] = 0.007487;
		start[39] = 0.0004812;
		start[40] = 0.0023773;
		start[41] = 0.0096476;
		start[42] = 0.0091413;
		start[43] = 0.0062414;
		start[44] = 0.0098085;
		start[45] = 0.0096934;
		start[46] = 0.00092333;
		start[47] = 0.00027054;
		start[48] = 0.00048431;
		start[49] = 0.0067289;
		start[50] = 0.0082705;
		start[51] = 0.003251;
		start[52] = 0.0046769;
		start[53] = 0.00097484;
		start[54] = 0.0015478;
		start[55] = 0.0071628;
		start[56] = 0.0056542;
		start[57] = 0.0075452;
		start[58] = 0.0088466;
		start[59] = 0.0055134;
		start[60] = 0.0094073;
		start[61] = 0.0045812;
		start[62] = 0.0087583;
		start[63] = 0.0034614;
		start[64] = 0.0024472;
		start[65] = 0.00082276;
		start[66] = 0.0076439;
		start[67] = 0.0035453;
		start[68] = 0.0025161;
		start[69] = 0.0082682;
		start[70] = 0.0030577;
		start[71] = 0.0027788;
		start[72] = 0.0075788;
		start[73] = 0.0093805;
		start[74] = 0.0071578;
		start[75] = 0.0016302;
		start[76] = 0.0065146;
		start[77] = 0.0034263;
		start[78] = 0.0029302;
		start[79] = 0.006779;
		start[80] = 0.0042502;
		start[81] = 0.0088103;
		start[82] = 0.0044867;
		start[83] = 0.0074272;
		start[84] = 9.9762e-05;
		start[85] = 0.0091777;
		start[86] = 0.00029685;
		start[87] = 0.0077967;
		start[88] = 0.0017488;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.006894;
		start[11] = 0.0018528;
		start[12] = 0.0023881;
		start[13] = 0.0018198;
		start[14] = 0.0053526;
		start[15] = 0.0034959;
		start[16] = 0.0016882;
		start[17] = 0.0060926;
		start[18] = 0.0055098;
		start[19] = 0.0023937;
		start[20] = 0.008413;
		start[21] = 0.0017707;
		start[22] = 0.0041412;
		start[23] = 0.0030415;
		start[24] = 0.0063033;
		start[25] = 0.0050209;
		start[26] = 0.0061141;
		start[27] = 0.0096276;
		start[28] = 0.0039097;
		start[29] = 0.0012728;
		start[30] = 0.0081939;
		start[31] = 0.0036103;
		start[32] = 0.0025153;
		start[33] = 0.0079426;
		start[34] = 0.0031763;
		start[35] = 0.0017825;
		start[36] = 0.0023734;
		start[37] = 0.0093128;
		start[38] = 0.0063674;
		start[39] = 0.004453;
		start[40] = 0.0074951;
		start[41] = 0.0027086;
		start[42] = 0.0049371;
		start[43] = 0.0065722;
		start[44] = 0.0083223;
		start[45] = 0.0081294;
		start[46] = 0.004795;
		start[47] = 0.0073538;
		start[48] = 0.0065773;
		start[49] = 0.0083613;
		start[50] = 0.0057204;
		start[51] = 0.00058566;
		start[52] = 0.0079332;
		start[53] = 0.0021787;
		start[54] = 0.0093798;
		start[55] = 0.00036318;
		start[56] = 0.0088486;
		start[57] = 0.0020305;
		start[58] = 0.0099425;
		start[59] = 0.0035794;
		start[60] = 0.009998;
		start[61] = 0.0016063;
		start[62] = 0.0068179;
		start[63] = 0.0073317;
		start[64] = 0.0058634;
		start[65] = 0.0022021;
		start[66] = 0.0028278;
		start[67] = 0.0046529;
		start[68] = 0.0064053;
		start[69] = 0.0032311;
		start[70] = 0.00029451;
		start[71] = 0.0044207;
		start[72] = 0.006918;
		start[73] = 0.0031988;
		start[74] = 0.0010954;
		start[75] = 0.0047737;
		start[76] = 0.0020115;
		start[77] = 0.0068544;
		start[78] = 0.009559;
		start[79] = 0.0084736;
		start[80] = 0.00071101;
		start[81] = 0.0057237;
		start[82] = 0.0027876;
		start[83] = 0.0049372;
		start[84] = 0.0038994;
		start[85] = 0.0091825;
		start[86] = 0.0066432;
		start[87] = 0.0042096;
		start[88] = 0.0094608;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0081236;
		start[11] = 0.0083209;
		start[12] = 0.00015713;
		start[13] = 0.0051225;
		start[14] = 0.00035831;
		start[15] = 0.004609;
		start[16] = 0.003814;
		start[17] = 0.0062738;
		start[18] = 0.0046068;
		start[19] = 0.0023044;
		start[20] = 0.0029387;
		start[21] = 0.0088187;
		start[22] = 0.0021649;
		start[23] = 0.0052407;
		start[24] = 0.0090399;
		start[25] = 0.0085621;
		start[26] = 0.0094249;
		start[27] = 0.0015584;
		start[28] = 0.0039083;
		start[29] = 0.0099862;
		start[30] = 0.0018188;
		start[31] = 0.0042708;
		start[32] = 0.0026004;
		start[33] = 0.0032577;
		start[34] = 0.0010445;
		start[35] = 0.00087706;
		start[36] = 0.0016733;
		start[37] = 0.0005162;
		start[38] = 0.0087919;
		start[39] = 0.0032882;
		start[40] = 0.0065664;
		start[41] = 0.0055031;
		start[42] = 0.0091071;
		start[43] = 0.00419;
		start[44] = 0.0043433;
		start[45] = 0.0075146;
		start[46] = 0.0043762;
		start[47] = 0.0069132;
		start[48] = 0.0025981;
		start[49] = 0.00079543;
		start[50] = 0.0028697;
		start[51] = 0.0095802;
		start[52] = 0.0085385;
		start[53] = 0.00026267;
		start[54] = 0.0044876;
		start[55] = 0.0012197;
		start[56] = 0.0022822;
		start[57] = 0.0080985;
		start[58] = 0.0035579;
		start[59] = 0.0087181;
		start[60] = 0.0018144;
		start[61] = 0.0058776;
		start[62] = 0.00064767;
		start[63] = 0.006861;
		start[64] = 0.0077903;
		start[65] = 0.009926;
		start[66] = 0.0033563;
		start[67] = 0.0022949;
		start[68] = 0.0075946;
		start[69] = 0.0086645;
		start[70] = 0.0074697;
		start[71] = 0.005027;
		start[72] = 0.0057716;
		start[73] = 0.0029206;
		start[74] = 0.0051378;
		start[75] = 0.00043799;
		start[76] = 0.0039321;
		start[77] = 0.0086401;
		start[78] = 0.0081605;
		start[79] = 0.0065221;
		start[80] = 0.002444;
		start[81] = 0.0099563;
		start[82] = 0.0049471;
		start[83] = 0.0063886;
		start[84] = 0.0083712;
		start[85] = 0.0023217;
		start[86] = 0.0083899;
		start[87] = 0.0012964;
		start[88] = 0.0068014;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0097248;
		start[11] = 0.0038465;
		start[12] = 0.00011023;
		start[13] = 0.0060354;
		start[14] = 0.0065699;
		start[15] = 2.3336e-05;
		start[16] = 0.0058792;
		start[17] = 0.0016238;
		start[18] = 0.001134;
		start[19] = 0.0011831;
		start[20] = 0.0078272;
		start[21] = 0.0079479;
		start[22] = 0.00053345;
		start[23] = 0.00042292;
		start[24] = 0.0018048;
		start[25] = 0.0047817;
		start[26] = 0.0048376;
		start[27] = 0.0079083;
		start[28] = 0.0037965;
		start[29] = 0.0035024;
		start[30] = 0.0071688;
		start[31] = 0.0017045;
		start[32] = 0.0017496;
		start[33] = 0.0026436;
		start[34] = 0.0098722;
		start[35] = 0.00089087;
		start[36] = 0.0085811;
		start[37] = 0.0038681;
		start[38] = 0.0026821;
		start[39] = 0.0078661;
		start[40] = 0.0020751;
		start[41] = 0.0098897;
		start[42] = 0.0043957;
		start[43] = 0.0020956;
		start[44] = 0.0091738;
		start[45] = 0.001088;
		start[46] = 0.0049012;
		start[47] = 0.00053788;
		start[48] = 0.0035745;
		start[49] = 0.0022612;
		start[50] = 0.0078441;
		start[51] = 0.003889;
		start[52] = 0.0017002;
		start[53] = 0.0073127;
		start[54] = 0.00036092;
		start[55] = 0.0051822;
		start[56] = 0.0037101;
		start[57] = 0.0075184;
		start[58] = 0.0027213;
		start[59] = 0.0010283;
		start[60] = 0.0037564;
		start[61] = 0.0070402;
		start[62] = 0.0059308;
		start[63] = 0.0090403;
		start[64] = 0.00087009;
		start[65] = 0.0046148;
		start[66] = 0.0037454;
		start[67] = 0.0049878;
		start[68] = 0.0095342;
		start[69] = 0.0050372;
		start[70] = 0.0069855;
		start[71] = 0.0081776;
		start[72] = 0.003055;
		start[73] = 0.0069183;
		start[74] = 0.0051518;
		start[75] = 0.0048116;
		start[76] = 0.0069528;
		start[77] = 0.0049701;
		start[78] = 0.0064538;
		start[79] = 0.008398;
		start[80] = 0.0065136;
		start[81] = 0.0046745;
		start[82] = 0.0025995;
		start[83] = 0.0079026;
		start[84] = 0.0013951;
		start[85] = 0.0076313;
		start[86] = 0.0076611;
		start[87] = 0.00084561;
		start[88] = 0.0019998;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0030635;
		start[11] = 0.0054016;
		start[12] = 0.0091005;
		start[13] = 0.0036585;
		start[14] = 0.008282;
		start[15] = 0.0026679;
		start[16] = 0.0096131;
		start[17] = 0.0089455;
		start[18] = 0.0091706;
		start[19] = 0.0074375;
		start[20] = 0.008251;
		start[21] = 0.0045718;
		start[22] = 0.0064768;
		start[23] = 0.0035161;
		start[24] = 0.0003767;
		start[25] = 0.0044385;
		start[26] = 0.004767;
		start[27] = 0.0081936;
		start[28] = 0.0045358;
		start[29] = 0.0023507;
		start[30] = 0.0047394;
		start[31] = 0.0085905;
		start[32] = 0.0063344;
		start[33] = 0.0089586;
		start[34] = 0.0073933;
		start[35] = 0.0037349;
		start[36] = 0.0064473;
		start[37] = 0.000705;
		start[38] = 0.0081409;
		start[39] = 0.00061244;
		start[40] = 0.0081541;
		start[41] = 0.0095853;
		start[42] = 0.0058564;
		start[43] = 0.0019889;
		start[44] = 0.0055315;
		start[45] = 0.0033692;
		start[46] = 0.0015341;
		start[47] = 0.0017766;
		start[48] = 0.0092798;
		start[49] = 0.0076188;
		start[50] = 0.0075602;
		start[51] = 0.004955;
		start[52] = 0.0015739;
		start[53] = 0.0063095;
		start[54] = 0.007721;
		start[55] = 0.0071394;
		start[56] = 0.0092302;
		start[57] = 0.0063601;
		start[58] = 0.0046663;
		start[59] = 0.0015605;
		start[60] = 0.0043267;
		start[61] = 0.0080324;
		start[62] = 0.0088276;
		start[63] = 0.0090914;
		start[64] = 0.0088516;
		start[65] = 0.0066915;
		start[66] = 0.0071287;
		start[67] = 0.0074744;
		start[68] = 0.0025461;
		start[69] = 0.0049168;
		start[70] = 0.0095401;
		start[71] = 0.0039073;
		start[72] = 0.002999;
		start[73] = 0.0079251;
		start[74] = 0.0019013;
		start[75] = 0.0017885;
		start[76] = 0.0020062;
		start[77] = 0.0060327;
		start[78] = 0.0015393;
		start[79] = 0.0084456;
		start[80] = 0.0057177;
		start[81] = 0.0074563;
		start[82] = 0.0062107;
		start[83] = 0.0082169;
		start[84] = 0.0060506;
		start[85] = 0.0071455;
		start[86] = 0.0096026;
		start[87] = 0.0073893;
		start[88] = 0.0038772;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.00087603;
		start[11] = 0.0068365;
		start[12] = 0.0017188;
		start[13] = 0.005904;
		start[14] = 0.0033101;
		start[15] = 0.0043161;
		start[16] = 0.0050909;
		start[17] = 0.0041381;
		start[18] = 0.0029862;
		start[19] = 0.0024385;
		start[20] = 0.0028009;
		start[21] = 0.0082006;
		start[22] = 0.0092164;
		start[23] = 0.0077388;
		start[24] = 0.0094826;
		start[25] = 0.0016243;
		start[26] = 0.0092456;
		start[27] = 0.0041719;
		start[28] = 0.0032898;
		start[29] = 0.0057084;
		start[30] = 0.00020864;
		start[31] = 0.0043895;
		start[32] = 0.0036679;
		start[33] = 0.0091177;
		start[34] = 0.0027364;
		start[35] = 0.0037377;
		start[36] = 0.0091178;
		start[37] = 0.00072179;
		start[38] = 0.0010462;
		start[39] = 0.0066465;
		start[40] = 0.0066006;
		start[41] = 0.008271;
		start[42] = 0.0015402;
		start[43] = 0.0071513;
		start[44] = 0.0011281;
		start[45] = 0.008719;
		start[46] = 0.0056133;
		start[47] = 0.006598;
		start[48] = 0.0043651;
		start[49] = 0.0051824;
		start[50] = 0.0066974;
		start[51] = 0.0036333;
		start[52] = 0.0070158;
		start[53] = 0.0022171;
		start[54] = 0.0091589;
		start[55] = 0.0075381;
		start[56] = 0.00022907;
		start[57] = 0.0037831;
		start[58] = 0.0074366;
		start[59] = 0.0051861;
		start[60] = 0.0055236;
		start[61] = 0.0027898;
		start[62] = 0.0063973;
		start[63] = 0.0068553;
		start[64] = 0.0061585;
		start[65] = 0.0043565;
		start[66] = 0.0081896;
		start[67] = 0.0057891;
		start[68] = 0.0035869;
		start[69] = 0.0017709;
		start[70] = 0.0084312;
		start[71] = 0.0097642;
		start[72] = 0.0068883;
		start[73] = 0.0051709;
		start[74] = 0.0097353;
		start[75] = 0.00094621;
		start[76] = 0.0021966;
		start[77] = 0.00086117;
		start[78] = 0.00077899;
		start[79] = 0.005631;
		start[80] = 0.00092341;
		start[81] = 0.0034626;
		start[82] = 0.0054193;
		start[83] = 0.0033461;
		start[84] = 0.0062069;
		start[85] = 0.0044981;
		start[86] = 0.0071794;
		start[87] = 0.0059641;
		start[88] = 0.0065427;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0095445;
		start[11] = 0.0034403;
		start[12] = 0.0094623;
		start[13] = 0.0074904;
		start[14] = 0.00916;
		start[15] = 0.0022022;
		start[16] = 0.0063322;
		start[17] = 0.0086735;
		start[18] = 0.0093675;
		start[19] = 0.0040576;
		start[20] = 0.00056119;
		start[21] = 0.007973;
		start[22] = 0.0092274;
		start[23] = 0.005409;
		start[24] = 0.0083945;
		start[25] = 0.0029285;
		start[26] = 0.0096128;
		start[27] = 0.00314;
		start[28] = 0.001525;
		start[29] = 0.0019163;
		start[30] = 0.001271;
		start[31] = 0.0090057;
		start[32] = 0.0017022;
		start[33] = 0.0036724;
		start[34] = 0.0074836;
		start[35] = 0.0030384;
		start[36] = 0.0046164;
		start[37] = 0.00054963;
		start[38] = 0.0016258;
		start[39] = 0.0066845;
		start[40] = 0.0033665;
		start[41] = 0.0084328;
		start[42] = 0.0072216;
		start[43] = 0.0096996;
		start[44] = 0.005566;
		start[45] = 0.0040807;
		start[46] = 0.0038636;
		start[47] = 0.0019732;
		start[48] = 0.0043976;
		start[49] = 0.0028841;
		start[50] = 0.0077431;
		start[51] = 0.0039419;
		start[52] = 0.0099492;
		start[53] = 0.004852;
		start[54] = 0.0047262;
		start[55] = 0.0021981;
		start[56] = 0.0056272;
		start[57] = 0.0047937;
		start[58] = 0.0068021;
		start[59] = 0.005035;
		start[60] = 0.0063042;
		start[61] = 0.0098019;
		start[62] = 0.0077894;
		start[63] = 0.00073868;
		start[64] = 0.0071475;
		start[65] = 0.00023436;
		start[66] = 0.0023323;
		start[67] = 0.0072111;
		start[68] = 0.0087063;
		start[69] = 0.0024182;
		start[70] = 0.0013252;
		start[71] = 0.0080724;
		start[72] = 0.0067708;
		start[73] = 0.0076571;
		start[74] = 0.0030835;
		start[75] = 0.0052913;
		start[76] = 0.0057326;
		start[77] = 0.0079878;
		start[78] = 0.0085646;
		start[79] = 0.0070738;
		start[80] = 0.00061343;
		start[81] = 0.0028234;
		start[82] = 0.0033837;
		start[83] = 0.0021115;
		start[84] = 0.0076327;
		start[85] = 0.0072666;
		start[86] = 0.0044131;
		start[87] = 0.0012208;
		start[88] = 0.0070014;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0097435;
		start[11] = 0.0032257;
		start[12] = 0.007921;
		start[13] = 0.00087627;
		start[14] = 0.0065117;
		start[15] = 0.009099;
		start[16] = 0.00072986;
		start[17] = 0.0040538;
		start[18] = 0.0084547;
		start[19] = 0.004725;
		start[20] = 0.0092597;
		start[21] = 0.0069126;
		start[22] = 0.0019692;
		start[23] = 0.0054159;
		start[24] = 0.0019408;
		start[25] = 0.0026467;
		start[26] = 0.0096287;
		start[27] = 0.0025456;
		start[28] = 0.00061514;
		start[29] = 0.0032734;
		start[30] = 0.0071555;
		start[31] = 0.00049606;
		start[32] = 0.0053983;
		start[33] = 0.0058601;
		start[34] = 0.0011296;
		start[35] = 0.0094802;
		start[36] = 0.0070437;
		start[37] = 0.0044571;
		start[38] = 0.0065653;
		start[39] = 0.0038688;
		start[40] = 0.0016527;
		start[41] = 0.0055366;
		start[42] = 0.00883;
		start[43] = 0.0038521;
		start[44] = 0.007633;
		start[45] = 0.0023173;
		start[46] = 0.0085285;
		start[47] = 0.0047637;
		start[48] = 0.0064525;
		start[49] = 0.0024532;
		start[50] = 0.0070632;
		start[51] = 0.0061935;
		start[52] = 0.0094038;
		start[53] = 0.0017027;
		start[54] = 0.0066697;
		start[55] = 0.0056147;
		start[56] = 0.005829;
		start[57] = 0.00081475;
		start[58] = 0.0026491;
		start[59] = 0.0060701;
		start[60] = 0.0041265;
		start[61] = 0.0054698;
		start[62] = 0.0076553;
		start[63] = 0.0021332;
		start[64] = 0.0061072;
		start[65] = 0.0055306;
		start[66] = 0.0064736;
		start[67] = 0.0043616;
		start[68] = 0.0077938;
		start[69] = 0.001144;
		start[70] = 0.0032353;
		start[71] = 0.009673;
		start[72] = 0.0086215;
		start[73] = 0.0087113;
		start[74] = 0.0027218;
		start[75] = 0.0053708;
		start[76] = 0.0052271;
		start[77] = 0.0021867;
		start[78] = 0.0036862;
		start[79] = 0.0065026;
		start[80] = 0.0027866;
		start[81] = 0.0076795;
		start[82] = 0.0014403;
		start[83] = 0.0057694;
		start[84] = 0.0093959;
		start[85] = 0.00075242;
		start[86] = 0.0055058;
		start[87] = 0.0086365;
		start[88] = 0.0025509;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.00281;
		start[11] = 0.0067792;
		start[12] = 0.0016441;
		start[13] = 0.0033351;
		start[14] = 0.0023501;
		start[15] = 0.0077566;
		start[16] = 0.0043205;
		start[17] = 0.0038061;
		start[18] = 0.0064323;
		start[19] = 0.0071462;
		start[20] = 0.0091752;
		start[21] = 0.0030877;
		start[22] = 0.0037476;
		start[23] = 0.0089923;
		start[24] = 0.0071291;
		start[25] = 0.0094464;
		start[26] = 0.0035575;
		start[27] = 0.0059876;
		start[28] = 0.0047715;
		start[29] = 0.00022021;
		start[30] = 0.0020028;
		start[31] = 0.0028597;
		start[32] = 0.0019508;
		start[33] = 0.0054187;
		start[34] = 0.0046861;
		start[35] = 0.003469;
		start[36] = 0.0020545;
		start[37] = 0.0037632;
		start[38] = 0.00056017;
		start[39] = 1.0838e-05;
		start[40] = 0.0020829;
		start[41] = 0.00675;
		start[42] = 0.0043188;
		start[43] = 0.0098237;
		start[44] = 0.0099492;
		start[45] = 0.00075414;
		start[46] = 0.0049443;
		start[47] = 0.0098146;
		start[48] = 0.005707;
		start[49] = 0.0035169;
		start[50] = 0.0035472;
		start[51] = 0.0043423;
		start[52] = 0.0039679;
		start[53] = 0.0075138;
		start[54] = 0.0027859;
		start[55] = 0.0084096;
		start[56] = 0.0077839;
		start[57] = 0.0056723;
		start[58] = 0.0087757;
		start[59] = 0.0011843;
		start[60] = 0.0085697;
		start[61] = 0.0091447;
		start[62] = 0.0023298;
		start[63] = 0.0095489;
		start[64] = 0.00060644;
		start[65] = 0.0056867;
		start[66] = 0.0043073;
		start[67] = 0.0064589;
		start[68] = 0.0079693;
		start[69] = 0.0082971;
		start[70] = 0.0080053;
		start[71] = 0.00049639;
		start[72] = 0.0021671;
		start[73] = 0.0016723;
		start[74] = 0.0033264;
		start[75] = 0.0069641;
		start[76] = 0.0042649;
		start[77] = 0.0060167;
		start[78] = 0.0095888;
		start[79] = 0.0044454;
		start[80] = 0.0025724;
		start[81] = 0.0040949;
		start[82] = 0.0083018;
		start[83] = 0.0051297;
		start[84] = 0.0092696;
		start[85] = 0.0065552;
		start[86] = 0.0017017;
		start[87] = 0.0042045;
		start[88] = 0.0011139;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0007505;
		start[11] = 0.0046048;
		start[12] = 0.00065357;
		start[13] = 0.0062181;
		start[14] = 1.137e-05;
		start[15] = 0.0030101;
		start[16] = 0.00040595;
		start[17] = 0.0035045;
		start[18] = 0.0018577;
		start[19] = 0.0027761;
		start[20] = 0.0014288;
		start[21] = 0.0026174;
		start[22] = 0.0036364;
		start[23] = 0.0051885;
		start[24] = 0.0038593;
		start[25] = 0.0042894;
		start[26] = 0.003648;
		start[27] = 0.0041281;
		start[28] = 0.0080873;
		start[29] = 0.0014986;
		start[30] = 0.0070163;
		start[31] = 0.0077282;
		start[32] = 0.0093106;
		start[33] = 0.0092086;
		start[34] = 0.006602;
		start[35] = 0.0068767;
		start[36] = 0.0020811;
		start[37] = 0.0041457;
		start[38] = 0.0010438;
		start[39] = 0.0078666;
		start[40] = 0.0048349;
		start[41] = 0.0043492;
		start[42] = 0.0058415;
		start[43] = 0.0059401;
		start[44] = 0.00093847;
		start[45] = 0.0098812;
		start[46] = 0.0064602;
		start[47] = 0.0036239;
		start[48] = 0.0075218;
		start[49] = 0.00014971;
		start[50] = 0.00050678;
		start[51] = 0.0026181;
		start[52] = 0.0099188;
		start[53] = 0.0072431;
		start[54] = 2.167e-05;
		start[55] = 0.0045209;
		start[56] = 0.0036491;
		start[57] = 0.0054245;
		start[58] = 0.0004439;
		start[59] = 0.0095238;
		start[60] = 0.0064617;
		start[61] = 0.0039969;
		start[62] = 0.0049286;
		start[63] = 0.0058447;
		start[64] = 0.0071918;
		start[65] = 0.0068671;
		start[66] = 0.0079805;
		start[67] = 0.0029837;
		start[68] = 0.0078546;
		start[69] = 0.0029734;
		start[70] = 0.0093867;
		start[71] = 0.0012073;
		start[72] = 0.0085813;
		start[73] = 0.0071398;
		start[74] = 0.0077523;
		start[75] = 0.00086427;
		start[76] = 0.0038403;
		start[77] = 0.0048187;
		start[78] = 0.0019001;
		start[79] = 0.0038003;
		start[80] = 0.0050732;
		start[81] = 0.0041309;
		start[82] = 0.0084251;
		start[83] = 0.0023409;
		start[84] = 0.0055242;
		start[85] = 0.0055782;
		start[86] = 0.0095927;
		start[87] = 0.0018989;
		start[88] = 0.0013514;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0081143;
		start[11] = 0.0031584;
		start[12] = 0.0020396;
		start[13] = 0.008957;
		start[14] = 0.0094982;
		start[15] = 0.0052326;
		start[16] = 0.0050904;
		start[17] = 0.0089648;
		start[18] = 0.0045146;
		start[19] = 0.0038551;
		start[20] = 0.0055781;
		start[21] = 0.002182;
		start[22] = 0.00019449;
		start[23] = 0.0037056;
		start[24] = 0.00057269;
		start[25] = 0.0079317;
		start[26] = 0.0080484;
		start[27] = 0.0054927;
		start[28] = 0.0048867;
		start[29] = 0.0068475;
		start[30] = 0.0096322;
		start[31] = 0.0067843;
		start[32] = 0.0064366;
		start[33] = 0.0042318;
		start[34] = 0.0066567;
		start[35] = 0.0092103;
		start[36] = 0.0057983;
		start[37] = 0.0014252;
		start[38] = 0.0022141;
		start[39] = 0.0060708;
		start[40] = 0.0013117;
		start[41] = 0.007395;
		start[42] = 0.0050982;
		start[43] = 0.0037282;
		start[44] = 0.00052983;
		start[45] = 0.0096413;
		start[46] = 0.00044188;
		start[47] = 0.0093969;
		start[48] = 0.0016329;
		start[49] = 0.0099765;
		start[50] = 0.0010079;
		start[51] = 0.0082434;
		start[52] = 0.006862;
		start[53] = 0.0095925;
		start[54] = 0.0048495;
		start[55] = 0.0078798;
		start[56] = 0.0075502;
		start[57] = 0.0072283;
		start[58] = 0.0026462;
		start[59] = 0.006884;
		start[60] = 0.0093232;
		start[61] = 0.00090249;
		start[62] = 0.0057228;
		start[63] = 0.00579;
		start[64] = 0.0082528;
		start[65] = 0.0033321;
		start[66] = 6.3225e-05;
		start[67] = 0.0067123;
		start[68] = 0.0023951;
		start[69] = 0.0086683;
		start[70] = 0.0085098;
		start[71] = 0.0097849;
		start[72] = 0.0082426;
		start[73] = 0.00049311;
		start[74] = 0.0089091;
		start[75] = 0.0034501;
		start[76] = 0.00089676;
		start[77] = 0.009267;
		start[78] = 0.0085504;
		start[79] = 0.0082506;
		start[80] = 0.0026531;
		start[81] = 0.007654;
		start[82] = 0.0017949;
		start[83] = 0.0054054;
		start[84] = 0.0084083;
		start[85] = 0.0018603;
		start[86] = 0.0098517;
		start[87] = 0.008363;
		start[88] = 0.0054369;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.008067;
		start[11] = 0.0037258;
		start[12] = 0.0042524;
		start[13] = 0.0071478;
		start[14] = 0.0015712;
		start[15] = 0.0053893;
		start[16] = 0.0056126;
		start[17] = 0.0051715;
		start[18] = 0.009719;
		start[19] = 0.0022229;
		start[20] = 0.0020528;
		start[21] = 0.0019222;
		start[22] = 0.0036314;
		start[23] = 0.0048693;
		start[24] = 0.0059784;
		start[25] = 0.0090209;
		start[26] = 0.00086197;
		start[27] = 0.0081286;
		start[28] = 0.0046135;
		start[29] = 0.00095695;
		start[30] = 0.0013519;
		start[31] = 0.002131;
		start[32] = 0.0024735;
		start[33] = 0.0024568;
		start[34] = 0.0048057;
		start[35] = 0.00037254;
		start[36] = 0.007231;
		start[37] = 0.0086597;
		start[38] = 0.0017992;
		start[39] = 0.0097672;
		start[40] = 0.0033256;
		start[41] = 0.00023382;
		start[42] = 0.0053461;
		start[43] = 0.0032983;
		start[44] = 0.002516;
		start[45] = 0.00070984;
		start[46] = 0.00085611;
		start[47] = 0.0051395;
		start[48] = 0.0059083;
		start[49] = 0.0075262;
		start[50] = 0.0051052;
		start[51] = 0.0055619;
		start[52] = 0.0028152;
		start[53] = 0.0078072;
		start[54] = 0.0044344;
		start[55] = 0.0085706;
		start[56] = 0.0068346;
		start[57] = 0.0053234;
		start[58] = 0.00024565;
		start[59] = 0.0071123;
		start[60] = 0.0095045;
		start[61] = 0.0024123;
		start[62] = 0.0011148;
		start[63] = 0.0003764;
		start[64] = 0.0012883;
		start[65] = 0.0096792;
		start[66] = 0.0051662;
		start[67] = 0.0059246;
		start[68] = 0.0073528;
		start[69] = 0.0053135;
		start[70] = 0.0094816;
		start[71] = 0.0038123;
		start[72] = 0.0056533;
		start[73] = 0.0010505;
		start[74] = 0.0063035;
		start[75] = 0.0036898;
		start[76] = 0.0071007;
		start[77] = 0.0071761;
		start[78] = 0.00058757;
		start[79] = 0.0089323;
		start[80] = 0.0093152;
		start[81] = 0.0085552;
		start[82] = 0.0018638;
		start[83] = 0.0031306;
		start[84] = 0.0042344;
		start[85] = 0.0040268;
		start[86] = 0.0010014;
		start[87] = 0.0027644;
		start[88] = 0.003767;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.009936;
		start[11] = 0.0042723;
		start[12] = 0.0026934;
		start[13] = 0.0004273;
		start[14] = 0.00012889;
		start[15] = 0.00015411;
		start[16] = 0.0009988;
		start[17] = 0.0063638;
		start[18] = 0.00048008;
		start[19] = 0.0090996;
		start[20] = 0.0039525;
		start[21] = 0.0029669;
		start[22] = 0.0050106;
		start[23] = 0.0043839;
		start[24] = 0.00058999;
		start[25] = 0.0089209;
		start[26] = 0.0099112;
		start[27] = 0.0013982;
		start[28] = 0.0070366;
		start[29] = 0.0068368;
		start[30] = 0.0093172;
		start[31] = 0.00284;
		start[32] = 0.0045164;
		start[33] = 0.0087657;
		start[34] = 0.0019783;
		start[35] = 0.0057238;
		start[36] = 0.0040104;
		start[37] = 0.0041207;
		start[38] = 0.0018888;
		start[39] = 0.0069782;
		start[40] = 0.0070336;
		start[41] = 0.0089124;
		start[42] = 0.0016189;
		start[43] = 0.0026572;
		start[44] = 0.0041966;
		start[45] = 0.0095164;
		start[46] = 0.0071847;
		start[47] = 0.001292;
		start[48] = 0.0091457;
		start[49] = 0.0018519;
		start[50] = 0.0029172;
		start[51] = 0.0062754;
		start[52] = 0.0006439;
		start[53] = 0.0083958;
		start[54] = 0.0088815;
		start[55] = 0.0094736;
		start[56] = 0.0035391;
		start[57] = 0.0043636;
		start[58] = 0.0077571;
		start[59] = 0.0074392;
		start[60] = 0.0076312;
		start[61] = 0.0055075;
		start[62] = 0.0078345;
		start[63] = 0.00842;
		start[64] = 0.005188;
		start[65] = 0.004771;
		start[66] = 0.0043989;
		start[67] = 0.0071418;
		start[68] = 0.0075253;
		start[69] = 0.0080736;
		start[70] = 0.0092992;
		start[71] = 0.004618;
		start[72] = 0.009758;
		start[73] = 0.0057122;
		start[74] = 0.0035132;
		start[75] = 0.0013178;
		start[76] = 0.0052202;
		start[77] = 0.00078807;
		start[78] = 0.0057622;
		start[79] = 0.0097531;
		start[80] = 0.0094715;
		start[81] = 0.0010148;
		start[82] = 0.0042261;
		start[83] = 0.0066445;
		start[84] = 0.0080923;
		start[85] = 0.008616;
		start[86] = 0.0076687;
		start[87] = 0.0084242;
		start[88] = 0.0075621;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0056709;
		start[11] = 0.0060017;
		start[12] = 0.0012266;
		start[13] = 0.0033441;
		start[14] = 0.0097123;
		start[15] = 0.0051139;
		start[16] = 0.0032042;
		start[17] = 0.0055296;
		start[18] = 0.0034426;
		start[19] = 0.0064549;
		start[20] = 0.0058734;
		start[21] = 0.0040932;
		start[22] = 0.0026256;
		start[23] = 0.0013784;
		start[24] = 0.0071352;
		start[25] = 0.004535;
		start[26] = 0.0084565;
		start[27] = 0.00038931;
		start[28] = 0.0030004;
		start[29] = 0.00080406;
		start[30] = 0.0020187;
		start[31] = 0.0011651;
		start[32] = 0.0020515;
		start[33] = 0.0093943;
		start[34] = 0.0026935;
		start[35] = 0.0015377;
		start[36] = 0.0065575;
		start[37] = 0.0041552;
		start[38] = 0.0060482;
		start[39] = 0.0014127;
		start[40] = 0.0079801;
		start[41] = 0.0077585;
		start[42] = 0.0016556;
		start[43] = 0.0024442;
		start[44] = 0.0081548;
		start[45] = 0.0088458;
		start[46] = 0.0040703;
		start[47] = 0.0058331;
		start[48] = 0.0031552;
		start[49] = 0.0073045;
		start[50] = 0.0052566;
		start[51] = 0.006956;
		start[52] = 0.0045713;
		start[53] = 0.0038152;
		start[54] = 0.008808;
		start[55] = 0.0065445;
		start[56] = 0.0049508;
		start[57] = 0.0083466;
		start[58] = 0.007619;
		start[59] = 0.0098738;
		start[60] = 0.0061302;
		start[61] = 0.0013938;
		start[62] = 0.0065365;
		start[63] = 0.0072874;
		start[64] = 0.0045829;
		start[65] = 0.0025563;
		start[66] = 0.0087726;
		start[67] = 0.0069125;
		start[68] = 0.002877;
		start[69] = 0.0069564;
		start[70] = 0.0056991;
		start[71] = 0.0090412;
		start[72] = 0.00081121;
		start[73] = 0.0015223;
		start[74] = 0.0075445;
		start[75] = 0.0064063;
		start[76] = 0.009732;
		start[77] = 0.0073563;
		start[78] = 0.00055348;
		start[79] = 0.0059301;
		start[80] = 0.0086859;
		start[81] = 0.0040852;
		start[82] = 0.009233;
		start[83] = 0.0066229;
		start[84] = 0.0057662;
		start[85] = 0.0083651;
		start[86] = 0.00076632;
		start[87] = 0.0016948;
		start[88] = 0.0019351;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0049518;
		start[11] = 0.003047;
		start[12] = 0.0038099;
		start[13] = 0.0061896;
		start[14] = 0.001414;
		start[15] = 0.0027888;
		start[16] = 0.0028965;
		start[17] = 0.0042901;
		start[18] = 0.0091115;
		start[19] = 0.0058868;
		start[20] = 0.0061992;
		start[21] = 0.0059689;
		start[22] = 0.00014991;
		start[23] = 0.0022936;
		start[24] = 0.00016052;
		start[25] = 0.00089431;
		start[26] = 0.0069485;
		start[27] = 0.0056014;
		start[28] = 0.0056433;
		start[29] = 4.4439e-05;
		start[30] = 0.006409;
		start[31] = 0.0062741;
		start[32] = 0.0058124;
		start[33] = 0.0075725;
		start[34] = 0.0013321;
		start[35] = 0.0045708;
		start[36] = 0.00058617;
		start[37] = 0.007541;
		start[38] = 0.0075676;
		start[39] = 0.0028239;
		start[40] = 0.0057748;
		start[41] = 0.006607;
		start[42] = 0.0012779;
		start[43] = 0.0077638;
		start[44] = 8.7526e-05;
		start[45] = 0.0081564;
		start[46] = 0.0059592;
		start[47] = 0.0098313;
		start[48] = 0.0021464;
		start[49] = 0.0043952;
		start[50] = 0.0046287;
		start[51] = 0.0038353;
		start[52] = 0.0039016;
		start[53] = 0.0026254;
		start[54] = 0.0044854;
		start[55] = 0.0041417;
		start[56] = 0.0060388;
		start[57] = 0.0046866;
		start[58] = 0.00039161;
		start[59] = 0.0015327;
		start[60] = 0.0047641;
		start[61] = 0.0075951;
		start[62] = 0.00020405;
		start[63] = 0.0079535;
		start[64] = 0.0026606;
		start[65] = 0.0044646;
		start[66] = 0.0018871;
		start[67] = 0.0013013;
		start[68] = 0.0052923;
		start[69] = 0.0083986;
		start[70] = 0.0084483;
		start[71] = 0.00053286;
		start[72] = 0.0047166;
		start[73] = 0.0091675;
		start[74] = 0.0027898;
		start[75] = 0.0080296;
		start[76] = 0.00087966;
		start[77] = 0.0033007;
		start[78] = 0.002456;
		start[79] = 0.0027475;
		start[80] = 0.0050416;
		start[81] = 0.0039479;
		start[82] = 0.0010631;
		start[83] = 0.0090715;
		start[84] = 0.0041339;
		start[85] = 0.0093277;
		start[86] = 0.0037101;
		start[87] = 0.0034714;
		start[88] = 0.006151;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0025338;
		start[11] = 0.0042092;
		start[12] = 0.0034385;
		start[13] = 0.0048337;
		start[14] = 0.0055025;
		start[15] = 0.003104;
		start[16] = 0.0099099;
		start[17] = 0.0055427;
		start[18] = 0.0061608;
		start[19] = 0.00019968;
		start[20] = 0.0091329;
		start[21] = 0.0061965;
		start[22] = 0.0042648;
		start[23] = 0.00089101;
		start[24] = 0.0028543;
		start[25] = 0.0024491;
		start[26] = 0.0019464;
		start[27] = 0.0013516;
		start[28] = 0.0064477;
		start[29] = 0.0017924;
		start[30] = 0.001448;
		start[31] = 0.0047971;
		start[32] = 0.00060028;
		start[33] = 0.0075778;
		start[34] = 0.0047411;
		start[35] = 0.0069043;
		start[36] = 0.0029216;
		start[37] = 0.0011743;
		start[38] = 0.0071785;
		start[39] = 0.0074493;
		start[40] = 0.0032144;
		start[41] = 0.008565;
		start[42] = 0.0043824;
		start[43] = 0.0087595;
		start[44] = 0.0078262;
		start[45] = 0.0060317;
		start[46] = 0.0039174;
		start[47] = 0.0064756;
		start[48] = 0.0098119;
		start[49] = 0.004286;
		start[50] = 0.0087691;
		start[51] = 0.0010163;
		start[52] = 0.0062702;
		start[53] = 0.003026;
		start[54] = 0.0049146;
		start[55] = 0.0074193;
		start[56] = 0.0073935;
		start[57] = 0.0031231;
		start[58] = 0.0072237;
		start[59] = 0.0040623;
		start[60] = 0.0053066;
		start[61] = 0.001744;
		start[62] = 0.0069586;
		start[63] = 0.0033425;
		start[64] = 0.0081583;
		start[65] = 0.0032797;
		start[66] = 0.0035388;
		start[67] = 0.0040111;
		start[68] = 0.0098451;
		start[69] = 0.0020203;
		start[70] = 0.00099914;
		start[71] = 0.0069599;
		start[72] = 0.00040748;
		start[73] = 0.0058248;
		start[74] = 0.0020589;
		start[75] = 0.0052622;
		start[76] = 0.0075416;
		start[77] = 0.0039162;
		start[78] = 0.0072472;
		start[79] = 0.0027255;
		start[80] = 0.0014202;
		start[81] = 0.0019449;
		start[82] = 0.0028445;
		start[83] = 0.0011673;
		start[84] = 0.00061064;
		start[85] = 0.0072007;
		start[86] = 0.0099509;
		start[87] = 0.0027203;
		start[88] = 0.0091678;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.00049312;
		start[11] = 0.00772;
		start[12] = 0.0077043;
		start[13] = 0.0062563;
		start[14] = 0.0065023;
		start[15] = 0.0073464;
		start[16] = 0.0021823;
		start[17] = 0.0018096;
		start[18] = 0.0043652;
		start[19] = 0.00092508;
		start[20] = 0.0076576;
		start[21] = 0.0044233;
		start[22] = 0.0012811;
		start[23] = 0.0028258;
		start[24] = 0.0057369;
		start[25] = 0.0096257;
		start[26] = 0.0068378;
		start[27] = 0.0051052;
		start[28] = 0.0073451;
		start[29] = 0.0058758;
		start[30] = 0.00013662;
		start[31] = 0.0040193;
		start[32] = 0.0051225;
		start[33] = 0.00032424;
		start[34] = 0.0048787;
		start[35] = 0.0093112;
		start[36] = 0.0022451;
		start[37] = 0.0074206;
		start[38] = 0.0056164;
		start[39] = 0.001084;
		start[40] = 0.0065941;
		start[41] = 0.0067548;
		start[42] = 0.0022956;
		start[43] = 0.0058433;
		start[44] = 0.0097477;
		start[45] = 0.0021837;
		start[46] = 0.0073863;
		start[47] = 0.0094495;
		start[48] = 0.00044266;
		start[49] = 0.0038431;
		start[50] = 0.0074481;
		start[51] = 0.0093953;
		start[52] = 0.0016534;
		start[53] = 0.0035043;
		start[54] = 0.0058695;
		start[55] = 0.003072;
		start[56] = 0.0086694;
		start[57] = 0.0055596;
		start[58] = 0.0098228;
		start[59] = 0.0023203;
		start[60] = 0.0085431;
		start[61] = 0.004147;
		start[62] = 0.0035826;
		start[63] = 0.0057129;
		start[64] = 0.0036289;
		start[65] = 0.0066238;
		start[66] = 0.0032132;
		start[67] = 0.001357;
		start[68] = 0.0088271;
		start[69] = 0.0010845;
		start[70] = 0.0078971;
		start[71] = 0.005918;
		start[72] = 0.0091505;
		start[73] = 0.0082839;
		start[74] = 7.5885e-06;
		start[75] = 0.0065979;
		start[76] = 0.0020479;
		start[77] = 0.0088096;
		start[78] = 0.0030383;
		start[79] = 0.00097685;
		start[80] = 0.00088643;
		start[81] = 0.0036;
		start[82] = 0.0011899;
		start[83] = 0.0052239;
		start[84] = 0.0059749;
		start[85] = 0.0058428;
		start[86] = 0.0024164;
		start[87] = 0.0064;
		start[88] = 0.00012261;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0089074;
		start[11] = 0.0055894;
		start[12] = 0.0040932;
		start[13] = 0.0070073;
		start[14] = 0.004643;
		start[15] = 0.00448;
		start[16] = 0.0088223;
		start[17] = 0.0097726;
		start[18] = 0.0059191;
		start[19] = 0.0061961;
		start[20] = 0.0068854;
		start[21] = 1.5743e-05;
		start[22] = 0.00038942;
		start[23] = 0.0077559;
		start[24] = 0.0092068;
		start[25] = 0.0064771;
		start[26] = 0.0062958;
		start[27] = 0.0057303;
		start[28] = 0.0062046;
		start[29] = 0.00079492;
		start[30] = 0.0018411;
		start[31] = 0.0035378;
		start[32] = 0.0011911;
		start[33] = 0.0086424;
		start[34] = 0.0040839;
		start[35] = 0.0082837;
		start[36] = 0.0037109;
		start[37] = 0.0086466;
		start[38] = 0.002829;
		start[39] = 0.0036846;
		start[40] = 0.0087988;
		start[41] = 0.0042478;
		start[42] = 0.0006841;
		start[43] = 0.0093805;
		start[44] = 0.0018593;
		start[45] = 0.0098296;
		start[46] = 0.001597;
		start[47] = 0.008638;
		start[48] = 0.0064188;
		start[49] = 0.003062;
		start[50] = 0.00024207;
		start[51] = 0.0094801;
		start[52] = 0.0056893;
		start[53] = 0.0025772;
		start[54] = 0.0016664;
		start[55] = 0.0044034;
		start[56] = 0.0018033;
		start[57] = 0.00071615;
		start[58] = 0.0037777;
		start[59] = 0.0044941;
		start[60] = 0.0033873;
		start[61] = 0.0042073;
		start[62] = 0.0016349;
		start[63] = 0.0015439;
		start[64] = 0.0091088;
		start[65] = 0.0021665;
		start[66] = 0.0090291;
		start[67] = 0.0090809;
		start[68] = 0.0047567;
		start[69] = 0.004091;
		start[70] = 0.0098026;
		start[71] = 0.0071825;
		start[72] = 0.0023895;
		start[73] = 0.0020226;
		start[74] = 0.0069264;
		start[75] = 0.00092117;
		start[76] = 0.0088626;
		start[77] = 0.0037462;
		start[78] = 0.0065364;
		start[79] = 0.0045575;
		start[80] = 0.0037257;
		start[81] = 0.0054118;
		start[82] = 0.0060519;
		start[83] = 0.0015782;
		start[84] = 0.0081331;
		start[85] = 0.0027171;
		start[86] = 0.0023346;
		start[87] = 0.0076453;
		start[88] = 0.0048422;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.00058509;
		start[11] = 0.0016754;
		start[12] = 0.0099441;
		start[13] = 0.007908;
		start[14] = 0.004931;
		start[15] = 0.0074004;
		start[16] = 0.0014441;
		start[17] = 0.00041036;
		start[18] = 0.0015096;
		start[19] = 0.0075406;
		start[20] = 0.0027249;
		start[21] = 0.0015719;
		start[22] = 0.0027186;
		start[23] = 0.0010574;
		start[24] = 0.0010521;
		start[25] = 0.0052056;
		start[26] = 0.0020705;
		start[27] = 0.0011477;
		start[28] = 0.0076998;
		start[29] = 0.0088607;
		start[30] = 0.0013241;
		start[31] = 0.0074886;
		start[32] = 0.0045219;
		start[33] = 0.0072999;
		start[34] = 0.0075164;
		start[35] = 0.0074571;
		start[36] = 0.0077127;
		start[37] = 0.0075118;
		start[38] = 0.0073183;
		start[39] = 0.0039012;
		start[40] = 0.0099645;
		start[41] = 0.00031468;
		start[42] = 0.0077687;
		start[43] = 0.008993;
		start[44] = 0.002399;
		start[45] = 0.00027984;
		start[46] = 0.0094855;
		start[47] = 0.0044978;
		start[48] = 0.0010484;
		start[49] = 0.0033586;
		start[50] = 0.0076132;
		start[51] = 0.0038149;
		start[52] = 0.0059149;
		start[53] = 0.0050525;
		start[54] = 0.0079172;
		start[55] = 0.0069471;
		start[56] = 0.0074149;
		start[57] = 0.0096059;
		start[58] = 0.0057912;
		start[59] = 0.0096444;
		start[60] = 0.0099791;
		start[61] = 0.0027012;
		start[62] = 0.0057772;
		start[63] = 0.00093531;
		start[64] = 0.0010228;
		start[65] = 0.0075604;
		start[66] = 0.0017156;
		start[67] = 0.0018534;
		start[68] = 0.0018005;
		start[69] = 0.0057189;
		start[70] = 0.0054796;
		start[71] = 0.0043638;
		start[72] = 0.0092799;
		start[73] = 0.0028706;
		start[74] = 0.0049082;
		start[75] = 0.003234;
		start[76] = 0.004588;
		start[77] = 0.00014938;
		start[78] = 0.0081957;
		start[79] = 0.0094653;
		start[80] = 0.0022298;
		start[81] = 0.0046573;
		start[82] = 0.00061695;
		start[83] = 0.0079374;
		start[84] = 0.0048347;
		start[85] = 0.008948;
		start[86] = 0.0080156;
		start[87] = 0.0014401;
		start[88] = 0.0033036;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.00071244;
		start[11] = 0.00078641;
		start[12] = 0.0085454;
		start[13] = 0.0031505;
		start[14] = 0.0018959;
		start[15] = 0.0064573;
		start[16] = 0.0070804;
		start[17] = 0.0043225;
		start[18] = 0.0087594;
		start[19] = 0.0089584;
		start[20] = 0.0015132;
		start[21] = 0.003305;
		start[22] = 0.0051248;
		start[23] = 0.0089379;
		start[24] = 2.5545e-05;
		start[25] = 0.0094869;
		start[26] = 0.0031714;
		start[27] = 0.0034828;
		start[28] = 0.0056441;
		start[29] = 0.0034496;
		start[30] = 0.005191;
		start[31] = 0.0033572;
		start[32] = 0.001672;
		start[33] = 0.0045001;
		start[34] = 0.0024772;
		start[35] = 0.0079277;
		start[36] = 0.0095813;
		start[37] = 0.0047599;
		start[38] = 0.0017323;
		start[39] = 0.0069555;
		start[40] = 0.0031281;
		start[41] = 0.003381;
		start[42] = 0.0018015;
		start[43] = 0.0095763;
		start[44] = 0.0022939;
		start[45] = 0.0074555;
		start[46] = 0.0087472;
		start[47] = 0.00098342;
		start[48] = 0.00043908;
		start[49] = 0.0091959;
		start[50] = 0.009214;
		start[51] = 0.0089569;
		start[52] = 0.0009768;
		start[53] = 0.0089025;
		start[54] = 0.0019611;
		start[55] = 0.0065171;
		start[56] = 0.0021881;
		start[57] = 0.00084302;
		start[58] = 0.0046135;
		start[59] = 0.00065472;
		start[60] = 0.00175;
		start[61] = 0.0014987;
		start[62] = 0.0018;
		start[63] = 0.0081478;
		start[64] = 0.0074878;
		start[65] = 0.009436;
		start[66] = 0.0067999;
		start[67] = 0.00090816;
		start[68] = 0.0010383;
		start[69] = 0.0076855;
		start[70] = 1.5888e-05;
		start[71] = 0.0083257;
		start[72] = 0.0033909;
		start[73] = 0.008735;
		start[74] = 0.00012443;
		start[75] = 0.0024353;
		start[76] = 0.0078224;
		start[77] = 0.0020835;
		start[78] = 0.0069838;
		start[79] = 0.00087662;
		start[80] = 0.0082662;
		start[81] = 0.0043191;
		start[82] = 0.0030858;
		start[83] = 0.0083774;
		start[84] = 0.0045654;
		start[85] = 0.00081494;
		start[86] = 0.0010759;
		start[87] = 0.0098211;
		start[88] = 0.006146;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0028073;
		start[11] = 0.00056652;
		start[12] = 0.003933;
		start[13] = 0.0017477;
		start[14] = 0.0039052;
		start[15] = 0.0039385;
		start[16] = 0.0018776;
		start[17] = 0.0035728;
		start[18] = 0.0029807;
		start[19] = 0.00099994;
		start[20] = 0.0055938;
		start[21] = 0.001779;
		start[22] = 0.0013494;
		start[23] = 0.0020338;
		start[24] = 0.00011433;
		start[25] = 0.0085461;
		start[26] = 0.0060838;
		start[27] = 0.00033798;
		start[28] = 0.00081637;
		start[29] = 0.0082454;
		start[30] = 0.0069489;
		start[31] = 0.00093101;
		start[32] = 0.0015639;
		start[33] = 0.0080959;
		start[34] = 0.0077793;
		start[35] = 0.0019924;
		start[36] = 0.0073126;
		start[37] = 0.0083613;
		start[38] = 0.0094794;
		start[39] = 0.0022549;
		start[40] = 0.0060922;
		start[41] = 0.00038287;
		start[42] = 0.0053234;
		start[43] = 0.0048599;
		start[44] = 0.0048315;
		start[45] = 5.8949e-05;
		start[46] = 0.00070014;
		start[47] = 0.0056831;
		start[48] = 0.0096698;
		start[49] = 0.0076823;
		start[50] = 0.0097605;
		start[51] = 0.0023632;
		start[52] = 0.0034567;
		start[53] = 0.0085528;
		start[54] = 0.00069253;
		start[55] = 0.0055518;
		start[56] = 0.0067195;
		start[57] = 0.0049474;
		start[58] = 0.00654;
		start[59] = 0.0020414;
		start[60] = 0.0018443;
		start[61] = 0.0085933;
		start[62] = 0.0002304;
		start[63] = 0.0023;
		start[64] = 0.0077823;
		start[65] = 0.0044914;
		start[66] = 0.0052178;
		start[67] = 0.0075723;
		start[68] = 0.0064782;
		start[69] = 0.0075061;
		start[70] = 0.0066785;
		start[71] = 0.0041675;
		start[72] = 0.0011722;
		start[73] = 0.0031452;
		start[74] = 0.0012805;
		start[75] = 0.0070382;
		start[76] = 0.0068428;
		start[77] = 0.00040065;
		start[78] = 0.0087349;
		start[79] = 0.0065041;
		start[80] = 0.0097608;
		start[81] = 0.0021537;
		start[82] = 0.0022497;
		start[83] = 0.0061995;
		start[84] = 0.0039784;
		start[85] = 0.0053766;
		start[86] = 0.0038514;
		start[87] = 0.0025989;
		start[88] = 0.0067961;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0072178;
		start[11] = 0.0027794;
		start[12] = 0.00019673;
		start[13] = 0.0068288;
		start[14] = 0.0042996;
		start[15] = 0.0034216;
		start[16] = 0.0010403;
		start[17] = 0.0022812;
		start[18] = 0.0010368;
		start[19] = 0.0052525;
		start[20] = 5.9344e-05;
		start[21] = 0.002107;
		start[22] = 0.0034549;
		start[23] = 0.00035094;
		start[24] = 0.0095934;
		start[25] = 0.0068621;
		start[26] = 0.0062858;
		start[27] = 0.0052956;
		start[28] = 0.0041953;
		start[29] = 0.0067099;
		start[30] = 0.0028332;
		start[31] = 0.00055724;
		start[32] = 0.0012945;
		start[33] = 0.0065865;
		start[34] = 0.0034812;
		start[35] = 0.0075459;
		start[36] = 0.002947;
		start[37] = 0.0020992;
		start[38] = 0.0029526;
		start[39] = 0.0054106;
		start[40] = 0.0048509;
		start[41] = 0.00057996;
		start[42] = 0.0048542;
		start[43] = 0.0035737;
		start[44] = 0.0012518;
		start[45] = 0.0072732;
		start[46] = 0.0018182;
		start[47] = 0.0055727;
		start[48] = 0.0021493;
		start[49] = 0.0081515;
		start[50] = 0.0089108;
		start[51] = 0.0057481;
		start[52] = 0.0043608;
		start[53] = 0.0064183;
		start[54] = 0.0036214;
		start[55] = 0.0093176;
		start[56] = 0.0024572;
		start[57] = 0.0095536;
		start[58] = 0.0044185;
		start[59] = 0.0051175;
		start[60] = 0.0075653;
		start[61] = 0.0019148;
		start[62] = 0.0088561;
		start[63] = 0.0040581;
		start[64] = 0.00060802;
		start[65] = 0.0059449;
		start[66] = 0.0030117;
		start[67] = 0.0061174;
		start[68] = 0.0070487;
		start[69] = 0.0092812;
		start[70] = 0.00056532;
		start[71] = 0.0066963;
		start[72] = 0.0046109;
		start[73] = 0.0096287;
		start[74] = 0.00087137;
		start[75] = 0.0080493;
		start[76] = 0.0021784;
		start[77] = 0.002529;
		start[78] = 0.0012486;
		start[79] = 0.003966;
		start[80] = 0.0080542;
		start[81] = 0.00024773;
		start[82] = 0.0080586;
		start[83] = 0.0039273;
		start[84] = 0.0096706;
		start[85] = 0.0094549;
		start[86] = 0.0097662;
		start[87] = 0.0019354;
		start[88] = 0.0072097;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0026444;
		start[11] = 0.0056628;
		start[12] = 0.0017441;
		start[13] = 0.0045189;
		start[14] = 0.0049876;
		start[15] = 0.0041075;
		start[16] = 0.0083368;
		start[17] = 0.0058701;
		start[18] = 0.0045294;
		start[19] = 0.002542;
		start[20] = 0.0042802;
		start[21] = 0.00045247;
		start[22] = 0.0020954;
		start[23] = 0.0023606;
		start[24] = 0.00031935;
		start[25] = 0.0027488;
		start[26] = 0.004718;
		start[27] = 0.0016747;
		start[28] = 0.0096955;
		start[29] = 0.0031754;
		start[30] = 0.0043714;
		start[31] = 0.0072247;
		start[32] = 0.0066117;
		start[33] = 0.0027226;
		start[34] = 0.0051131;
		start[35] = 0.0098028;
		start[36] = 0.0018468;
		start[37] = 0.0014046;
		start[38] = 0.0089969;
		start[39] = 0.0020707;
		start[40] = 0.00073908;
		start[41] = 0.0078627;
		start[42] = 0.0087507;
		start[43] = 0.0053963;
		start[44] = 0.0054801;
		start[45] = 0.0070235;
		start[46] = 0.0086277;
		start[47] = 0.0086914;
		start[48] = 0.0024697;
		start[49] = 0.0022538;
		start[50] = 0.0011905;
		start[51] = 0.0015993;
		start[52] = 0.0090292;
		start[53] = 0.0020246;
		start[54] = 0.0067043;
		start[55] = 0.0082928;
		start[56] = 0.0029252;
		start[57] = 0.008848;
		start[58] = 0.0062073;
		start[59] = 0.0047873;
		start[60] = 0.0062711;
		start[61] = 0.0049644;
		start[62] = 0.0077841;
		start[63] = 0.0096517;
		start[64] = 0.0081471;
		start[65] = 0.0043546;
		start[66] = 0.0028734;
		start[67] = 0.0079591;
		start[68] = 0.00041306;
		start[69] = 0.0017714;
		start[70] = 0.0038664;
		start[71] = 0.0082779;
		start[72] = 0.0073745;
		start[73] = 0.0063018;
		start[74] = 0.0014065;
		start[75] = 0.0092849;
		start[76] = 0.0051972;
		start[77] = 0.0064383;
		start[78] = 0.0095272;
		start[79] = 0.0082011;
		start[80] = 0.0027488;
		start[81] = 0.001453;
		start[82] = 0.008335;
		start[83] = 0.0057056;
		start[84] = 0.0041856;
		start[85] = 0.0087222;
		start[86] = 0.00015094;
		start[87] = 0.0082565;
		start[88] = 0.0020606;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0014669;
		start[11] = 0.0041246;
		start[12] = 0.0084144;
		start[13] = 0.0081951;
		start[14] = 0.0099313;
		start[15] = 0.0067301;
		start[16] = 0.00093884;
		start[17] = 0.0016207;
		start[18] = 0.0088817;
		start[19] = 0.00082247;
		start[20] = 0.0010265;
		start[21] = 0.004596;
		start[22] = 0.002603;
		start[23] = 0.0020047;
		start[24] = 0.0024549;
		start[25] = 0.0068311;
		start[26] = 0.0064923;
		start[27] = 0.0038644;
		start[28] = 0.0098044;
		start[29] = 0.0020339;
		start[30] = 0.0064296;
		start[31] = 0.0046755;
		start[32] = 0.0043933;
		start[33] = 0.0032378;
		start[34] = 0.0068636;
		start[35] = 0.0025458;
		start[36] = 0.0012817;
		start[37] = 0.0016639;
		start[38] = 0.00018352;
		start[39] = 0.0012736;
		start[40] = 0.002162;
		start[41] = 0.0063956;
		start[42] = 0.0043902;
		start[43] = 0.0026109;
		start[44] = 0.0086059;
		start[45] = 0.00069483;
		start[46] = 0.0053298;
		start[47] = 0.0089556;
		start[48] = 0.00555;
		start[49] = 0.0087173;
		start[50] = 0.0047523;
		start[51] = 0.0071828;
		start[52] = 0.0054543;
		start[53] = 0.0024604;
		start[54] = 0.0078528;
		start[55] = 0.0048495;
		start[56] = 0.0051166;
		start[57] = 0.0093655;
		start[58] = 0.0037766;
		start[59] = 0.0015552;
		start[60] = 0.0034027;
		start[61] = 0.0002901;
		start[62] = 0.0070425;
		start[63] = 0.0073082;
		start[64] = 0.00087919;
		start[65] = 0.00011646;
		start[66] = 0.0070291;
		start[67] = 0.0050077;
		start[68] = 0.0024037;
		start[69] = 0.0052373;
		start[70] = 0.0041859;
		start[71] = 0.0028336;
		start[72] = 0.0064635;
		start[73] = 0.00043816;
		start[74] = 0.0034585;
		start[75] = 0.0098;
		start[76] = 0.00083091;
		start[77] = 0.0037166;
		start[78] = 0.0086993;
		start[79] = 0.0047883;
		start[80] = 0.00091977;
		start[81] = 0.0098227;
		start[82] = 0.0034794;
		start[83] = 0.0039674;
		start[84] = 0.0062395;
		start[85] = 0.0051819;
		start[86] = 0.0039558;
		start[87] = 0.0096971;
		start[88] = 0.0026176;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0018736;
		start[11] = 0.001197;
		start[12] = 0.0062781;
		start[13] = 0.0096325;
		start[14] = 0.0055584;
		start[15] = 0.0030817;
		start[16] = 0.0089484;
		start[17] = 0.003161;
		start[18] = 0.004831;
		start[19] = 0.00089101;
		start[20] = 0.0085359;
		start[21] = 0.0059263;
		start[22] = 0.0071977;
		start[23] = 0.002494;
		start[24] = 0.0055012;
		start[25] = 0.0035216;
		start[26] = 0.0095096;
		start[27] = 0.0010302;
		start[28] = 0.0011987;
		start[29] = 0.0050672;
		start[30] = 0.0037084;
		start[31] = 0.0010122;
		start[32] = 0.0022696;
		start[33] = 0.0057851;
		start[34] = 0.0050158;
		start[35] = 0.0028763;
		start[36] = 0.0053199;
		start[37] = 0.0083898;
		start[38] = 0.0034935;
		start[39] = 0.006559;
		start[40] = 0.0075118;
		start[41] = 0.0034735;
		start[42] = 0.009901;
		start[43] = 0.0060371;
		start[44] = 4.1463e-05;
		start[45] = 0.0099177;
		start[46] = 0.006769;
		start[47] = 0.0067552;
		start[48] = 0.00023344;
		start[49] = 0.0082071;
		start[50] = 0.0030241;
		start[51] = 0.0015013;
		start[52] = 0.0027984;
		start[53] = 0.0033318;
		start[54] = 0.0030273;
		start[55] = 0.0051811;
		start[56] = 0.0078872;
		start[57] = 0.0033751;
		start[58] = 0.0059151;
		start[59] = 0.0056531;
		start[60] = 0.0022243;
		start[61] = 0.0077772;
		start[62] = 0.0040488;
		start[63] = 0.0017475;
		start[64] = 0.0030551;
		start[65] = 0.0080394;
		start[66] = 0.0091413;
		start[67] = 0.0086129;
		start[68] = 0.0092637;
		start[69] = 0.0080349;
		start[70] = 0.0041479;
		start[71] = 0.003097;
		start[72] = 0.0034315;
		start[73] = 0.0049053;
		start[74] = 0.0084486;
		start[75] = 0.0010282;
		start[76] = 0.0056326;
		start[77] = 0.0025328;
		start[78] = 0.0012174;
		start[79] = 0.0010569;
		start[80] = 0.0069539;
		start[81] = 0.0087837;
		start[82] = 0.0098208;
		start[83] = 0.0093862;
		start[84] = 0.0049997;
		start[85] = 0.0057566;
		start[86] = 0.0050669;
		start[87] = 0.0094879;
		start[88] = 0.00038288;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0017864;
		start[11] = 0.0065373;
		start[12] = 0.0018958;
		start[13] = 0.00088376;
		start[14] = 0.0044626;
		start[15] = 0.0030455;
		start[16] = 0.0047643;
		start[17] = 0.0034934;
		start[18] = 0.0037205;
		start[19] = 0.0088635;
		start[20] = 0.0038994;
		start[21] = 0.0019173;
		start[22] = 0.0013475;
		start[23] = 0.0045939;
		start[24] = 0.0038287;
		start[25] = 0.0083131;
		start[26] = 0.003018;
		start[27] = 0.0084361;
		start[28] = 0.0094513;
		start[29] = 3.9696e-05;
		start[30] = 0.0063441;
		start[31] = 0.0091481;
		start[32] = 6.6678e-05;
		start[33] = 0.0012732;
		start[34] = 0.0072251;
		start[35] = 0.0080479;
		start[36] = 0.0082559;
		start[37] = 0.0032825;
		start[38] = 0.0032488;
		start[39] = 0.0015375;
		start[40] = 0.002855;
		start[41] = 0.0040956;
		start[42] = 0.0094317;
		start[43] = 0.0053682;
		start[44] = 0.0032855;
		start[45] = 0.0095588;
		start[46] = 0.0082327;
		start[47] = 0.0095402;
		start[48] = 0.0041465;
		start[49] = 0.0013283;
		start[50] = 0.0049378;
		start[51] = 0.0034941;
		start[52] = 0.00052315;
		start[53] = 0.0076236;
		start[54] = 0.0049117;
		start[55] = 0.0016807;
		start[56] = 0.0033123;
		start[57] = 0.0080303;
		start[58] = 0.0016711;
		start[59] = 0.0058391;
		start[60] = 0.00038013;
		start[61] = 0.0039598;
		start[62] = 0.0035183;
		start[63] = 0.00086171;
		start[64] = 0.00094794;
		start[65] = 0.0051502;
		start[66] = 0.0030957;
		start[67] = 0.0063343;
		start[68] = 0.0017567;
		start[69] = 0.0037714;
		start[70] = 0.0082527;
		start[71] = 0.0052323;
		start[72] = 0.00252;
		start[73] = 0.0021955;
		start[74] = 0.0087339;
		start[75] = 0.0013656;
		start[76] = 0.00016968;
		start[77] = 0.0069631;
		start[78] = 0.0053791;
		start[79] = 0.0020357;
		start[80] = 0.00026433;
		start[81] = 0.0090263;
		start[82] = 0.009403;
		start[83] = 0.0098611;
		start[84] = 0.0010381;
		start[85] = 0.0056354;
		start[86] = 0.0043933;
		start[87] = 0.0053783;
		start[88] = 0.0075681;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0040127;
		start[11] = 0.0030643;
		start[12] = 0.0054838;
		start[13] = 0.0041461;
		start[14] = 0.0052882;
		start[15] = 0.0029151;
		start[16] = 0.0048738;
		start[17] = 0.0087771;
		start[18] = 0.0023619;
		start[19] = 0.0071719;
		start[20] = 0.0031046;
		start[21] = 0.0070903;
		start[22] = 0.00060911;
		start[23] = 0.0095833;
		start[24] = 0.0047627;
		start[25] = 0.0022509;
		start[26] = 0.0049772;
		start[27] = 0.0040335;
		start[28] = 0.0075716;
		start[29] = 0.0058618;
		start[30] = 0.0042603;
		start[31] = 0.0095825;
		start[32] = 0.0004136;
		start[33] = 0.0021226;
		start[34] = 0.0044454;
		start[35] = 0.0070154;
		start[36] = 0.0044193;
		start[37] = 0.005411;
		start[38] = 0.0047272;
		start[39] = 0.0082894;
		start[40] = 0.0088462;
		start[41] = 0.00029403;
		start[42] = 0.0028709;
		start[43] = 0.00077767;
		start[44] = 0.0098834;
		start[45] = 0.003416;
		start[46] = 0.001535;
		start[47] = 0.0070871;
		start[48] = 0.0028007;
		start[49] = 0.0059424;
		start[50] = 0.0024015;
		start[51] = 0.0093704;
		start[52] = 0.0014912;
		start[53] = 0.0049654;
		start[54] = 0.007609;
		start[55] = 0.0095103;
		start[56] = 0.0024125;
		start[57] = 0.0068739;
		start[58] = 0.00016337;
		start[59] = 0.009145;
		start[60] = 0.0090427;
		start[61] = 0.0032714;
		start[62] = 0.008724;
		start[63] = 0.0058582;
		start[64] = 0.0066513;
		start[65] = 0.0068446;
		start[66] = 0.0068768;
		start[67] = 0.0048669;
		start[68] = 0.0026282;
		start[69] = 0.0020175;
		start[70] = 0.0048452;
		start[71] = 0.0099176;
		start[72] = 0.0045304;
		start[73] = 0.0092543;
		start[74] = 0.0045913;
		start[75] = 0.0032204;
		start[76] = 0.0082902;
		start[77] = 0.0059333;
		start[78] = 0.0011475;
		start[79] = 0.00082733;
		start[80] = 0.0040744;
		start[81] = 0.002548;
		start[82] = 0.0075085;
		start[83] = 0.0098508;
		start[84] = 0.0026929;
		start[85] = 0.0040914;
		start[86] = 0.0021989;
		start[87] = 0.007895;
		start[88] = 0.0053223;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0031004;
		start[11] = 0.0066146;
		start[12] = 0.0010763;
		start[13] = 0.0019631;
		start[14] = 0.0014868;
		start[15] = 0.0026158;
		start[16] = 0.0083075;
		start[17] = 0.0011793;
		start[18] = 0.0025473;
		start[19] = 0.0074728;
		start[20] = 0.0099758;
		start[21] = 0.001463;
		start[22] = 0.0066249;
		start[23] = 0.0012667;
		start[24] = 0.0024282;
		start[25] = 0.0093967;
		start[26] = 0.0013927;
		start[27] = 0.00091079;
		start[28] = 0.00096047;
		start[29] = 0.0079691;
		start[30] = 0.0013894;
		start[31] = 0.0010264;
		start[32] = 0.004773;
		start[33] = 0.0008173;
		start[34] = 0.0059259;
		start[35] = 0.0014753;
		start[36] = 0.0090666;
		start[37] = 0.003493;
		start[38] = 0.00298;
		start[39] = 0.0045397;
		start[40] = 0.0068594;
		start[41] = 0.00035762;
		start[42] = 0.006721;
		start[43] = 0.0073233;
		start[44] = 0.0011395;
		start[45] = 0.0041852;
		start[46] = 0.0068092;
		start[47] = 0.0044948;
		start[48] = 0.0035528;
		start[49] = 0.0058861;
		start[50] = 0.0045025;
		start[51] = 0.0070276;
		start[52] = 1.7503e-05;
		start[53] = 0.0053226;
		start[54] = 0.0054051;
		start[55] = 0.0074267;
		start[56] = 0.0088938;
		start[57] = 0.0025146;
		start[58] = 0.0076744;
		start[59] = 0.0012764;
		start[60] = 0.00038087;
		start[61] = 0.0040472;
		start[62] = 0.0017351;
		start[63] = 0.0081411;
		start[64] = 0.004909;
		start[65] = 0.0040394;
		start[66] = 0.0092514;
		start[67] = 0.0078111;
		start[68] = 0.0065582;
		start[69] = 0.008952;
		start[70] = 0.0064166;
		start[71] = 0.0040821;
		start[72] = 0.0027852;
		start[73] = 9.3615e-05;
		start[74] = 0.002111;
		start[75] = 0.0045574;
		start[76] = 0.0079512;
		start[77] = 0.0010626;
		start[78] = 0.0067707;
		start[79] = 0.001673;
		start[80] = 0.0047039;
		start[81] = 0.00054188;
		start[82] = 0.0063785;
		start[83] = 0.0023902;
		start[84] = 0.0021285;
		start[85] = 0.0053114;
		start[86] = 0.00056416;
		start[87] = 0.0046743;
		start[88] = 0.00040379;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0087936;
		start[11] = 0.0094915;
		start[12] = 0.00039378;
		start[13] = 0.0086697;
		start[14] = 0.0062872;
		start[15] = 0.0077719;
		start[16] = 0.0046887;
		start[17] = 0.0097042;
		start[18] = 0.0074079;
		start[19] = 0.0064553;
		start[20] = 0.0096632;
		start[21] = 0.0055535;
		start[22] = 0.0068378;
		start[23] = 0.0095872;
		start[24] = 0.0031891;
		start[25] = 0.0076741;
		start[26] = 0.0063683;
		start[27] = 0.00021741;
		start[28] = 0.00091476;
		start[29] = 0.0077897;
		start[30] = 0.00028767;
		start[31] = 0.0011566;
		start[32] = 0.00068661;
		start[33] = 0.0037257;
		start[34] = 0.0012196;
		start[35] = 0.00041963;
		start[36] = 0.005905;
		start[37] = 0.0098104;
		start[38] = 0.0092779;
		start[39] = 0.0026003;
		start[40] = 0.002305;
		start[41] = 0.0093422;
		start[42] = 0.0091345;
		start[43] = 0.0099797;
		start[44] = 0.006655;
		start[45] = 0.0055623;
		start[46] = 0.0085038;
		start[47] = 0.0072811;
		start[48] = 0.0024209;
		start[49] = 0.0072493;
		start[50] = 0.0023976;
		start[51] = 0.0019979;
		start[52] = 0.0046404;
		start[53] = 0.0046002;
		start[54] = 0.0046251;
		start[55] = 0.0046129;
		start[56] = 0.0067106;
		start[57] = 0.0023027;
		start[58] = 0.0049446;
		start[59] = 0.0087073;
		start[60] = 0.0044102;
		start[61] = 0.0055846;
		start[62] = 0.00023893;
		start[63] = 0.0056507;
		start[64] = 0.0032037;
		start[65] = 0.004799;
		start[66] = 0.0095818;
		start[67] = 0.00085724;
		start[68] = 0.0093752;
		start[69] = 0.0078276;
		start[70] = 0.0040118;
		start[71] = 0.00047827;
		start[72] = 0.0017473;
		start[73] = 0.0091674;
		start[74] = 0.0063205;
		start[75] = 0.0037453;
		start[76] = 0.0031865;
		start[77] = 8.8965e-05;
		start[78] = 0.0081344;
		start[79] = 0.0050943;
		start[80] = 0.0066271;
		start[81] = 0.009839;
		start[82] = 0.0092147;
		start[83] = 0.0020453;
		start[84] = 0.0033601;
		start[85] = 0.0032858;
		start[86] = 0.007538;
		start[87] = 0.0019671;
		start[88] = 0.0030966;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.001476;
		start[11] = 0.0065047;
		start[12] = 0.0021851;
		start[13] = 0.0023979;
		start[14] = 0.0016138;
		start[15] = 0.0097872;
		start[16] = 0.0071258;
		start[17] = 0.0038943;
		start[18] = 0.00079501;
		start[19] = 0.0013617;
		start[20] = 0.0072532;
		start[21] = 0.00058453;
		start[22] = 0.0059708;
		start[23] = 0.0096689;
		start[24] = 0.0085615;
		start[25] = 0.0049975;
		start[26] = 0.0018359;
		start[27] = 0.0045788;
		start[28] = 0.00044689;
		start[29] = 0.0055281;
		start[30] = 0.0092156;
		start[31] = 0.005603;
		start[32] = 0.005002;
		start[33] = 0.0070849;
		start[34] = 0.0093781;
		start[35] = 0.0012607;
		start[36] = 0.0096825;
		start[37] = 0.0049236;
		start[38] = 0.0019224;
		start[39] = 0.0059498;
		start[40] = 0.0077266;
		start[41] = 0.0055109;
		start[42] = 0.0017037;
		start[43] = 0.0079789;
		start[44] = 0.00076612;
		start[45] = 0.0087111;
		start[46] = 0.0053598;
		start[47] = 0.00062916;
		start[48] = 0.0021522;
		start[49] = 0.0066228;
		start[50] = 0.0022327;
		start[51] = 0.0064827;
		start[52] = 0.0011636;
		start[53] = 0.0011122;
		start[54] = 0.0087442;
		start[55] = 0.0031892;
		start[56] = 0.0098187;
		start[57] = 0.0097507;
		start[58] = 0.0040149;
		start[59] = 0.0096331;
		start[60] = 0.0011181;
		start[61] = 0.0032029;
		start[62] = 0.0099704;
		start[63] = 0.0066196;
		start[64] = 0.0040973;
		start[65] = 0.0021127;
		start[66] = 0.009534;
		start[67] = 0.005233;
		start[68] = 0.0093783;
		start[69] = 0.0044339;
		start[70] = 0.0008454;
		start[71] = 0.0023449;
		start[72] = 0.0075811;
		start[73] = 0.0043075;
		start[74] = 0.0060031;
		start[75] = 0.0054202;
		start[76] = 0.0071904;
		start[77] = 0.0053876;
		start[78] = 0.0076028;
		start[79] = 0.0096076;
		start[80] = 0.0056807;
		start[81] = 0.0039382;
		start[82] = 0.001022;
		start[83] = 0.0071799;
		start[84] = 0.0015053;
		start[85] = 0.0026024;
		start[86] = 0.0069982;
		start[87] = 0.0058242;
		start[88] = 0.0086702;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0034623;
		start[11] = 0.007793;
		start[12] = 0.0017801;
		start[13] = 0.0052857;
		start[14] = 0.0035687;
		start[15] = 0.0025736;
		start[16] = 0.007063;
		start[17] = 0.0076566;
		start[18] = 0.0059545;
		start[19] = 0.0045384;
		start[20] = 0.0097022;
		start[21] = 0.0082637;
		start[22] = 0.002;
		start[23] = 0.0037624;
		start[24] = 0.0043165;
		start[25] = 0.0091145;
		start[26] = 0.009642;
		start[27] = 0.0054859;
		start[28] = 0.0033995;
		start[29] = 0.0088479;
		start[30] = 0.0070115;
		start[31] = 0.0098346;
		start[32] = 0.009496;
		start[33] = 0.008163;
		start[34] = 0.0047874;
		start[35] = 0.0058816;
		start[36] = 0.0022709;
		start[37] = 0.0044805;
		start[38] = 0.0054919;
		start[39] = 0.006292;
		start[40] = 0.0053194;
		start[41] = 0.0054492;
		start[42] = 0.0053459;
		start[43] = 0.0025994;
		start[44] = 0.0016769;
		start[45] = 0.0073166;
		start[46] = 0.0064958;
		start[47] = 0.0078577;
		start[48] = 0.0019546;
		start[49] = 0.0039309;
		start[50] = 0.0022941;
		start[51] = 0.0097345;
		start[52] = 0.009803;
		start[53] = 0.009944;
		start[54] = 0.0064116;
		start[55] = 0.0078551;
		start[56] = 0.00035192;
		start[57] = 0.0031826;
		start[58] = 0.00088609;
		start[59] = 0.0060205;
		start[60] = 0.0041232;
		start[61] = 0.0067861;
		start[62] = 0.0035009;
		start[63] = 2.3502e-05;
		start[64] = 0.0099775;
		start[65] = 0.0094178;
		start[66] = 0.0058264;
		start[67] = 0.0037494;
		start[68] = 0.0039159;
		start[69] = 0.0056203;
		start[70] = 0.009791;
		start[71] = 0.006329;
		start[72] = 0.007843;
		start[73] = 0.0093897;
		start[74] = 0.0013614;
		start[75] = 0.0065494;
		start[76] = 0.0074932;
		start[77] = 0.0077562;
		start[78] = 0.00085693;
		start[79] = 0.0032918;
		start[80] = 0.0054044;
		start[81] = 0.005716;
		start[82] = 0.0087797;
		start[83] = 0.00035672;
		start[84] = 0.00011864;
		start[85] = 0.0019602;
		start[86] = 0.0036291;
		start[87] = 0.0014759;
		start[88] = 0.0016319;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.00061866;
		start[11] = 0.0035851;
		start[12] = 0.0098617;
		start[13] = 0.0073329;
		start[14] = 0.0073214;
		start[15] = 0.0079868;
		start[16] = 0.0081672;
		start[17] = 0.00647;
		start[18] = 0.0010304;
		start[19] = 0.0052623;
		start[20] = 0.0027739;
		start[21] = 0.0071464;
		start[22] = 0.0022848;
		start[23] = 0.0013645;
		start[24] = 0.0025844;
		start[25] = 0.0021995;
		start[26] = 0.0053846;
		start[27] = 0.0064015;
		start[28] = 0.0056133;
		start[29] = 0.0096171;
		start[30] = 0.0076286;
		start[31] = 0.00060806;
		start[32] = 0.0060798;
		start[33] = 0.0018471;
		start[34] = 0.0049447;
		start[35] = 0.0025032;
		start[36] = 0.0043245;
		start[37] = 0.0050627;
		start[38] = 0.00054206;
		start[39] = 0.0017961;
		start[40] = 0.0044038;
		start[41] = 0.0035962;
		start[42] = 0.0071526;
		start[43] = 0.0082718;
		start[44] = 0.008353;
		start[45] = 0.007669;
		start[46] = 0.0085391;
		start[47] = 0.0082584;
		start[48] = 0.0085799;
		start[49] = 0.0020861;
		start[50] = 0.0085853;
		start[51] = 0.00030763;
		start[52] = 0.00045986;
		start[53] = 0.0053783;
		start[54] = 0.0048943;
		start[55] = 0.0035882;
		start[56] = 0.0031415;
		start[57] = 0.0039134;
		start[58] = 0.002332;
		start[59] = 0.0064617;
		start[60] = 0.0015374;
		start[61] = 0.0034128;
		start[62] = 0.0085239;
		start[63] = 0.0091336;
		start[64] = 0.0099253;
		start[65] = 0.0033182;
		start[66] = 0.00059379;
		start[67] = 0.00048692;
		start[68] = 0.0034691;
		start[69] = 0.0018401;
		start[70] = 0.0090092;
		start[71] = 0.0057708;
		start[72] = 0.0022802;
		start[73] = 9.6759e-05;
		start[74] = 0.0064588;
		start[75] = 0.0072388;
		start[76] = 0.0031218;
		start[77] = 0.005806;
		start[78] = 0.0099945;
		start[79] = 0.000482;
		start[80] = 0.0027975;
		start[81] = 0.0036593;
		start[82] = 0.0035787;
		start[83] = 0.0038627;
		start[84] = 0.0069571;
		start[85] = 0.0073131;
		start[86] = 0.0040045;
		start[87] = 0.0068129;
		start[88] = 0.0098482;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0029169;
		start[11] = 0.0095322;
		start[12] = 0.0045901;
		start[13] = 0.0044901;
		start[14] = 0.0023973;
		start[15] = 0.0078344;
		start[16] = 0.0083945;
		start[17] = 0.0045725;
		start[18] = 0.004213;
		start[19] = 0.006414;
		start[20] = 0.0071519;
		start[21] = 0.0081434;
		start[22] = 0.00031511;
		start[23] = 0.0050308;
		start[24] = 0.0088021;
		start[25] = 0.0045569;
		start[26] = 0.0097917;
		start[27] = 0.0072273;
		start[28] = 0.0070155;
		start[29] = 0.0036997;
		start[30] = 0.0077231;
		start[31] = 0.00095638;
		start[32] = 0.0014458;
		start[33] = 0.00094105;
		start[34] = 0.0060363;
		start[35] = 0.0024721;
		start[36] = 0.0074337;
		start[37] = 0.0033665;
		start[38] = 0.0076035;
		start[39] = 0.0083136;
		start[40] = 0.0074963;
		start[41] = 0.0032259;
		start[42] = 0.0080563;
		start[43] = 0.0042863;
		start[44] = 0.0051032;
		start[45] = 0.0014325;
		start[46] = 0.0092519;
		start[47] = 0.004602;
		start[48] = 0.0026385;
		start[49] = 0.0079554;
		start[50] = 0.00059431;
		start[51] = 0.0015578;
		start[52] = 0.0063673;
		start[53] = 0.0054898;
		start[54] = 0.0087428;
		start[55] = 0.0020651;
		start[56] = 0.0013177;
		start[57] = 0.0071832;
		start[58] = 0.0028337;
		start[59] = 0.0069139;
		start[60] = 0.0019311;
		start[61] = 0.0060443;
		start[62] = 0.0063377;
		start[63] = 0.0052042;
		start[64] = 0.0030739;
		start[65] = 0.0034072;
		start[66] = 0.0006413;
		start[67] = 0.0066948;
		start[68] = 0.0069291;
		start[69] = 0.0039486;
		start[70] = 0.0051319;
		start[71] = 0.004862;
		start[72] = 0.00025501;
		start[73] = 0.0031685;
		start[74] = 0.0035596;
		start[75] = 0.0093294;
		start[76] = 0.0027318;
		start[77] = 0.0028471;
		start[78] = 0.003565;
		start[79] = 0.0020752;
		start[80] = 0.0084982;
		start[81] = 0.008673;
		start[82] = 0.0055602;
		start[83] = 0.0084092;
		start[84] = 0.0054455;
		start[85] = 0.0048386;
		start[86] = 0.0063702;
		start[87] = 0.0079203;
		start[88] = 0.0080366;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0043061;
		start[11] = 0.0068797;
		start[12] = 0.0030154;
		start[13] = 1.1391e-05;
		start[14] = 8.5126e-05;
		start[15] = 0.0093471;
		start[16] = 0.0011525;
		start[17] = 0.0025451;
		start[18] = 0.008709;
		start[19] = 0.0041381;
		start[20] = 0.0076395;
		start[21] = 0.0027466;
		start[22] = 0.0015767;
		start[23] = 0.0028423;
		start[24] = 0.0025024;
		start[25] = 0.0010252;
		start[26] = 0.003058;
		start[27] = 0.0039008;
		start[28] = 0.007067;
		start[29] = 0.0026601;
		start[30] = 0.0097298;
		start[31] = 0.0046599;
		start[32] = 0.0038947;
		start[33] = 0.0036622;
		start[34] = 0.0012177;
		start[35] = 0.0039779;
		start[36] = 0.0083877;
		start[37] = 0.0094823;
		start[38] = 0.0058144;
		start[39] = 0.0070359;
		start[40] = 0.0024484;
		start[41] = 0.0094523;
		start[42] = 0.002727;
		start[43] = 0.004877;
		start[44] = 0.0051233;
		start[45] = 0.0029738;
		start[46] = 0.0047357;
		start[47] = 9.6572e-05;
		start[48] = 0.0044546;
		start[49] = 0.0013469;
		start[50] = 0.0097626;
		start[51] = 0.0042376;
		start[52] = 0.0039499;
		start[53] = 0.0057061;
		start[54] = 0.00085431;
		start[55] = 0.0026069;
		start[56] = 0.00012221;
		start[57] = 0.006845;
		start[58] = 0.0069975;
		start[59] = 0.0031306;
		start[60] = 0.0064767;
		start[61] = 0.0057437;
		start[62] = 0.0089684;
		start[63] = 0.00023126;
		start[64] = 0.0043634;
		start[65] = 0.0096697;
		start[66] = 0.0074905;
		start[67] = 0.0051872;
		start[68] = 0.004322;
		start[69] = 0.009218;
		start[70] = 0.0031728;
		start[71] = 0.0032991;
		start[72] = 0.0041116;
		start[73] = 7.0608e-05;
		start[74] = 0.0022094;
		start[75] = 0.0018649;
		start[76] = 0.0019629;
		start[77] = 0.0027966;
		start[78] = 0.0072512;
		start[79] = 0.0031096;
		start[80] = 0.0020806;
		start[81] = 0.0019436;
		start[82] = 0.0062289;
		start[83] = 0.0036014;
		start[84] = 0.0071901;
		start[85] = 0.0040525;
		start[86] = 0.0093075;
		start[87] = 0.0098126;
		start[88] = 0.0013096;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0044075;
		start[11] = 0.0072464;
		start[12] = 0.004293;
		start[13] = 0.0013058;
		start[14] = 0.0073851;
		start[15] = 0.0085586;
		start[16] = 0.0085703;
		start[17] = 0.0059718;
		start[18] = 0.0082808;
		start[19] = 0.0034718;
		start[20] = 0.0069057;
		start[21] = 0.00096265;
		start[22] = 0.0033507;
		start[23] = 0.0076354;
		start[24] = 0.0027438;
		start[25] = 0.0063204;
		start[26] = 0.0099271;
		start[27] = 0.0057039;
		start[28] = 0.00022932;
		start[29] = 0.0070734;
		start[30] = 0.0018653;
		start[31] = 0.0011554;
		start[32] = 0.00038588;
		start[33] = 0.0059037;
		start[34] = 0.009583;
		start[35] = 0.0011897;
		start[36] = 0.0026287;
		start[37] = 0.0048795;
		start[38] = 0.0024511;
		start[39] = 0.0021009;
		start[40] = 0.0049133;
		start[41] = 0.0004999;
		start[42] = 0.0074746;
		start[43] = 0.005201;
		start[44] = 0.0040668;
		start[45] = 0.0058323;
		start[46] = 0.0086483;
		start[47] = 0.00031107;
		start[48] = 0.007925;
		start[49] = 0.002639;
		start[50] = 0.0056002;
		start[51] = 0.0078794;
		start[52] = 0.0015439;
		start[53] = 0.0081234;
		start[54] = 0.0068241;
		start[55] = 0.004828;
		start[56] = 0.00037236;
		start[57] = 0.0087689;
		start[58] = 0.0051228;
		start[59] = 0.0023761;
		start[60] = 0.00032904;
		start[61] = 0.0095079;
		start[62] = 0.0010614;
		start[63] = 0.0023091;
		start[64] = 0.003815;
		start[65] = 0.0085678;
		start[66] = 0.0016075;
		start[67] = 0.0052364;
		start[68] = 0.0073629;
		start[69] = 0.0085095;
		start[70] = 0.0031718;
		start[71] = 0.0054974;
		start[72] = 0.001605;
		start[73] = 0.0032723;
		start[74] = 0.0061411;
		start[75] = 0.0092761;
		start[76] = 0.0062681;
		start[77] = 0.0099882;
		start[78] = 0.00094108;
		start[79] = 0.00038309;
		start[80] = 0.00023138;
		start[81] = 0.0023155;
		start[82] = 0.0021424;
		start[83] = 0.0035317;
		start[84] = 0.0051575;
		start[85] = 0.0092724;
		start[86] = 0.0017903;
		start[87] = 0.0088202;
		start[88] = 0.0066808;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0091453;
		start[11] = 0.0057139;
		start[12] = 0.0096333;
		start[13] = 0.0037581;
		start[14] = 0.0051969;
		start[15] = 0.0019174;
		start[16] = 0.007332;
		start[17] = 0.004231;
		start[18] = 0.0050583;
		start[19] = 0.0048073;
		start[20] = 0.0076252;
		start[21] = 0.0055577;
		start[22] = 0.0038629;
		start[23] = 0.0076269;
		start[24] = 0.0019662;
		start[25] = 0.0024434;
		start[26] = 0.0072944;
		start[27] = 0.0034311;
		start[28] = 0.0047102;
		start[29] = 0.0041328;
		start[30] = 0.005346;
		start[31] = 0.0093646;
		start[32] = 0.0096682;
		start[33] = 0.0065038;
		start[34] = 0.0078677;
		start[35] = 0.0004911;
		start[36] = 0.0067831;
		start[37] = 0.0020683;
		start[38] = 0.0038599;
		start[39] = 0.0085271;
		start[40] = 0.0028607;
		start[41] = 0.005288;
		start[42] = 0.0037879;
		start[43] = 0.0094908;
		start[44] = 0.0035582;
		start[45] = 0.0022045;
		start[46] = 0.0027647;
		start[47] = 0.0070898;
		start[48] = 0.0044711;
		start[49] = 0.0073153;
		start[50] = 0.00084472;
		start[51] = 0.0084145;
		start[52] = 0.0028558;
		start[53] = 6.5348e-05;
		start[54] = 0.0075699;
		start[55] = 0.0032733;
		start[56] = 2.2379e-05;
		start[57] = 0.0016206;
		start[58] = 0.0088591;
		start[59] = 0.0066597;
		start[60] = 0.0021608;
		start[61] = 0.0060315;
		start[62] = 0.0073988;
		start[63] = 0.0095538;
		start[64] = 0.0034156;
		start[65] = 0.0079747;
		start[66] = 0.0019222;
		start[67] = 0.005872;
		start[68] = 0.0089534;
		start[69] = 0.0092618;
		start[70] = 0.006087;
		start[71] = 0.0061275;
		start[72] = 0.0081228;
		start[73] = 0.0094868;
		start[74] = 0.0079137;
		start[75] = 0.0088504;
		start[76] = 0.0034781;
		start[77] = 0.0090266;
		start[78] = 0.0068575;
		start[79] = 0.0085289;
		start[80] = 0.0066194;
		start[81] = 0.0064353;
		start[82] = 0.0041934;
		start[83] = 0.0063202;
		start[84] = 0.0010146;
		start[85] = 0.0015222;
		start[86] = 0.0040891;
		start[87] = 0.0021364;
		start[88] = 0.0072154;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0021543;
		start[11] = 0.0003322;
		start[12] = 0.0033116;
		start[13] = 0.0029484;
		start[14] = 0.0020245;
		start[15] = 0.0023419;
		start[16] = 0.0049174;
		start[17] = 0.006649;
		start[18] = 0.0024901;
		start[19] = 0.0014092;
		start[20] = 0.0054371;
		start[21] = 0.0010036;
		start[22] = 0.002438;
		start[23] = 0.00071545;
		start[24] = 0.0061475;
		start[25] = 0.00078961;
		start[26] = 0.0052333;
		start[27] = 0.0049487;
		start[28] = 0.0014894;
		start[29] = 0.0030902;
		start[30] = 0.0018029;
		start[31] = 0.0093997;
		start[32] = 0.0083298;
		start[33] = 0.0064039;
		start[34] = 0.0068188;
		start[35] = 0.0063869;
		start[36] = 0.00094085;
		start[37] = 0.0013466;
		start[38] = 0.0031978;
		start[39] = 0.0022741;
		start[40] = 0.0086793;
		start[41] = 0.0021862;
		start[42] = 0.0023144;
		start[43] = 0.0056655;
		start[44] = 0.0067474;
		start[45] = 0.00018175;
		start[46] = 0.009549;
		start[47] = 0.0081876;
		start[48] = 0.0014684;
		start[49] = 0.0017257;
		start[50] = 0.0043552;
		start[51] = 0.00075002;
		start[52] = 0.008992;
		start[53] = 0.0022733;
		start[54] = 0.0067815;
		start[55] = 0.0082975;
		start[56] = 0.0077541;
		start[57] = 0.008246;
		start[58] = 0.0067343;
		start[59] = 0.0061491;
		start[60] = 0.0067246;
		start[61] = 0.0031984;
		start[62] = 0.0043663;
		start[63] = 0.003408;
		start[64] = 0.0010057;
		start[65] = 0.0011778;
		start[66] = 0.0056771;
		start[67] = 0.0050184;
		start[68] = 0.0040504;
		start[69] = 0.00063136;
		start[70] = 0.00076365;
		start[71] = 0.001316;
		start[72] = 0.0082706;
		start[73] = 0.00072642;
		start[74] = 0.0019873;
		start[75] = 0.0045046;
		start[76] = 0.0098847;
		start[77] = 0.0066693;
		start[78] = 0.0045156;
		start[79] = 0.00063303;
		start[80] = 0.0063043;
		start[81] = 0.0018541;
		start[82] = 0.00061048;
		start[83] = 0.0076973;
		start[84] = 0.0021169;
		start[85] = 0.0067767;
		start[86] = 0.0077354;
		start[87] = 0.0075879;
		start[88] = 0.0091127;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.009017;
		start[11] = 0.0058597;
		start[12] = 0.0044799;
		start[13] = 0.0084033;
		start[14] = 0.0093047;
		start[15] = 0.0091239;
		start[16] = 0.0039114;
		start[17] = 0.0083872;
		start[18] = 0.0040299;
		start[19] = 0.00018386;
		start[20] = 0.0041611;
		start[21] = 0.0057312;
		start[22] = 0.0018976;
		start[23] = 0.0075358;
		start[24] = 0.0041541;
		start[25] = 0.004875;
		start[26] = 0.0062318;
		start[27] = 0.0080756;
		start[28] = 0.0015509;
		start[29] = 0.0099718;
		start[30] = 0.0039052;
		start[31] = 0.0054357;
		start[32] = 0.0057723;
		start[33] = 0.0040605;
		start[34] = 0.0026731;
		start[35] = 0.0062703;
		start[36] = 0.0071423;
		start[37] = 0.0031617;
		start[38] = 0.0013759;
		start[39] = 0.0029936;
		start[40] = 0.0037774;
		start[41] = 0.0070392;
		start[42] = 0.0010013;
		start[43] = 0.0040391;
		start[44] = 0.0071305;
		start[45] = 0.006963;
		start[46] = 0.00028191;
		start[47] = 0.00072888;
		start[48] = 0.0058923;
		start[49] = 0.0027338;
		start[50] = 0.0011173;
		start[51] = 0.0017066;
		start[52] = 0.0062792;
		start[53] = 0.0026556;
		start[54] = 0.0018466;
		start[55] = 0.0039046;
		start[56] = 0.0075;
		start[57] = 0.0092775;
		start[58] = 0.0093453;
		start[59] = 0.0045897;
		start[60] = 0.0031897;
		start[61] = 0.0011069;
		start[62] = 0.00050394;
		start[63] = 0.0087907;
		start[64] = 0.0054417;
		start[65] = 0.0059697;
		start[66] = 0.009541;
		start[67] = 0.0036428;
		start[68] = 0.0010093;
		start[69] = 0.0079885;
		start[70] = 0.0022338;
		start[71] = 0.00048873;
		start[72] = 0.0079242;
		start[73] = 0.0070842;
		start[74] = 0.0058636;
		start[75] = 0.0041897;
		start[76] = 0.0073662;
		start[77] = 0.0077857;
		start[78] = 0.0017875;
		start[79] = 0.005251;
		start[80] = 0.0016969;
		start[81] = 9.0941e-05;
		start[82] = 0.0093744;
		start[83] = 0.0015287;
		start[84] = 0.0097519;
		start[85] = 0.0049891;
		start[86] = 0.0094188;
		start[87] = 0.0078065;
		start[88] = 0.0067087;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0031417;
		start[11] = 0.0035184;
		start[12] = 0.0033506;
		start[13] = 0.0040756;
		start[14] = 0.0016635;
		start[15] = 0.0017861;
		start[16] = 0.0036575;
		start[17] = 0.0048234;
		start[18] = 0.0062203;
		start[19] = 0.0086829;
		start[20] = 0.0019663;
		start[21] = 0.0084833;
		start[22] = 0.0066269;
		start[23] = 0.0063154;
		start[24] = 0.0042241;
		start[25] = 0.0095897;
		start[26] = 0.0051654;
		start[27] = 0.0078549;
		start[28] = 0.0016064;
		start[29] = 0.0088471;
		start[30] = 0.0081734;
		start[31] = 0.0038516;
		start[32] = 0.0083542;
		start[33] = 0.0085619;
		start[34] = 0.0022705;
		start[35] = 0.0062559;
		start[36] = 0.0098064;
		start[37] = 0.0039904;
		start[38] = 0.0066904;
		start[39] = 0.0077702;
		start[40] = 0.0057182;
		start[41] = 0.0046522;
		start[42] = 0.0085157;
		start[43] = 0.0035603;
		start[44] = 0.0043971;
		start[45] = 0.0045777;
		start[46] = 0.0052328;
		start[47] = 0.0060043;
		start[48] = 0.0080463;
		start[49] = 0.00026861;
		start[50] = 0.004042;
		start[51] = 0.0031408;
		start[52] = 0.0059092;
		start[53] = 0.0031621;
		start[54] = 0.0029356;
		start[55] = 0.0034693;
		start[56] = 0.0068094;
		start[57] = 0.006337;
		start[58] = 0.0013182;
		start[59] = 0.0071854;
		start[60] = 0.005679;
		start[61] = 0.0098791;
		start[62] = 0.0080681;
		start[63] = 0.0081585;
		start[64] = 0.0042239;
		start[65] = 0.0092468;
		start[66] = 0.002648;
		start[67] = 0.0094456;
		start[68] = 0.0095791;
		start[69] = 0.0029582;
		start[70] = 0.0096309;
		start[71] = 0.0090135;
		start[72] = 0.0020418;
		start[73] = 0.0076052;
		start[74] = 0.0042653;
		start[75] = 0.0028766;
		start[76] = 4.5726e-05;
		start[77] = 0.0052479;
		start[78] = 0.0087213;
		start[79] = 0.0022169;
		start[80] = 0.0039289;
		start[81] = 0.0062288;
		start[82] = 0.00057811;
		start[83] = 0.0019056;
		start[84] = 0.0016855;
		start[85] = 0.0045456;
		start[86] = 0.0010297;
		start[87] = 0.0062837;
		start[88] = 0.0094272;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0087863;
		start[11] = 0.0041445;
		start[12] = 0.009858;
		start[13] = 0.0019982;
		start[14] = 0.0013196;
		start[15] = 0.0058138;
		start[16] = 0.00065438;
		start[17] = 0.0095599;
		start[18] = 0.0053115;
		start[19] = 0.0049845;
		start[20] = 0.0044336;
		start[21] = 0.0091142;
		start[22] = 0.0012082;
		start[23] = 0.0058334;
		start[24] = 0.0029522;
		start[25] = 0.0076491;
		start[26] = 1.4179e-06;
		start[27] = 0.0097993;
		start[28] = 0.004681;
		start[29] = 0.00088917;
		start[30] = 0.0075515;
		start[31] = 0.0054914;
		start[32] = 0.0088576;
		start[33] = 0.0026698;
		start[34] = 0.0091942;
		start[35] = 0.002678;
		start[36] = 0.0098003;
		start[37] = 0.00083953;
		start[38] = 0.00097339;
		start[39] = 0.0065518;
		start[40] = 0.0087274;
		start[41] = 0.002321;
		start[42] = 0.0055879;
		start[43] = 0.0099545;
		start[44] = 0.0024585;
		start[45] = 0.0028022;
		start[46] = 0.0028465;
		start[47] = 0.00045907;
		start[48] = 0.0078407;
		start[49] = 0.0010639;
		start[50] = 0.0083649;
		start[51] = 0.0077282;
		start[52] = 0.006474;
		start[53] = 0.0076892;
		start[54] = 0.0011052;
		start[55] = 0.0025357;
		start[56] = 0.0026404;
		start[57] = 0.0054054;
		start[58] = 0.003784;
		start[59] = 0.00088944;
		start[60] = 0.0070192;
		start[61] = 0.0037348;
		start[62] = 0.006085;
		start[63] = 0.0032629;
		start[64] = 0.0054213;
		start[65] = 0.0076872;
		start[66] = 0.0041334;
		start[67] = 0.0027203;
		start[68] = 0.0021329;
		start[69] = 0.0046636;
		start[70] = 0.0061752;
		start[71] = 0.0051043;
		start[72] = 0.0028011;
		start[73] = 0.0036658;
		start[74] = 0.008223;
		start[75] = 0.0095538;
		start[76] = 0.0009967;
		start[77] = 0.0043117;
		start[78] = 0.0091445;
		start[79] = 0.0085673;
		start[80] = 0.0076764;
		start[81] = 0.00050341;
		start[82] = 0.0091488;
		start[83] = 0.0031027;
		start[84] = 0.001866;
		start[85] = 0.0065529;
		start[86] = 0.0080387;
		start[87] = 0.0071087;
		start[88] = 0.0086354;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0018096;
		start[11] = 0.00050548;
		start[12] = 0.0072575;
		start[13] = 0.0077947;
		start[14] = 0.0026714;
		start[15] = 0.0059151;
		start[16] = 0.0018157;
		start[17] = 0.0065892;
		start[18] = 0.0042913;
		start[19] = 0.0097256;
		start[20] = 0.0042197;
		start[21] = 0.0022467;
		start[22] = 0.0080789;
		start[23] = 0.006127;
		start[24] = 0.00014259;
		start[25] = 0.0075635;
		start[26] = 0.0024593;
		start[27] = 0.0058643;
		start[28] = 0.0040125;
		start[29] = 0.0015627;
		start[30] = 0.0069849;
		start[31] = 0.008263;
		start[32] = 0.00106;
		start[33] = 0.0023576;
		start[34] = 0.0065684;
		start[35] = 0.0070718;
		start[36] = 0.0029322;
		start[37] = 0.002705;
		start[38] = 0.0032928;
		start[39] = 0.0047374;
		start[40] = 0.002671;
		start[41] = 0.0058551;
		start[42] = 0.008962;
		start[43] = 0.008912;
		start[44] = 0.0029448;
		start[45] = 0.0022864;
		start[46] = 0.0089242;
		start[47] = 0.0055111;
		start[48] = 0.0037582;
		start[49] = 0.0037168;
		start[50] = 0.009051;
		start[51] = 0.0019467;
		start[52] = 0.0028191;
		start[53] = 0.0064972;
		start[54] = 0.0051793;
		start[55] = 0.0086993;
		start[56] = 0.0049514;
		start[57] = 0.0063316;
		start[58] = 0.0043984;
		start[59] = 0.0082716;
		start[60] = 0.0034605;
		start[61] = 0.0043081;
		start[62] = 0.0008871;
		start[63] = 0.0060452;
		start[64] = 0.0030231;
		start[65] = 0.0047143;
		start[66] = 0.0034172;
		start[67] = 0.0066163;
		start[68] = 0.00037808;
		start[69] = 0.0087483;
		start[70] = 0.0058922;
		start[71] = 0.0083669;
		start[72] = 0.0068701;
		start[73] = 0.0020656;
		start[74] = 0.00048868;
		start[75] = 0.0041196;
		start[76] = 0.0034842;
		start[77] = 3.1244e-05;
		start[78] = 0.0015713;
		start[79] = 0.0076074;
		start[80] = 0.0027584;
		start[81] = 0.0069464;
		start[82] = 0.0018289;
		start[83] = 0.004189;
		start[84] = 0.0089079;
		start[85] = 0.0034714;
		start[86] = 0.0098763;
		start[87] = 0.0047547;
		start[88] = 0.0046665;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.008386;
		start[11] = 0.0072232;
		start[12] = 0.0092677;
		start[13] = 0.0053584;
		start[14] = 0.0077045;
		start[15] = 0.0077469;
		start[16] = 0.0075625;
		start[17] = 0.0061471;
		start[18] = 0.0083588;
		start[19] = 0.0027637;
		start[20] = 0.0046773;
		start[21] = 0.0034231;
		start[22] = 0.0051047;
		start[23] = 0.0090433;
		start[24] = 0.0054474;
		start[25] = 0.0038492;
		start[26] = 0.0097342;
		start[27] = 6.4208e-05;
		start[28] = 0.002421;
		start[29] = 0.001606;
		start[30] = 0.0051735;
		start[31] = 0.0079088;
		start[32] = 0.0033404;
		start[33] = 0.0028632;
		start[34] = 0.0024294;
		start[35] = 0.0095934;
		start[36] = 0.0089794;
		start[37] = 0.0096234;
		start[38] = 0.007516;
		start[39] = 0.0046563;
		start[40] = 5.6656e-06;
		start[41] = 0.0031436;
		start[42] = 0.0015065;
		start[43] = 0.0098434;
		start[44] = 0.0088801;
		start[45] = 0.0085139;
		start[46] = 0.0084704;
		start[47] = 0.0029702;
		start[48] = 0.0090958;
		start[49] = 0.0029924;
		start[50] = 0.0075019;
		start[51] = 0.0057432;
		start[52] = 0.0067935;
		start[53] = 0.0022115;
		start[54] = 0.0038766;
		start[55] = 0.0088907;
		start[56] = 0.00070121;
		start[57] = 0.0031522;
		start[58] = 0.00082311;
		start[59] = 0.0052378;
		start[60] = 0.0040737;
		start[61] = 0.0025856;
		start[62] = 8.3579e-05;
		start[63] = 0.00464;
		start[64] = 0.0014616;
		start[65] = 0.0022452;
		start[66] = 0.00035858;
		start[67] = 0.0094254;
		start[68] = 0.0033392;
		start[69] = 0.008607;
		start[70] = 3.1275e-06;
		start[71] = 0.0026347;
		start[72] = 0.00035981;
		start[73] = 0.0078798;
		start[74] = 0.0054057;
		start[75] = 0.0036846;
		start[76] = 0.00046442;
		start[77] = 0.0050978;
		start[78] = 0.00901;
		start[79] = 0.0057314;
		start[80] = 3.3095e-05;
		start[81] = 0.00038659;
		start[82] = 0.0029549;
		start[83] = 0.0090774;
		start[84] = 0.0018701;
		start[85] = 0.0038789;
		start[86] = 0.0046467;
		start[87] = 0.0069429;
		start[88] = 0.0024698;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0083557;
		start[11] = 0.0040073;
		start[12] = 0.00578;
		start[13] = 0.0015406;
		start[14] = 0.004217;
		start[15] = 0.0057062;
		start[16] = 0.0050578;
		start[17] = 0.0084837;
		start[18] = 0.007718;
		start[19] = 0.0091435;
		start[20] = 0.005143;
		start[21] = 0.0049816;
		start[22] = 0.0036425;
		start[23] = 0.0067503;
		start[24] = 0.0028498;
		start[25] = 0.0036969;
		start[26] = 0.0049338;
		start[27] = 0.0062868;
		start[28] = 0.0048726;
		start[29] = 0.0050903;
		start[30] = 0.00713;
		start[31] = 0.0051377;
		start[32] = 0.0092349;
		start[33] = 0.001391;
		start[34] = 0.0089853;
		start[35] = 0.0090197;
		start[36] = 0.0062481;
		start[37] = 0.0089446;
		start[38] = 0.0071399;
		start[39] = 0.0097107;
		start[40] = 0.0038011;
		start[41] = 0.0079513;
		start[42] = 0.0035899;
		start[43] = 0.0080983;
		start[44] = 0.0078779;
		start[45] = 0.00025221;
		start[46] = 0.0022783;
		start[47] = 0.0096979;
		start[48] = 0.0066387;
		start[49] = 0.0022839;
		start[50] = 0.0012761;
		start[51] = 0.007338;
		start[52] = 0.0065109;
		start[53] = 0.0034047;
		start[54] = 0.0020078;
		start[55] = 0.0054104;
		start[56] = 0.0055005;
		start[57] = 0.0032168;
		start[58] = 0.00056162;
		start[59] = 0.0063525;
		start[60] = 0.0069145;
		start[61] = 0.0016876;
		start[62] = 0.0053468;
		start[63] = 0.009786;
		start[64] = 0.0031948;
		start[65] = 0.0009678;
		start[66] = 0.0024159;
		start[67] = 0.0042037;
		start[68] = 0.0025036;
		start[69] = 0.0023563;
		start[70] = 0.007977;
		start[71] = 0.0082792;
		start[72] = 0.0059879;
		start[73] = 0.0015092;
		start[74] = 0.0050956;
		start[75] = 0.0017909;
		start[76] = 0.0050754;
		start[77] = 0.0073814;
		start[78] = 0.0032216;
		start[79] = 0.0083103;
		start[80] = 0.0065315;
		start[81] = 0.0067779;
		start[82] = 0.0097965;
		start[83] = 0.00036269;
		start[84] = 0.0032969;
		start[85] = 0.0013666;
		start[86] = 0.0034332;
		start[87] = 0.00040237;
		start[88] = 0.0025266;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0058567;
		start[11] = 0.0061436;
		start[12] = 0.0093764;
		start[13] = 0.0057762;
		start[14] = 0.00288;
		start[15] = 7.5992e-06;
		start[16] = 0.0073931;
		start[17] = 0.0014094;
		start[18] = 0.0086389;
		start[19] = 0.00094116;
		start[20] = 0.0056187;
		start[21] = 0.00033031;
		start[22] = 0.0072002;
		start[23] = 0.0030139;
		start[24] = 0.0096913;
		start[25] = 0.00843;
		start[26] = 0.00081226;
		start[27] = 0.0058465;
		start[28] = 0.0037635;
		start[29] = 0.0020968;
		start[30] = 0.004664;
		start[31] = 0.0029224;
		start[32] = 0.0058993;
		start[33] = 0.0048399;
		start[34] = 0.0090104;
		start[35] = 0.0026264;
		start[36] = 0.0068595;
		start[37] = 0.0095124;
		start[38] = 0.0030854;
		start[39] = 0.00312;
		start[40] = 0.0067467;
		start[41] = 0.0094282;
		start[42] = 0.0011783;
		start[43] = 0.0087975;
		start[44] = 0.0070451;
		start[45] = 0.0093062;
		start[46] = 0.004136;
		start[47] = 0.0011932;
		start[48] = 0.0015249;
		start[49] = 0.0051555;
		start[50] = 0.0068268;
		start[51] = 0.0036371;
		start[52] = 0.0086252;
		start[53] = 0.0035202;
		start[54] = 0.0014749;
		start[55] = 0.0092011;
		start[56] = 0.0097179;
		start[57] = 0.0015766;
		start[58] = 0.0098787;
		start[59] = 0.0010413;
		start[60] = 0.0065348;
		start[61] = 0.0053235;
		start[62] = 9.4553e-05;
		start[63] = 0.0088058;
		start[64] = 0.0012763;
		start[65] = 0.0033276;
		start[66] = 0.0031029;
		start[67] = 0.0013252;
		start[68] = 0.0092303;
		start[69] = 0.003202;
		start[70] = 0.0076791;
		start[71] = 0.00063127;
		start[72] = 0.0012062;
		start[73] = 0.0018317;
		start[74] = 0.0094713;
		start[75] = 0.0019397;
		start[76] = 0.0059581;
		start[77] = 0.0083526;
		start[78] = 0.0058791;
		start[79] = 0.0037472;
		start[80] = 0.0092756;
		start[81] = 0.008664;
		start[82] = 0.0079199;
		start[83] = 0.0046073;
		start[84] = 0.0094637;
		start[85] = 0.0049992;
		start[86] = 0.000199;
		start[87] = 0.0030117;
		start[88] = 0.0092827;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0023826;
		start[11] = 0.0025895;
		start[12] = 0.0060154;
		start[13] = 0.0033619;
		start[14] = 0.0047407;
		start[15] = 0.0053036;
		start[16] = 0.001441;
		start[17] = 0.0077206;
		start[18] = 0.0068889;
		start[19] = 0.0087466;
		start[20] = 0.0082012;
		start[21] = 0.0043076;
		start[22] = 0.0013761;
		start[23] = 0.0062833;
		start[24] = 0.0089922;
		start[25] = 0.0077253;
		start[26] = 0.0089612;
		start[27] = 0.0097335;
		start[28] = 0.0023022;
		start[29] = 0.0097287;
		start[30] = 0.0015121;
		start[31] = 0.0091408;
		start[32] = 0.0030405;
		start[33] = 0.0088749;
		start[34] = 0.00087665;
		start[35] = 0.0082514;
		start[36] = 0.0031367;
		start[37] = 0.0062899;
		start[38] = 0.0046744;
		start[39] = 0.0089877;
		start[40] = 0.0085666;
		start[41] = 0.00038155;
		start[42] = 0.0077392;
		start[43] = 0.0047275;
		start[44] = 0.0016011;
		start[45] = 0.0073328;
		start[46] = 0.00048081;
		start[47] = 0.0096417;
		start[48] = 0.0059357;
		start[49] = 0.0059547;
		start[50] = 0.00065886;
		start[51] = 0.0040044;
		start[52] = 0.0078504;
		start[53] = 0.0085408;
		start[54] = 0.0034652;
		start[55] = 0.0079045;
		start[56] = 0.0089445;
		start[57] = 0.0086664;
		start[58] = 0.0069043;
		start[59] = 0.0038648;
		start[60] = 0.0023301;
		start[61] = 0.0076453;
		start[62] = 0.0025466;
		start[63] = 1.0167e-05;
		start[64] = 0.0031914;
		start[65] = 0.0088747;
		start[66] = 0.0092672;
		start[67] = 0.0046136;
		start[68] = 0.0060557;
		start[69] = 0.0032586;
		start[70] = 0.0062576;
		start[71] = 0.0058356;
		start[72] = 0.00012449;
		start[73] = 0.0001801;
		start[74] = 0.0057241;
		start[75] = 0.0019473;
		start[76] = 0.0042853;
		start[77] = 0.0083043;
		start[78] = 0.0084155;
		start[79] = 0.0047517;
		start[80] = 0.0028404;
		start[81] = 0.0046808;
		start[82] = 0.00039351;
		start[83] = 0.00019148;
		start[84] = 0.0041057;
		start[85] = 0.0080952;
		start[86] = 0.0028318;
		start[87] = 0.0045101;
		start[88] = 0.0028069;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0098083;
		start[11] = 0.0030268;
		start[12] = 0.0081516;
		start[13] = 0.00081561;
		start[14] = 0.0089506;
		start[15] = 0.0025061;
		start[16] = 0.0025357;
		start[17] = 0.0068481;
		start[18] = 0.0056899;
		start[19] = 0.0021376;
		start[20] = 0.009201;
		start[21] = 0.0015637;
		start[22] = 0.0034721;
		start[23] = 0.0083921;
		start[24] = 0.0032841;
		start[25] = 0.0047846;
		start[26] = 0.0062638;
		start[27] = 0.0037341;
		start[28] = 0.0074558;
		start[29] = 0.009063;
		start[30] = 0.0098172;
		start[31] = 0.0086411;
		start[32] = 0.0090499;
		start[33] = 0.00065046;
		start[34] = 0.0082676;
		start[35] = 0.0019985;
		start[36] = 0.0091768;
		start[37] = 0.0044525;
		start[38] = 0.0057434;
		start[39] = 0.0016251;
		start[40] = 0.0038244;
		start[41] = 0.0067861;
		start[42] = 0.0091461;
		start[43] = 0.0017001;
		start[44] = 0.0090905;
		start[45] = 0.0062652;
		start[46] = 0.0040882;
		start[47] = 0.0015343;
		start[48] = 0.0093966;
		start[49] = 0.0072538;
		start[50] = 0.0072331;
		start[51] = 0.0084251;
		start[52] = 0.0070105;
		start[53] = 0.0006588;
		start[54] = 0.0025086;
		start[55] = 0.0003528;
		start[56] = 0.00083663;
		start[57] = 0.0080198;
		start[58] = 0.00059098;
		start[59] = 0.0063627;
		start[60] = 0.0075153;
		start[61] = 0.0073171;
		start[62] = 0.0006923;
		start[63] = 0.0092263;
		start[64] = 0.00043835;
		start[65] = 0.0048573;
		start[66] = 0.0089586;
		start[67] = 0.0061237;
		start[68] = 0.0035516;
		start[69] = 0.004364;
		start[70] = 0.0084918;
		start[71] = 0.00081206;
		start[72] = 0.0015921;
		start[73] = 0.0089031;
		start[74] = 0.0066474;
		start[75] = 0.0023662;
		start[76] = 0.0079894;
		start[77] = 0.0073568;
		start[78] = 0.0053209;
		start[79] = 0.00092207;
		start[80] = 0.00087742;
		start[81] = 0.0050639;
		start[82] = 0.0011097;
		start[83] = 0.0085361;
		start[84] = 0.0073093;
		start[85] = 0.0095473;
		start[86] = 0.0053866;
		start[87] = 0.0089184;
		start[88] = 0.0087339;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0056463;
		start[11] = 0.0044674;
		start[12] = 0.0038643;
		start[13] = 0.0097641;
		start[14] = 0.0049776;
		start[15] = 0.0048851;
		start[16] = 0.0084883;
		start[17] = 0.0062906;
		start[18] = 0.0098699;
		start[19] = 0.001391;
		start[20] = 7.1807e-05;
		start[21] = 0.0064307;
		start[22] = 0.0019413;
		start[23] = 0.0038909;
		start[24] = 0.0092186;
		start[25] = 0.0028737;
		start[26] = 0.0076943;
		start[27] = 0.0037365;
		start[28] = 0.0011401;
		start[29] = 0.0017392;
		start[30] = 0.0028737;
		start[31] = 0.0028382;
		start[32] = 0.0094043;
		start[33] = 0.0050824;
		start[34] = 0.0098315;
		start[35] = 0.0023449;
		start[36] = 0.0093335;
		start[37] = 0.0027527;
		start[38] = 0.0071588;
		start[39] = 0.0068174;
		start[40] = 0.0014344;
		start[41] = 0.0064298;
		start[42] = 0.001827;
		start[43] = 0.0036654;
		start[44] = 0.0026522;
		start[45] = 0.0024325;
		start[46] = 0.0099665;
		start[47] = 0.0091769;
		start[48] = 0.0076719;
		start[49] = 0.0064757;
		start[50] = 0.0099176;
		start[51] = 0.00094731;
		start[52] = 0.0016467;
		start[53] = 0.0077987;
		start[54] = 0.0036752;
		start[55] = 0.00071538;
		start[56] = 0.0039618;
		start[57] = 0.00041862;
		start[58] = 0.0085232;
		start[59] = 0.00304;
		start[60] = 0.005948;
		start[61] = 0.0028979;
		start[62] = 0.0030944;
		start[63] = 0.0056446;
		start[64] = 0.0022092;
		start[65] = 0.0066808;
		start[66] = 0.0060512;
		start[67] = 0.0079309;
		start[68] = 0.00047156;
		start[69] = 0.0012122;
		start[70] = 0.0059924;
		start[71] = 0.0056609;
		start[72] = 0.0035847;
		start[73] = 0.007654;
		start[74] = 0.005844;
		start[75] = 0.0021561;
		start[76] = 0.0099557;
		start[77] = 0.0032427;
		start[78] = 0.0062005;
		start[79] = 0.0073447;
		start[80] = 0.0063699;
		start[81] = 0.0065364;
		start[82] = 0.0058946;
		start[83] = 0.0032518;
		start[84] = 0.00051012;
		start[85] = 0.0087384;
		start[86] = 0.0067627;
		start[87] = 0.0094971;
		start[88] = 0.0013216;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0015944;
		start[11] = 0.0036461;
		start[12] = 0.009931;
		start[13] = 0.0019218;
		start[14] = 0.0041998;
		start[15] = 0.0077449;
		start[16] = 0.0042758;
		start[17] = 0.0067098;
		start[18] = 0.009789;
		start[19] = 0.0011081;
		start[20] = 0.0085121;
		start[21] = 0.00036262;
		start[22] = 0.0033355;
		start[23] = 0.006926;
		start[24] = 0.00093941;
		start[25] = 0.0088286;
		start[26] = 0.0047095;
		start[27] = 0.0072266;
		start[28] = 0.0068202;
		start[29] = 0.00031289;
		start[30] = 6.5848e-05;
		start[31] = 0.0030916;
		start[32] = 0.0094542;
		start[33] = 0.0094027;
		start[34] = 0.0064252;
		start[35] = 0.0055337;
		start[36] = 0.0066368;
		start[37] = 0.0091555;
		start[38] = 0.00065838;
		start[39] = 0.0039845;
		start[40] = 0.0016469;
		start[41] = 0.006126;
		start[42] = 0.00903;
		start[43] = 0.0068903;
		start[44] = 0.0045038;
		start[45] = 0.0031954;
		start[46] = 0.003541;
		start[47] = 0.001924;
		start[48] = 0.0018223;
		start[49] = 0.0021011;
		start[50] = 0.0038909;
		start[51] = 0.0095712;
		start[52] = 0.0023304;
		start[53] = 0.0049544;
		start[54] = 0.0015603;
		start[55] = 0.0041947;
		start[56] = 0.0085581;
		start[57] = 4.4125e-05;
		start[58] = 0.00097839;
		start[59] = 0.0093311;
		start[60] = 0.0029134;
		start[61] = 0.00976;
		start[62] = 0.0046837;
		start[63] = 0.0092048;
		start[64] = 0.0088142;
		start[65] = 0.0042048;
		start[66] = 0.0076253;
		start[67] = 0.0042298;
		start[68] = 0.0019765;
		start[69] = 0.0088734;
		start[70] = 0.0035496;
		start[71] = 0.0090794;
		start[72] = 0.0048774;
		start[73] = 0.00023923;
		start[74] = 0.0036764;
		start[75] = 0.0065889;
		start[76] = 0.0038366;
		start[77] = 0.0019382;
		start[78] = 0.0051094;
		start[79] = 0.008647;
		start[80] = 0.0045094;
		start[81] = 0.0038051;
		start[82] = 0.0066233;
		start[83] = 0.0048611;
		start[84] = 0.0056137;
		start[85] = 0.00066562;
		start[86] = 0.0094159;
		start[87] = 0.0052;
		start[88] = 0.0076574;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0015063;
		start[11] = 0.0073925;
		start[12] = 0.002329;
		start[13] = 0.0048552;
		start[14] = 0.0017732;
		start[15] = 0.0077404;
		start[16] = 0.0025437;
		start[17] = 0.0040211;
		start[18] = 0.0021161;
		start[19] = 0.0024834;
		start[20] = 0.00026694;
		start[21] = 0.00042037;
		start[22] = 0.00099081;
		start[23] = 0.0040651;
		start[24] = 0.001037;
		start[25] = 0.0048451;
		start[26] = 0.0036607;
		start[27] = 0.0024905;
		start[28] = 0.0024443;
		start[29] = 0.0084247;
		start[30] = 0.00012682;
		start[31] = 0.0099152;
		start[32] = 0.00098827;
		start[33] = 0.0098141;
		start[34] = 0.0056444;
		start[35] = 0.0093901;
		start[36] = 0.0015293;
		start[37] = 0.0052386;
		start[38] = 0.0057738;
		start[39] = 0.00010201;
		start[40] = 0.0064146;
		start[41] = 0.0090073;
		start[42] = 0.0056313;
		start[43] = 0.0054118;
		start[44] = 0.0088389;
		start[45] = 0.0073639;
		start[46] = 0.0010632;
		start[47] = 0.0092866;
		start[48] = 0.00097904;
		start[49] = 0.0092891;
		start[50] = 0.0047215;
		start[51] = 0.0022542;
		start[52] = 0.0098755;
		start[53] = 0.0019777;
		start[54] = 0.0023078;
		start[55] = 0.0070427;
		start[56] = 0.0054968;
		start[57] = 0.0052434;
		start[58] = 0.006648;
		start[59] = 0.0026928;
		start[60] = 0.0048361;
		start[61] = 0.0046159;
		start[62] = 0.0023018;
		start[63] = 0.0064983;
		start[64] = 0.0032437;
		start[65] = 0.0070573;
		start[66] = 0.0042263;
		start[67] = 0.0095513;
		start[68] = 0.0041547;
		start[69] = 0.0076329;
		start[70] = 0.0062731;
		start[71] = 0.0089512;
		start[72] = 0.0084551;
		start[73] = 0.0025689;
		start[74] = 0.0055395;
		start[75] = 0.0099679;
		start[76] = 0.007758;
		start[77] = 0.00088191;
		start[78] = 0.0054805;
		start[79] = 0.0091849;
		start[80] = 0.0041624;
		start[81] = 0.00015398;
		start[82] = 0.0092287;
		start[83] = 0.0047073;
		start[84] = 0.0095348;
		start[85] = 0.0015527;
		start[86] = 0.00095005;
		start[87] = 0.0021076;
		start[88] = 0.0041126;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0007607;
		start[11] = 0.0011973;
		start[12] = 0.0017782;
		start[13] = 0.0098409;
		start[14] = 0.0062273;
		start[15] = 0.0033937;
		start[16] = 0.0084653;
		start[17] = 0.0087145;
		start[18] = 0.0085259;
		start[19] = 0.0027347;
		start[20] = 0.0059825;
		start[21] = 0.0049333;
		start[22] = 0.0074804;
		start[23] = 0.0022285;
		start[24] = 0.0082888;
		start[25] = 0.0047752;
		start[26] = 0.0084072;
		start[27] = 8.3955e-05;
		start[28] = 0.0012034;
		start[29] = 0.0046872;
		start[30] = 0.00059009;
		start[31] = 0.0054362;
		start[32] = 0.0028734;
		start[33] = 0.0054264;
		start[34] = 0.0079601;
		start[35] = 0.0048919;
		start[36] = 0.0032175;
		start[37] = 0.0036676;
		start[38] = 0.0053162;
		start[39] = 0.0042101;
		start[40] = 0.00094873;
		start[41] = 0.0034496;
		start[42] = 0.00089673;
		start[43] = 0.008359;
		start[44] = 0.0063958;
		start[45] = 0.0049502;
		start[46] = 0.0099566;
		start[47] = 0.0088535;
		start[48] = 0.0017123;
		start[49] = 0.00078192;
		start[50] = 0.0063369;
		start[51] = 0.0022407;
		start[52] = 0.0092027;
		start[53] = 0.0055738;
		start[54] = 0.0084568;
		start[55] = 0.0050153;
		start[56] = 0.0079587;
		start[57] = 0.0016037;
		start[58] = 0.0065229;
		start[59] = 0.00069256;
		start[60] = 0.0065116;
		start[61] = 0.0051372;
		start[62] = 0.00331;
		start[63] = 0.0044415;
		start[64] = 0.0041479;
		start[65] = 0.00094467;
		start[66] = 0.0033361;
		start[67] = 0.00095002;
		start[68] = 0.00060988;
		start[69] = 0.0088743;
		start[70] = 7.1151e-05;
		start[71] = 0.0062169;
		start[72] = 0.0050743;
		start[73] = 0.0061872;
		start[74] = 0.0089656;
		start[75] = 0.0084224;
		start[76] = 0.0013604;
		start[77] = 0.0044725;
		start[78] = 0.0034151;
		start[79] = 0.0099633;
		start[80] = 0.0098426;
		start[81] = 0.0042163;
		start[82] = 0.0085812;
		start[83] = 0.0093682;
		start[84] = 0.0045166;
		start[85] = 0.0014212;
		start[86] = 0.0076464;
		start[87] = 0.0074783;
		start[88] = 0.0083265;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0073528;
		start[11] = 0.0019904;
		start[12] = 0.007227;
		start[13] = 0.0056365;
		start[14] = 0.0038106;
		start[15] = 0.0091728;
		start[16] = 0.0023041;
		start[17] = 0.0093289;
		start[18] = 0.0058766;
		start[19] = 0.0050459;
		start[20] = 0.0040256;
		start[21] = 0.0066784;
		start[22] = 0.0024607;
		start[23] = 0.0034713;
		start[24] = 0.0061273;
		start[25] = 0.0077309;
		start[26] = 0.0043158;
		start[27] = 0.0037529;
		start[28] = 0.0022742;
		start[29] = 0.0027128;
		start[30] = 0.0057972;
		start[31] = 0.0083438;
		start[32] = 0.0046592;
		start[33] = 0.0034703;
		start[34] = 0.0074151;
		start[35] = 0.0052269;
		start[36] = 0.0047709;
		start[37] = 0.0048687;
		start[38] = 0.0019885;
		start[39] = 0.0078384;
		start[40] = 0.0016588;
		start[41] = 0.0079456;
		start[42] = 0.0050489;
		start[43] = 0.006671;
		start[44] = 0.0042787;
		start[45] = 0.0010057;
		start[46] = 0.0037866;
		start[47] = 0.00096442;
		start[48] = 0.0091171;
		start[49] = 0.0095497;
		start[50] = 0.0016772;
		start[51] = 0.0036149;
		start[52] = 0.0058135;
		start[53] = 0.0022867;
		start[54] = 0.0080471;
		start[55] = 0.0038658;
		start[56] = 0.0089941;
		start[57] = 0.0014507;
		start[58] = 0.0064129;
		start[59] = 0.0054141;
		start[60] = 0.0074518;
		start[61] = 0.0083814;
		start[62] = 0.0095087;
		start[63] = 0.0024572;
		start[64] = 0.0073639;
		start[65] = 0.0026259;
		start[66] = 0.001771;
		start[67] = 0.00453;
		start[68] = 0.0073559;
		start[69] = 0.0088002;
		start[70] = 0.00077612;
		start[71] = 0.0057556;
		start[72] = 0.0031841;
		start[73] = 0.0079363;
		start[74] = 0.0036896;
		start[75] = 0.00030356;
		start[76] = 0.0096428;
		start[77] = 0.0090877;
		start[78] = 0.0094165;
		start[79] = 0.0078738;
		start[80] = 0.0079031;
		start[81] = 0.0039711;
		start[82] = 0.0022552;
		start[83] = 0.0013747;
		start[84] = 0.0030605;
		start[85] = 0.0076395;
		start[86] = 0.00054061;
		start[87] = 0.0012423;
		start[88] = 0.0022602;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0003183;
		start[11] = 0.0044704;
		start[12] = 0.0054525;
		start[13] = 0.0024383;
		start[14] = 0.0047237;
		start[15] = 0.0054717;
		start[16] = 0.0075412;
		start[17] = 0.0072074;
		start[18] = 0.0063674;
		start[19] = 0.0044515;
		start[20] = 0.0054826;
		start[21] = 0.0020977;
		start[22] = 0.00068294;
		start[23] = 0.0012948;
		start[24] = 0.0033891;
		start[25] = 0.0045154;
		start[26] = 0.0031405;
		start[27] = 0.00098132;
		start[28] = 0.0075094;
		start[29] = 0.0034963;
		start[30] = 0.0096884;
		start[31] = 0.0094108;
		start[32] = 0.0087841;
		start[33] = 0.0017699;
		start[34] = 0.0028614;
		start[35] = 0.0052165;
		start[36] = 0.0096232;
		start[37] = 0.0076706;
		start[38] = 0.0052794;
		start[39] = 0.0065578;
		start[40] = 0.003819;
		start[41] = 0.0056735;
		start[42] = 0.0088141;
		start[43] = 0.0050119;
		start[44] = 0.0046633;
		start[45] = 0.0046579;
		start[46] = 0.0078818;
		start[47] = 0.0046392;
		start[48] = 0.0041324;
		start[49] = 0.0084273;
		start[50] = 0.0038511;
		start[51] = 0.0088017;
		start[52] = 0.0074374;
		start[53] = 0.0075048;
		start[54] = 0.0052759;
		start[55] = 0.0048901;
		start[56] = 0.001427;
		start[57] = 0.0096545;
		start[58] = 0.0088666;
		start[59] = 0.0053634;
		start[60] = 0.0092496;
		start[61] = 0.0073419;
		start[62] = 0.0042324;
		start[63] = 0.00016824;
		start[64] = 0.0034668;
		start[65] = 0.0017559;
		start[66] = 0.0034518;
		start[67] = 0.0068711;
		start[68] = 0.0033924;
		start[69] = 0.0017778;
		start[70] = 0.0056472;
		start[71] = 0.007658;
		start[72] = 0.0053686;
		start[73] = 0.0006072;
		start[74] = 0.0095088;
		start[75] = 0.00058975;
		start[76] = 0.0048195;
		start[77] = 0.0076594;
		start[78] = 0.0021331;
		start[79] = 0.0043588;
		start[80] = 0.0092868;
		start[81] = 0.00041673;
		start[82] = 0.0039627;
		start[83] = 0.0026685;
		start[84] = 0.007753;
		start[85] = 0.0097633;
		start[86] = 0.0088768;
		start[87] = 0.0010951;
		start[88] = 0.0054945;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0066086;
		start[11] = 0.0016855;
		start[12] = 0.0042641;
		start[13] = 0.0022102;
		start[14] = 0.0064425;
		start[15] = 0.0010325;
		start[16] = 0.0074029;
		start[17] = 0.0011341;
		start[18] = 0.0010398;
		start[19] = 0.0090754;
		start[20] = 0.0052032;
		start[21] = 0.0056499;
		start[22] = 0.0047655;
		start[23] = 0.0074031;
		start[24] = 0.0045085;
		start[25] = 0.0085741;
		start[26] = 0.003649;
		start[27] = 0.00054356;
		start[28] = 0.0093411;
		start[29] = 0.0050655;
		start[30] = 0.0093532;
		start[31] = 0.0034881;
		start[32] = 0.006739;
		start[33] = 0.00011008;
		start[34] = 0.0067772;
		start[35] = 0.0090513;
		start[36] = 0.0024948;
		start[37] = 0.0037557;
		start[38] = 0.0033589;
		start[39] = 0.00059386;
		start[40] = 0.0014688;
		start[41] = 0.0028035;
		start[42] = 0.0013328;
		start[43] = 0.0090593;
		start[44] = 0.0012447;
		start[45] = 0.0075408;
		start[46] = 0.0006712;
		start[47] = 0.00076737;
		start[48] = 0.002881;
		start[49] = 0.0022438;
		start[50] = 0.0039223;
		start[51] = 0.005377;
		start[52] = 0.0049135;
		start[53] = 0.0026556;
		start[54] = 0.0093939;
		start[55] = 0.00426;
		start[56] = 0.0038456;
		start[57] = 0.0073653;
		start[58] = 0.0035852;
		start[59] = 0.0036896;
		start[60] = 0.0055676;
		start[61] = 0.0094596;
		start[62] = 0.0065916;
		start[63] = 0.0063609;
		start[64] = 0.0067373;
		start[65] = 0.0047044;
		start[66] = 0.0050169;
		start[67] = 0.0031352;
		start[68] = 0.0012648;
		start[69] = 0.0037729;
		start[70] = 0.0046268;
		start[71] = 0.0094171;
		start[72] = 0.0012517;
		start[73] = 0.001555;
		start[74] = 0.0010703;
		start[75] = 0.0081344;
		start[76] = 0.0054456;
		start[77] = 0.0041155;
		start[78] = 0.0034378;
		start[79] = 0.0074802;
		start[80] = 0.0023869;
		start[81] = 0.00033741;
		start[82] = 0.0012659;
		start[83] = 0.0081845;
		start[84] = 0.0013502;
		start[85] = 0.007116;
		start[86] = 0.0065582;
		start[87] = 0.0033959;
		start[88] = 0.0077119;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (89);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0072221;
		start[11] = 0.00081465;
		start[12] = 0.0079949;
		start[13] = 0.0005319;
		start[14] = 0.0041539;
		start[15] = 0.0083508;
		start[16] = 0.0097623;
		start[17] = 0.0066536;
		start[18] = 0.004833;
		start[19] = 0.0074503;
		start[20] = 0.0030811;
		start[21] = 0.007455;
		start[22] = 0.0029961;
		start[23] = 0.0034918;
		start[24] = 0.0027708;
		start[25] = 0.0024894;
		start[26] = 0.0077707;
		start[27] = 0.0022995;
		start[28] = 0.006439;
		start[29] = 0.008827;
		start[30] = 0.0076298;
		start[31] = 0.0087186;
		start[32] = 0.0041859;
		start[33] = 0.0026529;
		start[34] = 0.0002752;
		start[35] = 0.00887;
		start[36] = 0.0089739;
		start[37] = 0.0083626;
		start[38] = 0.0045818;
		start[39] = 0.0093598;
		start[40] = 0.00017145;
		start[41] = 0.00060028;
		start[42] = 0.0050087;
		start[43] = 0.0089617;
		start[44] = 0.0015568;
		start[45] = 0.0022853;
		start[46] = 0.0095981;
		start[47] = 0.0027161;
		start[48] = 0.0063647;
		start[49] = 0.0063788;
		start[50] = 0.0048368;
		start[51] = 0.0061041;
		start[52] = 0.0094276;
		start[53] = 0.0065642;
		start[54] = 0.0008313;
		start[55] = 0.0046886;
		start[56] = 0.002747;
		start[57] = 0.0057346;
		start[58] = 0.0039202;
		start[59] = 0.0060984;
		start[60] = 0.0022397;
		start[61] = 0.0098399;
		start[62] = 0.0027838;
		start[63] = 0.0090544;
		start[64] = 0.0096811;
		start[65] = 0.0055735;
		start[66] = 0.0092428;
		start[67] = 0.0013464;
		start[68] = 0.0017631;
		start[69] = 0.0078044;
		start[70] = 0.00037547;
		start[71] = 0.00032687;
		start[72] = 0.00067454;
		start[73] = 0.0059325;
		start[74] = 0.0073529;
		start[75] = 0.0055255;
		start[76] = 0.0046622;
		start[77] = 0.0034363;
		start[78] = 0.0049854;
		start[79] = 0.0028377;
		start[80] = 0.0057562;
		start[81] = 0.0015474;
		start[82] = 0.0081136;
		start[83] = 0.0091288;
		start[84] = 0.00084887;
		start[85] = 0.0047132;
		start[86] = 0.0071771;
		start[87] = 0.0093928;
		start[88] = 0.0016289;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}


  return 0;
}
