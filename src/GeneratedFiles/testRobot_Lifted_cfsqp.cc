// compile command: 
// g++ -ggdb3 -I/usr/include/log4cxx `pkg-config --cflags roboptim-core` src/generatedFiles/@FUNCTION_NAME@.cc `pkg-config --libs roboptim-core` -o bin/@FUNCTION_NAME@
#include <iostream>
#include <vector>
#include <boost/mpl/vector.hpp>
#include <boost/make_shared.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/timer/timer.hpp>
#include <boost/math/constants/constants.hpp>
#include <roboptim/core/differentiable-function.hh>
#include <roboptim/core/linear-function.hh>
#include <roboptim/core/function/constant.hh>
#include <roboptim/core/solver.hh>
#include <roboptim/core/solver-factory.hh>
#include <roboptim/core/result.hh>

typedef roboptim::Solver <
  roboptim::GenericDifferentiableFunction< roboptim::EigenMatrixDense>,
  boost::mpl::vector<
    roboptim::GenericLinearFunction<roboptim::EigenMatrixDense>,
    roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense>
    >
  >
  solver_t;

static const double pi = boost::math::constants::pi<double>();


template <typename T>
class CostFunction : public roboptim::GenericLinearFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericLinearFunction<T>);
  
  explicit CostFunction (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
CostFunction<T>::CostFunction (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericLinearFunction<T>
    (96, 1, "CostFunction_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
CostFunction<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.0;
}

template <typename T>
void
CostFunction<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_1 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_1 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_1<T>::LiftConstraint_1 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_1_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_1<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = cos(q_07) - 1.0*w_01_01;
}

template <typename T>
void
LiftConstraint_1<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = -1.0*sin(q_07); 
			 grad[7] = -1.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_2 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_2 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_2<T>::LiftConstraint_2 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_2_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_2<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = sin(q_07) - 1.0*w_01_02;
}

template <typename T>
void
LiftConstraint_2<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = cos(q_07); 
			 grad[7] = 0.0; 
			 grad[8] = -1.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_3 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_3 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_3<T>::LiftConstraint_3 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_3_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_3<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = cos(q_06) - 1.0*w_01_03;
}

template <typename T>
void
LiftConstraint_3<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = -1.0*sin(q_06); 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = -1.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_4 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_4 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_4<T>::LiftConstraint_4 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_4_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_4<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = sin(q_02) - 1.0*w_01_04;
}

template <typename T>
void
LiftConstraint_4<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = cos(q_02); 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = -1.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_5 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_5 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_5<T>::LiftConstraint_5 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_5_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_5<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = cos(q_01) - 1.0*w_01_05;
}

template <typename T>
void
LiftConstraint_5<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = -1.0*sin(q_01); 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = -1.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_6 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_6 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_6<T>::LiftConstraint_6 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_6_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_6<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = sin(q_06) - 1.0*w_01_06;
}

template <typename T>
void
LiftConstraint_6<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = cos(q_06); 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = -1.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_7 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_7 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_7<T>::LiftConstraint_7 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_7_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_7<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = cos(q_05) - 1.0*w_01_07;
}

template <typename T>
void
LiftConstraint_7<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = -1.0*sin(q_05); 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = -1.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_8 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_8 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_8<T>::LiftConstraint_8 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_8_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_8<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = sin(q_01) - 1.0*w_01_08;
}

template <typename T>
void
LiftConstraint_8<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = cos(q_01); 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = -1.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_9 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_9 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_9<T>::LiftConstraint_9 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_9_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_9<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = sin(q_05) - 1.0*w_01_09;
}

template <typename T>
void
LiftConstraint_9<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = cos(q_05); 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = -1.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_10 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_10 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_10<T>::LiftConstraint_10 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_10_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_10<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = cos(q_02) - 1.0*w_01_10;
}

template <typename T>
void
LiftConstraint_10<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = -1.0*sin(q_02); 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = -1.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_11 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_11 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_11<T>::LiftConstraint_11 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_11_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_11<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = cos(q_04) - 1.0*w_01_11;
}

template <typename T>
void
LiftConstraint_11<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = -1.0*sin(q_04); 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = -1.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_12 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_12 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_12<T>::LiftConstraint_12 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_12_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_12<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = sin(q_03 - 1.5707963267948966192313216916398) - 1.0*w_01_12;
}

template <typename T>
void
LiftConstraint_12<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = cos(q_03 - 1.5707963267948966192313216916398); 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = -1.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_13 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_13 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_13<T>::LiftConstraint_13 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_13_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_13<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = sin(q_04) - 1.0*w_01_13;
}

template <typename T>
void
LiftConstraint_13<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = cos(q_04); 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = -1.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_14 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_14 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_14<T>::LiftConstraint_14 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_14_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_14<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = cos(q_03 - 1.5707963267948966192313216916398) - 1.0*w_01_14;
}

template <typename T>
void
LiftConstraint_14<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = -1.0*sin(q_03 - 1.5707963267948966192313216916398); 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = -1.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_15 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_15 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_15<T>::LiftConstraint_15 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_15_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_15<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_05*w_01_10 - 1.0*w_02_01;
}

template <typename T>
void
LiftConstraint_15<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = w_01_10; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = w_01_05; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = -1.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_16 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_16 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_16<T>::LiftConstraint_16 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_16_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_16<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_03*(w_01_04 + 3.7493994566546433353612919702563e-33) - 1.0*w_02_02;
}

template <typename T>
void
LiftConstraint_16<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = w_01_04 + 3.7493994566546433353612919702563e-33; 
			 grad[10] = w_01_03; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = -1.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_17 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_17 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_17<T>::LiftConstraint_17 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_17_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_17<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_06*(w_01_04 + 3.7493994566546433353612919702563e-33) - 1.0*w_02_03;
}

template <typename T>
void
LiftConstraint_17<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_01_06; 
			 grad[11] = 0.0; 
			 grad[12] = w_01_04 + 3.7493994566546433353612919702563e-33; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = -1.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_18 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_18 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_18<T>::LiftConstraint_18 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_18_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_18<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_04*w_01_05 - 1.0*w_02_04;
}

template <typename T>
void
LiftConstraint_18<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.00000000000000006123233995736766035868820147292*w_01_05; 
			 grad[11] = 0.00000000000000006123233995736766035868820147292*w_01_04; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = -1.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_19 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_19 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_19<T>::LiftConstraint_19 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_19_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_19<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_08*w_01_10 - 1.0*w_02_05;
}

template <typename T>
void
LiftConstraint_19<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = w_01_10; 
			 grad[15] = 0.0; 
			 grad[16] = w_01_08; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = -1.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_20 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_20 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_20<T>::LiftConstraint_20 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_20_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_20<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_04*w_01_08 - 1.0*w_02_06;
}

template <typename T>
void
LiftConstraint_20<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.00000000000000006123233995736766035868820147292*w_01_08; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.00000000000000006123233995736766035868820147292*w_01_04; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = -1.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_21 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_21 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_21<T>::LiftConstraint_21 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_21_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_21<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_10*w_01_12 - 1.0*w_02_07;
}

template <typename T>
void
LiftConstraint_21<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = w_01_12; 
			 grad[17] = 0.0; 
			 grad[18] = w_01_10; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = -1.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_22 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_22 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_22<T>::LiftConstraint_22 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_22_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_22<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_04*w_01_14 - 1.0*w_02_08;
}

template <typename T>
void
LiftConstraint_22<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.00000000000000006123233995736766035868820147292*w_01_04; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = -1.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_23 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_23 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_23<T>::LiftConstraint_23 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_23_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_23<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_05*w_01_14 - 1.0*w_02_09;
}

template <typename T>
void
LiftConstraint_23<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = w_01_14; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = w_01_05; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = -1.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_24 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_24 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_24<T>::LiftConstraint_24 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_24_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_24<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_08*w_01_14 - 1.0*w_02_10;
}

template <typename T>
void
LiftConstraint_24<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = w_01_14; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = w_01_08; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = -1.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_25 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_25 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_25<T>::LiftConstraint_25 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_25_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_25<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_05*w_01_10 - 1.0*w_02_11;
}

template <typename T>
void
LiftConstraint_25<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.00000000000000006123233995736766035868820147292*w_01_10; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.00000000000000006123233995736766035868820147292*w_01_05; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = -1.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_26 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_26 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_26<T>::LiftConstraint_26 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_26_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_26<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_08*w_01_10 - 1.0*w_02_12;
}

template <typename T>
void
LiftConstraint_26<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.00000000000000006123233995736766035868820147292*w_01_10; 
			 grad[15] = 0.0; 
			 grad[16] = 0.00000000000000006123233995736766035868820147292*w_01_08; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = -1.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_27 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_27 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_27<T>::LiftConstraint_27 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_27_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_27<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_04*w_01_05 - 1.0*w_02_13;
}

template <typename T>
void
LiftConstraint_27<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_01_05; 
			 grad[11] = w_01_04; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = -1.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_28 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_28 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_28<T>::LiftConstraint_28 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_28_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_28<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_04*w_01_08 - 1.0*w_02_14;
}

template <typename T>
void
LiftConstraint_28<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = w_01_08; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = w_01_04; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = -1.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_29 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_29 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_29<T>::LiftConstraint_29 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_29_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_29<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_10*w_01_14 - 1.0*w_02_15;
}

template <typename T>
void
LiftConstraint_29<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = w_01_14; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = w_01_10; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = -1.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_30 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_30 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_30<T>::LiftConstraint_30 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_30_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_30<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_04*w_01_12 - 1.0*w_02_16;
}

template <typename T>
void
LiftConstraint_30<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.00000000000000006123233995736766035868820147292*w_01_04; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = -1.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_31 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_31 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_31<T>::LiftConstraint_31 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_31_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_31<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_05*w_01_12 - 1.0*w_02_17;
}

template <typename T>
void
LiftConstraint_31<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = w_01_12; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = w_01_05; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = -1.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_32 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_32 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_32<T>::LiftConstraint_32 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_32_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_32<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_08*w_01_12 - 1.0*w_02_18;
}

template <typename T>
void
LiftConstraint_32<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = w_01_12; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = w_01_08; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = -1.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_33 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_33 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_33<T>::LiftConstraint_33 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_33_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_33<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_03_01 - 1.0*w_01_03*(w_02_04 - 0.00000000000000006123233995736766035868820147292*w_01_05 + w_02_05);
}

template <typename T>
void
LiftConstraint_33<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.00000000000000006123233995736766035868820147292*w_01_05 - 1.0*w_02_04 - 1.0*w_02_05; 
			 grad[10] = 0.0; 
			 grad[11] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = -1.0*w_01_03; 
			 grad[25] = -1.0*w_01_03; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = -1.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_34 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_34 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_34<T>::LiftConstraint_34 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_34_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_34<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_03_02 - 1.0*w_01_06*(w_02_04 - 0.00000000000000006123233995736766035868820147292*w_01_05 + w_02_05);
}

template <typename T>
void
LiftConstraint_34<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[12] = 0.00000000000000006123233995736766035868820147292*w_01_05 - 1.0*w_02_04 - 1.0*w_02_05; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = -1.0*w_01_06; 
			 grad[25] = -1.0*w_01_06; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = -1.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_35 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_35 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_35<T>::LiftConstraint_35 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_35_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_35<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_03*(0.00000000000000006123233995736766035868820147292*w_01_08 + w_02_01 - 1.0*w_02_06) - 1.0*w_03_03;
}

template <typename T>
void
LiftConstraint_35<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.00000000000000006123233995736766035868820147292*w_01_08 + w_02_01 - 1.0*w_02_06; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = w_01_03; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = -1.0*w_01_03; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = -1.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_36 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_36 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_36<T>::LiftConstraint_36 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_36_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_36<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_06*(0.00000000000000006123233995736766035868820147292*w_01_08 + w_02_01 - 1.0*w_02_06) - 1.0*w_03_04;
}

template <typename T>
void
LiftConstraint_36<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.00000000000000006123233995736766035868820147292*w_01_08 + w_02_01 - 1.0*w_02_06; 
			 grad[13] = 0.0; 
			 grad[14] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = w_01_06; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = -1.0*w_01_06; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = -1.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_37 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_37 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_37<T>::LiftConstraint_37 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_37_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_37<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_11*(w_02_07 - 0.00000000000000006123233995736766035868820147292*w_01_14 + w_02_08) - 1.0*w_03_05;
}

template <typename T>
void
LiftConstraint_37<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = w_02_07 - 0.00000000000000006123233995736766035868820147292*w_01_14 + w_02_08; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = -0.00000000000000006123233995736766035868820147292*w_01_11; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = w_01_11; 
			 grad[28] = w_01_11; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = -1.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_38 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_38 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_38<T>::LiftConstraint_38 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_38_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_38<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_12*(w_02_11 - 1.0*w_02_14) - 1.0*w_03_06;
}

template <typename T>
void
LiftConstraint_38<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = w_02_11 - 1.0*w_02_14; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = w_01_12; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = -1.0*w_01_12; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = -1.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_39 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_39 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_39<T>::LiftConstraint_39 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_39_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_39<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_03_07 - 0.00000000000000006123233995736766035868820147292*w_01_14*(w_02_04 + w_02_05);
}

template <typename T>
void
LiftConstraint_39<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = - 0.00000000000000006123233995736766035868820147292*w_02_04 - 0.00000000000000006123233995736766035868820147292*w_02_05; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = -0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[25] = -0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = -1.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_40 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_40 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_40<T>::LiftConstraint_40 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_40_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_40<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_12*(w_02_12 + w_02_13) - 1.0*w_03_08;
}

template <typename T>
void
LiftConstraint_40<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = w_02_12 + w_02_13; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = w_01_12; 
			 grad[33] = w_01_12; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = -1.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_41 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_41 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_41<T>::LiftConstraint_41 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_41_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_41<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_14*(w_02_01 - 1.0*w_02_06) - 1.0*w_03_09;
}

template <typename T>
void
LiftConstraint_41<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.00000000000000006123233995736766035868820147292*w_02_01 - 0.00000000000000006123233995736766035868820147292*w_02_06; 
			 grad[21] = 0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = -0.00000000000000006123233995736766035868820147292*w_01_14; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = -1.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_42 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_42 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_42<T>::LiftConstraint_42 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_42_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_42<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_03_10 - 1.0*w_01_13*(0.00000000000000006123233995736766035868820147292*w_01_12 + w_02_15 - 1.0*w_02_16);
}

template <typename T>
void
LiftConstraint_42<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = -0.00000000000000006123233995736766035868820147292*w_01_13; 
			 grad[19] = w_02_16 - 1.0*w_02_15 - 0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = -1.0*w_01_13; 
			 grad[36] = w_01_13; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = -1.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_43 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_43 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_43<T>::LiftConstraint_43 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_43_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_43<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_03_11 - 1.0*w_01_11*(0.00000000000000006123233995736766035868820147292*w_01_12 + w_02_15 - 1.0*w_02_16);
}

template <typename T>
void
LiftConstraint_43<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = w_02_16 - 1.0*w_02_15 - 0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[18] = -0.00000000000000006123233995736766035868820147292*w_01_11; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = -1.0*w_01_11; 
			 grad[36] = w_01_11; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = -1.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_44 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_44 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_44<T>::LiftConstraint_44 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_44_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_44<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_13*(w_02_07 - 0.00000000000000006123233995736766035868820147292*w_01_14 + w_02_08) - 1.0*w_03_12;
}

template <typename T>
void
LiftConstraint_44<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = w_02_07 - 0.00000000000000006123233995736766035868820147292*w_01_14 + w_02_08; 
			 grad[20] = -0.00000000000000006123233995736766035868820147292*w_01_13; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = w_01_13; 
			 grad[28] = w_01_13; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = -1.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_45 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_45 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_45<T>::LiftConstraint_45 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_45_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_45<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_14*(w_02_11 - 1.0*w_02_14) - 1.0*w_03_13;
}

template <typename T>
void
LiftConstraint_45<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = w_02_11 - 1.0*w_02_14; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = w_01_14; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = -1.0*w_01_14; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = -1.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_46 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_46 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_46<T>::LiftConstraint_46 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_46_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_46<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_14*(w_02_12 + w_02_13) - 1.0*w_03_14;
}

template <typename T>
void
LiftConstraint_46<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = w_02_12 + w_02_13; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = w_01_14; 
			 grad[33] = w_01_14; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = -1.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_47 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_47 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_47<T>::LiftConstraint_47 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_47_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_47<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_03_15 - 0.00000000000000006123233995736766035868820147292*w_01_12*(w_02_04 + w_02_05);
}

template <typename T>
void
LiftConstraint_47<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = - 0.00000000000000006123233995736766035868820147292*w_02_04 - 0.00000000000000006123233995736766035868820147292*w_02_05; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = -0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[25] = -0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = -1.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_48 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_48 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_48<T>::LiftConstraint_48 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_48_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_48<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_12*(w_02_01 - 1.0*w_02_06) - 1.0*w_03_16;
}

template <typename T>
void
LiftConstraint_48<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.00000000000000006123233995736766035868820147292*w_02_01 - 0.00000000000000006123233995736766035868820147292*w_02_06; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = -0.00000000000000006123233995736766035868820147292*w_01_12; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = -1.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_49 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_49 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_49<T>::LiftConstraint_49 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_49_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_49<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_07*(w_03_05 - 1.0*w_03_10) - 1.0*w_04_01;
}

template <typename T>
void
LiftConstraint_49<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_03_05 - 1.0*w_03_10; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = w_01_07; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = -1.0*w_01_07; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = -1.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_50 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_50 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_50<T>::LiftConstraint_50 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_50_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_50<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_09*(w_03_11 + w_03_12) - 1.0*w_04_02;
}

template <typename T>
void
LiftConstraint_50<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = w_03_11 + w_03_12; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = w_01_09; 
			 grad[50] = w_01_09; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = -1.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_51 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_51 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_51<T>::LiftConstraint_51 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_51_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_51<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_07*(w_03_11 + w_03_12) - 1.0*w_04_03;
}

template <typename T>
void
LiftConstraint_51<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_03_11 + w_03_12; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = w_01_07; 
			 grad[50] = w_01_07; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = -1.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_52 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_52 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_52<T>::LiftConstraint_52 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_52_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_52<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_09*(w_03_05 - 1.0*w_03_10) - 1.0*w_04_04;
}

template <typename T>
void
LiftConstraint_52<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = w_03_05 - 1.0*w_03_10; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = w_01_09; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = -1.0*w_01_09; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = -1.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_53 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_53 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_53<T>::LiftConstraint_53 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_53_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_53<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_04_05 - 1.0*w_01_11*(w_02_09 + w_03_06 - 1.0*w_03_07);
}

template <typename T>
void
LiftConstraint_53<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = w_03_07 - 1.0*w_03_06 - 1.0*w_02_09; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = -1.0*w_01_11; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = -1.0*w_01_11; 
			 grad[45] = w_01_11; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = -1.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_54 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_54 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_54<T>::LiftConstraint_54 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_54_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_54<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_04_06 - 1.0*w_01_11*(w_02_10 + w_03_08 - 1.0*w_03_09);
}

template <typename T>
void
LiftConstraint_54<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = w_03_09 - 1.0*w_03_08 - 1.0*w_02_10; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = -1.0*w_01_11; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = -1.0*w_01_11; 
			 grad[47] = w_01_11; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = -1.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_55 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_55 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_55<T>::LiftConstraint_55 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_55_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_55<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_13*(w_03_13 - 1.0*w_02_17 + w_03_15) - 1.0*w_04_07;
}

template <typename T>
void
LiftConstraint_55<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = w_03_13 - 1.0*w_02_17 + w_03_15; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = -1.0*w_01_13; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = w_01_13; 
			 grad[52] = 0.0; 
			 grad[53] = w_01_13; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = -1.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_56 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_56 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_56<T>::LiftConstraint_56 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_56_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_56<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_11*(w_03_13 - 1.0*w_02_17 + w_03_15) - 1.0*w_04_08;
}

template <typename T>
void
LiftConstraint_56<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = w_03_13 - 1.0*w_02_17 + w_03_15; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = -1.0*w_01_11; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = w_01_11; 
			 grad[52] = 0.0; 
			 grad[53] = w_01_11; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = -1.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_57 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_57 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_57<T>::LiftConstraint_57 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_57_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_57<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_04_09 - 1.0*w_01_13*(w_02_09 + w_03_06 - 1.0*w_03_07);
}

template <typename T>
void
LiftConstraint_57<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = w_03_07 - 1.0*w_03_06 - 1.0*w_02_09; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = -1.0*w_01_13; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = -1.0*w_01_13; 
			 grad[45] = w_01_13; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = -1.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_58 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_58 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_58<T>::LiftConstraint_58 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_58_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_58<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_13*(w_03_14 - 1.0*w_02_18 + w_03_16) - 1.0*w_04_10;
}

template <typename T>
void
LiftConstraint_58<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = w_03_14 - 1.0*w_02_18 + w_03_16; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = -1.0*w_01_13; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = w_01_13; 
			 grad[53] = 0.0; 
			 grad[54] = w_01_13; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = -1.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_59 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_59 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_59<T>::LiftConstraint_59 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_59_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_59<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_11*(w_03_14 - 1.0*w_02_18 + w_03_16) - 1.0*w_04_11;
}

template <typename T>
void
LiftConstraint_59<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = w_03_14 - 1.0*w_02_18 + w_03_16; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = -1.0*w_01_11; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = w_01_11; 
			 grad[53] = 0.0; 
			 grad[54] = w_01_11; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = -1.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_60 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_60 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_60<T>::LiftConstraint_60 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_60_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_60<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_04_12 - 1.0*w_01_13*(w_02_10 + w_03_08 - 1.0*w_03_09);
}

template <typename T>
void
LiftConstraint_60<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = w_03_09 - 1.0*w_03_08 - 1.0*w_02_10; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = -1.0*w_01_13; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = -1.0*w_01_13; 
			 grad[47] = w_01_13; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = -1.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_61 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_61 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_61<T>::LiftConstraint_61 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_61_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_61<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_02*(0.00000000000000006123233995736766035868820147292*w_01_04 + w_04_01 - 1.0*w_04_02 + 2.2958450216584678727157691077339e-49) - 1.0*w_05_01;
}

template <typename T>
void
LiftConstraint_61<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.00000000000000006123233995736766035868820147292*w_01_04 + w_04_01 - 1.0*w_04_02 + 2.2958450216584678727157691077339e-49; 
			 grad[9] = 0.0; 
			 grad[10] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = w_01_02; 
			 grad[56] = -1.0*w_01_02; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = -1.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_62 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_62 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_62<T>::LiftConstraint_62 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_62_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_62<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_03*(w_04_03 + w_04_04) - 1.0*w_05_02;
}

template <typename T>
void
LiftConstraint_62<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = w_04_03 + w_04_04; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = w_01_03; 
			 grad[58] = w_01_03; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = -1.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_63 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_63 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_63<T>::LiftConstraint_63 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_63_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_63<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_07*(w_04_05 - 1.0*w_04_07) - 1.0*w_05_03;
}

template <typename T>
void
LiftConstraint_63<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_04_05 - 1.0*w_04_07; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = w_01_07; 
			 grad[60] = 0.0; 
			 grad[61] = -1.0*w_01_07; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = -1.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_64 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_64 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_64<T>::LiftConstraint_64 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_64_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_64<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_07*(w_04_06 - 1.0*w_04_10) - 1.0*w_05_04;
}

template <typename T>
void
LiftConstraint_64<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_04_06 - 1.0*w_04_10; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = w_01_07; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = -1.0*w_01_07; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = -1.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_65 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_65 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_65<T>::LiftConstraint_65 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_65_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_65<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_06*(w_04_03 + w_04_04) - 1.0*w_05_05;
}

template <typename T>
void
LiftConstraint_65<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = w_04_03 + w_04_04; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = w_01_06; 
			 grad[58] = w_01_06; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = -1.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_66 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_66 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_66<T>::LiftConstraint_66 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_66_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_66<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_03*(w_04_01 - 1.0*w_04_02) - 1.0*w_05_06;
}

template <typename T>
void
LiftConstraint_66<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.00000000000000006123233995736766035868820147292*w_04_01 - 0.00000000000000006123233995736766035868820147292*w_04_02; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[56] = -0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = -1.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_67 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_67 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_67<T>::LiftConstraint_67 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_67_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_67<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_06*(w_04_01 - 1.0*w_04_02) - 1.0*w_05_07;
}

template <typename T>
void
LiftConstraint_67<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.00000000000000006123233995736766035868820147292*w_04_01 - 0.00000000000000006123233995736766035868820147292*w_04_02; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[56] = -0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = -1.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_68 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_68 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_68<T>::LiftConstraint_68 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_68_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_68<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_09*(w_04_08 + w_04_09) - 1.0*w_05_08;
}

template <typename T>
void
LiftConstraint_68<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = w_04_08 + w_04_09; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = w_01_09; 
			 grad[63] = w_01_09; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = -1.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_69 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_69 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_69<T>::LiftConstraint_69 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_69_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_69<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_07*(w_04_08 + w_04_09) - 1.0*w_05_09;
}

template <typename T>
void
LiftConstraint_69<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_04_08 + w_04_09; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = w_01_07; 
			 grad[63] = w_01_07; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = -1.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_70 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_70 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_70<T>::LiftConstraint_70 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_70_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_70<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_09*(w_04_05 - 1.0*w_04_07) - 1.0*w_05_10;
}

template <typename T>
void
LiftConstraint_70<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = w_04_05 - 1.0*w_04_07; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = w_01_09; 
			 grad[60] = 0.0; 
			 grad[61] = -1.0*w_01_09; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = -1.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_71 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_71 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_71<T>::LiftConstraint_71 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_71_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_71<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_09*(w_04_11 + w_04_12) - 1.0*w_05_11;
}

template <typename T>
void
LiftConstraint_71<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = w_04_11 + w_04_12; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = w_01_09; 
			 grad[66] = w_01_09; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = -1.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_72 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_72 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_72<T>::LiftConstraint_72 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_72_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_72<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_07*(w_04_11 + w_04_12) - 1.0*w_05_12;
}

template <typename T>
void
LiftConstraint_72<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = w_04_11 + w_04_12; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = w_01_07; 
			 grad[66] = w_01_07; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = -1.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_73 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_73 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_73<T>::LiftConstraint_73 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_73_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_73<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_09*(w_04_06 - 1.0*w_04_10) - 1.0*w_05_13;
}

template <typename T>
void
LiftConstraint_73<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = w_04_06 - 1.0*w_04_10; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = w_01_09; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = -1.0*w_01_09; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = -1.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_74 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_74 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_74<T>::LiftConstraint_74 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_74_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_74<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_06_01 - 1.0*w_01_02*(0.00000000000000006123233995736766035868820147292*w_02_04 - 3.7493994566546440195890577538583e-33*w_01_05 + 0.00000000000000006123233995736766035868820147292*w_02_05 - 1.0*w_05_03 + w_05_08);
}

template <typename T>
void
LiftConstraint_74<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 3.7493994566546440195890577538583e-33*w_01_05 - 0.00000000000000006123233995736766035868820147292*w_02_04 - 0.00000000000000006123233995736766035868820147292*w_02_05 + w_05_03 - 1.0*w_05_08; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 3.7493994566546440195890577538583e-33*w_01_02; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[25] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = w_01_02; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = -1.0*w_01_02; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = -1.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_75 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_75 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_75<T>::LiftConstraint_75 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_75_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_75<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_03*(w_05_09 + w_05_10) - 1.0*w_06_02;
}

template <typename T>
void
LiftConstraint_75<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = w_05_09 + w_05_10; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = w_01_03; 
			 grad[76] = w_01_03; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = -1.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_76 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_76 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_76<T>::LiftConstraint_76 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_76_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_76<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_02*(3.7493994566546440195890577538583e-33*w_01_08 + 0.00000000000000006123233995736766035868820147292*w_02_01 - 0.00000000000000006123233995736766035868820147292*w_02_06 + w_05_04 - 1.0*w_05_11) - 1.0*w_06_03;
}

template <typename T>
void
LiftConstraint_76<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 3.7493994566546440195890577538583e-33*w_01_08 + 0.00000000000000006123233995736766035868820147292*w_02_01 - 0.00000000000000006123233995736766035868820147292*w_02_06 + w_05_04 - 1.0*w_05_11; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 3.7493994566546440195890577538583e-33*w_01_02; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = w_01_02; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = -1.0*w_01_02; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = -1.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_77 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_77 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_77<T>::LiftConstraint_77 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_77_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_77<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_03*(w_05_12 + w_05_13) - 1.0*w_06_04;
}

template <typename T>
void
LiftConstraint_77<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = w_05_12 + w_05_13; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = w_01_03; 
			 grad[79] = w_01_03; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = -1.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_78 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_78 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_78<T>::LiftConstraint_78 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_78_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_78<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_02*(w_05_02 - 1.0*w_02_03 + w_05_07) - 1.0*w_06_05;
}

template <typename T>
void
LiftConstraint_78<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.00000000000000006123233995736766035868820147292*w_05_02 - 0.00000000000000006123233995736766035868820147292*w_02_03 + 0.00000000000000006123233995736766035868820147292*w_05_07; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = -1.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_79 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_79 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_79<T>::LiftConstraint_79 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_79_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_79<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_06_06 - 1.0*w_01_01*(w_02_02 + w_05_05 - 1.0*w_05_06);
}

template <typename T>
void
LiftConstraint_79<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = w_05_06 - 1.0*w_05_05 - 1.0*w_02_02; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = -1.0*w_01_01; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = -1.0*w_01_01; 
			 grad[72] = w_01_01; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = -1.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_80 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_80 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_80<T>::LiftConstraint_80 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_80_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_80<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_06*(w_05_09 + w_05_10) - 1.0*w_06_07;
}

template <typename T>
void
LiftConstraint_80<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = w_05_09 + w_05_10; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = w_01_06; 
			 grad[76] = w_01_06; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = -1.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_81 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_81 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_81<T>::LiftConstraint_81 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_81_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_81<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_03*(w_05_03 - 1.0*w_05_08) - 1.0*w_06_08;
}

template <typename T>
void
LiftConstraint_81<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.00000000000000006123233995736766035868820147292*w_05_03 - 0.00000000000000006123233995736766035868820147292*w_05_08; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = -0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = -1.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_82 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_82 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_82<T>::LiftConstraint_82 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_82_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_82<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_06*(w_05_03 - 1.0*w_05_08) - 1.0*w_06_09;
}

template <typename T>
void
LiftConstraint_82<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.00000000000000006123233995736766035868820147292*w_05_03 - 0.00000000000000006123233995736766035868820147292*w_05_08; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = -0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = -1.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_83 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_83 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_83<T>::LiftConstraint_83 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_83_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_83<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = w_01_06*(w_05_12 + w_05_13) - 1.0*w_06_10;
}

template <typename T>
void
LiftConstraint_83<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = w_05_12 + w_05_13; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = w_01_06; 
			 grad[79] = w_01_06; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = -1.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_84 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_84 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_84<T>::LiftConstraint_84 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_84_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_84<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_03*(w_05_04 - 1.0*w_05_11) - 1.0*w_06_11;
}

template <typename T>
void
LiftConstraint_84<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.00000000000000006123233995736766035868820147292*w_05_04 - 0.00000000000000006123233995736766035868820147292*w_05_11; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = -0.00000000000000006123233995736766035868820147292*w_01_03; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = -1.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_85 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_85 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_85<T>::LiftConstraint_85 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_85_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_85<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_06*(w_05_04 - 1.0*w_05_11) - 1.0*w_06_12;
}

template <typename T>
void
LiftConstraint_85<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.00000000000000006123233995736766035868820147292*w_05_04 - 0.00000000000000006123233995736766035868820147292*w_05_11; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = -0.00000000000000006123233995736766035868820147292*w_01_06; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = -1.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_86 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_86 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_86<T>::LiftConstraint_86 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_86_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_86<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_02*(w_06_02 - 1.0*w_03_02 + w_06_09) - 1.0*w_07_01;
}

template <typename T>
void
LiftConstraint_86<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.00000000000000006123233995736766035868820147292*w_06_02 - 0.00000000000000006123233995736766035868820147292*w_03_02 + 0.00000000000000006123233995736766035868820147292*w_06_09; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = -1.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_87 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_87 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_87<T>::LiftConstraint_87 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_87_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_87<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_07_02 - 1.0*w_01_01*(w_03_01 + w_06_07 - 1.0*w_06_08);
}

template <typename T>
void
LiftConstraint_87<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = w_06_08 - 1.0*w_06_07 - 1.0*w_03_01; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = -1.0*w_01_01; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = -1.0*w_01_01; 
			 grad[87] = w_01_01; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = -1.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_88 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_88 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_88<T>::LiftConstraint_88 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_88_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_88<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.00000000000000006123233995736766035868820147292*w_01_02*(w_06_04 - 1.0*w_03_04 + w_06_12) - 1.0*w_07_03;
}

template <typename T>
void
LiftConstraint_88<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.00000000000000006123233995736766035868820147292*w_06_04 - 0.00000000000000006123233995736766035868820147292*w_03_04 + 0.00000000000000006123233995736766035868820147292*w_06_12; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = -0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.00000000000000006123233995736766035868820147292*w_01_02; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = -1.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class LiftConstraint_89 : public roboptim::GenericDifferentiableFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericDifferentiableFunction<T>);
  
  explicit LiftConstraint_89 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
LiftConstraint_89<T>::LiftConstraint_89 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericDifferentiableFunction<T>
    (96, 1, "LiftConstraint_89_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
LiftConstraint_89<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = - 1.0*w_07_04 - 1.0*w_01_01*(w_03_03 + w_06_10 - 1.0*w_06_11);
}

template <typename T>
void
LiftConstraint_89<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = w_06_11 - 1.0*w_06_10 - 1.0*w_03_03; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = -1.0*w_01_01; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = -1.0*w_01_01; 
			 grad[90] = w_01_01; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = -1.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class EEConstraint_1 : public roboptim::GenericLinearFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericLinearFunction<T>);
  
  explicit EEConstraint_1 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
EEConstraint_1<T>::EEConstraint_1 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericLinearFunction<T>
    (96, 1, "EEConstraint_1_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
EEConstraint_1<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.4*w_01_05 - 1.0*EE_1_1 + 0.36*w_02_04 + 0.36*w_02_05 + 0.87*w_02_09 - 0.55*w_03_01 - 0.2*w_03_02 + 0.87*w_03_06 - 0.87*w_03_07 - 0.63*w_04_05 + 0.63*w_04_07 + 0.16*w_05_03 - 0.16*w_05_08 + 0.532*w_06_01 + 0.2*w_06_02 - 0.55*w_06_07 + 0.55*w_06_08 + 0.2*w_06_09 - 0.532*w_07_01 + 0.532*w_07_02 + 0.65;
}

template <typename T>
void
EEConstraint_1<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.4; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = 0.0; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.36; 
			 grad[25] = 0.36; 
			 grad[26] = 0.0; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.87; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = -0.55; 
			 grad[40] = -0.2; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = 0.0; 
			 grad[44] = 0.87; 
			 grad[45] = -0.87; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = -0.63; 
			 grad[60] = 0.0; 
			 grad[61] = 0.63; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.16; 
			 grad[70] = 0.0; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = -0.16; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.532; 
			 grad[81] = 0.2; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = -0.55; 
			 grad[87] = 0.55; 
			 grad[88] = 0.2; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = -0.532; 
			 grad[93] = 0.532; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class EEConstraint_2 : public roboptim::GenericLinearFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericLinearFunction<T>);
  
  explicit EEConstraint_2 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
EEConstraint_2<T>::EEConstraint_2 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericLinearFunction<T>
    (96, 1, "EEConstraint_2_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
EEConstraint_2<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.4*w_01_08 - 1.0*EE_1_2 - 0.36*w_02_01 + 0.36*w_02_06 + 0.87*w_02_10 - 0.55*w_03_03 - 0.2*w_03_04 + 0.87*w_03_08 - 0.87*w_03_09 - 0.63*w_04_06 + 0.63*w_04_10 + 0.16*w_05_04 - 0.16*w_05_11 + 0.532*w_06_03 + 0.2*w_06_04 - 0.55*w_06_10 + 0.55*w_06_11 + 0.2*w_06_12 - 0.532*w_07_03 + 0.532*w_07_04;
}

template <typename T>
void
EEConstraint_2<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = 0.0; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.4; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.0; 
			 grad[21] = -0.36; 
			 grad[22] = 0.0; 
			 grad[23] = 0.0; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.36; 
			 grad[27] = 0.0; 
			 grad[28] = 0.0; 
			 grad[29] = 0.0; 
			 grad[30] = 0.87; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = -0.55; 
			 grad[42] = -0.2; 
			 grad[43] = 0.0; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.87; 
			 grad[47] = -0.87; 
			 grad[48] = 0.0; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.0; 
			 grad[56] = 0.0; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = -0.63; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.63; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.0; 
			 grad[68] = 0.0; 
			 grad[69] = 0.0; 
			 grad[70] = 0.16; 
			 grad[71] = 0.0; 
			 grad[72] = 0.0; 
			 grad[73] = 0.0; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = -0.16; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.532; 
			 grad[83] = 0.2; 
			 grad[84] = 0.0; 
			 grad[85] = 0.0; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = -0.55; 
			 grad[90] = 0.55; 
			 grad[91] = 0.2; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = -0.532; 
			 grad[95] = 0.532; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}
template <typename T>
class EEConstraint_3 : public roboptim::GenericLinearFunction<T>
{
public:
  ROBOPTIM_DIFFERENTIABLE_FUNCTION_FWD_TYPEDEFS_
  (roboptim::GenericLinearFunction<T>);
  
  explicit EEConstraint_3 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ();

  void
  impl_compute (result_t& result, const argument_t& x) const throw ();
  void
  impl_gradient (gradient_t& grad, const argument_t& x, size_type)
  const throw ();

private:
  double EE_1_1;
	double EE_1_2;
	double EE_1_3;
};

template <typename T>
EEConstraint_3<T>::EEConstraint_3 (const double& EE_1_1,
			 const double& EE_1_2,
			 const double& EE_1_3) throw ()
  : roboptim::GenericLinearFunction<T>
    (96, 1, "EEConstraint_3_testRobot"),
    EE_1_1 (EE_1_1),
		EE_1_2 (EE_1_2),
		EE_1_3 (EE_1_3)
{}

template <typename T>
void
EEConstraint_3<T>::impl_compute (result_t& result, const argument_t& x)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];
  
	result[0] = 0.000000000000000053272135762909869812217942235113*w_01_14 - 0.36*w_01_04 - 1.0*EE_1_3 - 0.55*w_02_02 - 0.2*w_02_03 - 0.87*w_02_07 - 0.87*w_02_08 - 0.63*w_03_05 + 0.63*w_03_10 + 0.16*w_04_01 - 0.16*w_04_02 + 0.532*w_05_01 + 0.2*w_05_02 - 0.55*w_05_05 + 0.55*w_05_06 + 0.2*w_05_07 - 0.532*w_06_05 + 0.532*w_06_06 + 1.1;
}

template <typename T>
void
EEConstraint_3<T>::impl_gradient (gradient_t& grad, const argument_t& x, size_type id)
  const throw ()
{
  const double& q_01 = x[0];
	const double& q_02 = x[1];
	const double& q_03 = x[2];
	const double& q_04 = x[3];
	const double& q_05 = x[4];
	const double& q_06 = x[5];
	const double& q_07 = x[6];
	const double& w_01_01 = x[7];
	const double& w_01_02 = x[8];
	const double& w_01_03 = x[9];
	const double& w_01_04 = x[10];
	const double& w_01_05 = x[11];
	const double& w_01_06 = x[12];
	const double& w_01_07 = x[13];
	const double& w_01_08 = x[14];
	const double& w_01_09 = x[15];
	const double& w_01_10 = x[16];
	const double& w_01_11 = x[17];
	const double& w_01_12 = x[18];
	const double& w_01_13 = x[19];
	const double& w_01_14 = x[20];
	const double& w_02_01 = x[21];
	const double& w_02_02 = x[22];
	const double& w_02_03 = x[23];
	const double& w_02_04 = x[24];
	const double& w_02_05 = x[25];
	const double& w_02_06 = x[26];
	const double& w_02_07 = x[27];
	const double& w_02_08 = x[28];
	const double& w_02_09 = x[29];
	const double& w_02_10 = x[30];
	const double& w_02_11 = x[31];
	const double& w_02_12 = x[32];
	const double& w_02_13 = x[33];
	const double& w_02_14 = x[34];
	const double& w_02_15 = x[35];
	const double& w_02_16 = x[36];
	const double& w_02_17 = x[37];
	const double& w_02_18 = x[38];
	const double& w_03_01 = x[39];
	const double& w_03_02 = x[40];
	const double& w_03_03 = x[41];
	const double& w_03_04 = x[42];
	const double& w_03_05 = x[43];
	const double& w_03_06 = x[44];
	const double& w_03_07 = x[45];
	const double& w_03_08 = x[46];
	const double& w_03_09 = x[47];
	const double& w_03_10 = x[48];
	const double& w_03_11 = x[49];
	const double& w_03_12 = x[50];
	const double& w_03_13 = x[51];
	const double& w_03_14 = x[52];
	const double& w_03_15 = x[53];
	const double& w_03_16 = x[54];
	const double& w_04_01 = x[55];
	const double& w_04_02 = x[56];
	const double& w_04_03 = x[57];
	const double& w_04_04 = x[58];
	const double& w_04_05 = x[59];
	const double& w_04_06 = x[60];
	const double& w_04_07 = x[61];
	const double& w_04_08 = x[62];
	const double& w_04_09 = x[63];
	const double& w_04_10 = x[64];
	const double& w_04_11 = x[65];
	const double& w_04_12 = x[66];
	const double& w_05_01 = x[67];
	const double& w_05_02 = x[68];
	const double& w_05_03 = x[69];
	const double& w_05_04 = x[70];
	const double& w_05_05 = x[71];
	const double& w_05_06 = x[72];
	const double& w_05_07 = x[73];
	const double& w_05_08 = x[74];
	const double& w_05_09 = x[75];
	const double& w_05_10 = x[76];
	const double& w_05_11 = x[77];
	const double& w_05_12 = x[78];
	const double& w_05_13 = x[79];
	const double& w_06_01 = x[80];
	const double& w_06_02 = x[81];
	const double& w_06_03 = x[82];
	const double& w_06_04 = x[83];
	const double& w_06_05 = x[84];
	const double& w_06_06 = x[85];
	const double& w_06_07 = x[86];
	const double& w_06_08 = x[87];
	const double& w_06_09 = x[88];
	const double& w_06_10 = x[89];
	const double& w_06_11 = x[90];
	const double& w_06_12 = x[91];
	const double& w_07_01 = x[92];
	const double& w_07_02 = x[93];
	const double& w_07_03 = x[94];
	const double& w_07_04 = x[95];

  switch (id)
    {
      
		case 0: 
			 grad[0] = 0.0; 
			 grad[1] = 0.0; 
			 grad[2] = 0.0; 
			 grad[3] = 0.0; 
			 grad[4] = 0.0; 
			 grad[5] = 0.0; 
			 grad[6] = 0.0; 
			 grad[7] = 0.0; 
			 grad[8] = 0.0; 
			 grad[9] = 0.0; 
			 grad[10] = -0.36; 
			 grad[11] = 0.0; 
			 grad[12] = 0.0; 
			 grad[13] = 0.0; 
			 grad[14] = 0.0; 
			 grad[15] = 0.0; 
			 grad[16] = 0.0; 
			 grad[17] = 0.0; 
			 grad[18] = 0.0; 
			 grad[19] = 0.0; 
			 grad[20] = 0.000000000000000053272135762909869812217942235113; 
			 grad[21] = 0.0; 
			 grad[22] = -0.55; 
			 grad[23] = -0.2; 
			 grad[24] = 0.0; 
			 grad[25] = 0.0; 
			 grad[26] = 0.0; 
			 grad[27] = -0.87; 
			 grad[28] = -0.87; 
			 grad[29] = 0.0; 
			 grad[30] = 0.0; 
			 grad[31] = 0.0; 
			 grad[32] = 0.0; 
			 grad[33] = 0.0; 
			 grad[34] = 0.0; 
			 grad[35] = 0.0; 
			 grad[36] = 0.0; 
			 grad[37] = 0.0; 
			 grad[38] = 0.0; 
			 grad[39] = 0.0; 
			 grad[40] = 0.0; 
			 grad[41] = 0.0; 
			 grad[42] = 0.0; 
			 grad[43] = -0.63; 
			 grad[44] = 0.0; 
			 grad[45] = 0.0; 
			 grad[46] = 0.0; 
			 grad[47] = 0.0; 
			 grad[48] = 0.63; 
			 grad[49] = 0.0; 
			 grad[50] = 0.0; 
			 grad[51] = 0.0; 
			 grad[52] = 0.0; 
			 grad[53] = 0.0; 
			 grad[54] = 0.0; 
			 grad[55] = 0.16; 
			 grad[56] = -0.16; 
			 grad[57] = 0.0; 
			 grad[58] = 0.0; 
			 grad[59] = 0.0; 
			 grad[60] = 0.0; 
			 grad[61] = 0.0; 
			 grad[62] = 0.0; 
			 grad[63] = 0.0; 
			 grad[64] = 0.0; 
			 grad[65] = 0.0; 
			 grad[66] = 0.0; 
			 grad[67] = 0.532; 
			 grad[68] = 0.2; 
			 grad[69] = 0.0; 
			 grad[70] = 0.0; 
			 grad[71] = -0.55; 
			 grad[72] = 0.55; 
			 grad[73] = 0.2; 
			 grad[74] = 0.0; 
			 grad[75] = 0.0; 
			 grad[76] = 0.0; 
			 grad[77] = 0.0; 
			 grad[78] = 0.0; 
			 grad[79] = 0.0; 
			 grad[80] = 0.0; 
			 grad[81] = 0.0; 
			 grad[82] = 0.0; 
			 grad[83] = 0.0; 
			 grad[84] = -0.532; 
			 grad[85] = 0.532; 
			 grad[86] = 0.0; 
			 grad[87] = 0.0; 
			 grad[88] = 0.0; 
			 grad[89] = 0.0; 
			 grad[90] = 0.0; 
			 grad[91] = 0.0; 
			 grad[92] = 0.0; 
			 grad[93] = 0.0; 
			 grad[94] = 0.0; 
			 grad[95] = 0.0; 
			 break;
    default:
      assert (0 && "should never happen");
    }
}

void solveFor (const std::vector<double>& initPos, const std::vector<double>& endEffectors)
{
  // Set the starting point.
  roboptim::Function::vector_t start ( initPos.size());
  for( int i = 0; i<initPos.size(); i++)
    start[i] = initPos[i];
  
  // Set the End Effector Goal Position
  double EE_1_1 = endEffectors[0];
	double EE_1_2 = endEffectors[1];
	double EE_1_3 = endEffectors[2];

  boost::shared_ptr<CostFunction<roboptim::EigenMatrixDense> > cost = boost::make_shared<CostFunction<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);

	boost::shared_ptr<LiftConstraint_1<roboptim::EigenMatrixDense> > cstrFunc_1 = boost::make_shared<LiftConstraint_1<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_2<roboptim::EigenMatrixDense> > cstrFunc_2 = boost::make_shared<LiftConstraint_2<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_3<roboptim::EigenMatrixDense> > cstrFunc_3 = boost::make_shared<LiftConstraint_3<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_4<roboptim::EigenMatrixDense> > cstrFunc_4 = boost::make_shared<LiftConstraint_4<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_5<roboptim::EigenMatrixDense> > cstrFunc_5 = boost::make_shared<LiftConstraint_5<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_6<roboptim::EigenMatrixDense> > cstrFunc_6 = boost::make_shared<LiftConstraint_6<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_7<roboptim::EigenMatrixDense> > cstrFunc_7 = boost::make_shared<LiftConstraint_7<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_8<roboptim::EigenMatrixDense> > cstrFunc_8 = boost::make_shared<LiftConstraint_8<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_9<roboptim::EigenMatrixDense> > cstrFunc_9 = boost::make_shared<LiftConstraint_9<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_10<roboptim::EigenMatrixDense> > cstrFunc_10 = boost::make_shared<LiftConstraint_10<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_11<roboptim::EigenMatrixDense> > cstrFunc_11 = boost::make_shared<LiftConstraint_11<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_12<roboptim::EigenMatrixDense> > cstrFunc_12 = boost::make_shared<LiftConstraint_12<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_13<roboptim::EigenMatrixDense> > cstrFunc_13 = boost::make_shared<LiftConstraint_13<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_14<roboptim::EigenMatrixDense> > cstrFunc_14 = boost::make_shared<LiftConstraint_14<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_15<roboptim::EigenMatrixDense> > cstrFunc_15 = boost::make_shared<LiftConstraint_15<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_16<roboptim::EigenMatrixDense> > cstrFunc_16 = boost::make_shared<LiftConstraint_16<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_17<roboptim::EigenMatrixDense> > cstrFunc_17 = boost::make_shared<LiftConstraint_17<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_18<roboptim::EigenMatrixDense> > cstrFunc_18 = boost::make_shared<LiftConstraint_18<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_19<roboptim::EigenMatrixDense> > cstrFunc_19 = boost::make_shared<LiftConstraint_19<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_20<roboptim::EigenMatrixDense> > cstrFunc_20 = boost::make_shared<LiftConstraint_20<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_21<roboptim::EigenMatrixDense> > cstrFunc_21 = boost::make_shared<LiftConstraint_21<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_22<roboptim::EigenMatrixDense> > cstrFunc_22 = boost::make_shared<LiftConstraint_22<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_23<roboptim::EigenMatrixDense> > cstrFunc_23 = boost::make_shared<LiftConstraint_23<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_24<roboptim::EigenMatrixDense> > cstrFunc_24 = boost::make_shared<LiftConstraint_24<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_25<roboptim::EigenMatrixDense> > cstrFunc_25 = boost::make_shared<LiftConstraint_25<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_26<roboptim::EigenMatrixDense> > cstrFunc_26 = boost::make_shared<LiftConstraint_26<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_27<roboptim::EigenMatrixDense> > cstrFunc_27 = boost::make_shared<LiftConstraint_27<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_28<roboptim::EigenMatrixDense> > cstrFunc_28 = boost::make_shared<LiftConstraint_28<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_29<roboptim::EigenMatrixDense> > cstrFunc_29 = boost::make_shared<LiftConstraint_29<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_30<roboptim::EigenMatrixDense> > cstrFunc_30 = boost::make_shared<LiftConstraint_30<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_31<roboptim::EigenMatrixDense> > cstrFunc_31 = boost::make_shared<LiftConstraint_31<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_32<roboptim::EigenMatrixDense> > cstrFunc_32 = boost::make_shared<LiftConstraint_32<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_33<roboptim::EigenMatrixDense> > cstrFunc_33 = boost::make_shared<LiftConstraint_33<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_34<roboptim::EigenMatrixDense> > cstrFunc_34 = boost::make_shared<LiftConstraint_34<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_35<roboptim::EigenMatrixDense> > cstrFunc_35 = boost::make_shared<LiftConstraint_35<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_36<roboptim::EigenMatrixDense> > cstrFunc_36 = boost::make_shared<LiftConstraint_36<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_37<roboptim::EigenMatrixDense> > cstrFunc_37 = boost::make_shared<LiftConstraint_37<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_38<roboptim::EigenMatrixDense> > cstrFunc_38 = boost::make_shared<LiftConstraint_38<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_39<roboptim::EigenMatrixDense> > cstrFunc_39 = boost::make_shared<LiftConstraint_39<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_40<roboptim::EigenMatrixDense> > cstrFunc_40 = boost::make_shared<LiftConstraint_40<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_41<roboptim::EigenMatrixDense> > cstrFunc_41 = boost::make_shared<LiftConstraint_41<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_42<roboptim::EigenMatrixDense> > cstrFunc_42 = boost::make_shared<LiftConstraint_42<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_43<roboptim::EigenMatrixDense> > cstrFunc_43 = boost::make_shared<LiftConstraint_43<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_44<roboptim::EigenMatrixDense> > cstrFunc_44 = boost::make_shared<LiftConstraint_44<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_45<roboptim::EigenMatrixDense> > cstrFunc_45 = boost::make_shared<LiftConstraint_45<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_46<roboptim::EigenMatrixDense> > cstrFunc_46 = boost::make_shared<LiftConstraint_46<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_47<roboptim::EigenMatrixDense> > cstrFunc_47 = boost::make_shared<LiftConstraint_47<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_48<roboptim::EigenMatrixDense> > cstrFunc_48 = boost::make_shared<LiftConstraint_48<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_49<roboptim::EigenMatrixDense> > cstrFunc_49 = boost::make_shared<LiftConstraint_49<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_50<roboptim::EigenMatrixDense> > cstrFunc_50 = boost::make_shared<LiftConstraint_50<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_51<roboptim::EigenMatrixDense> > cstrFunc_51 = boost::make_shared<LiftConstraint_51<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_52<roboptim::EigenMatrixDense> > cstrFunc_52 = boost::make_shared<LiftConstraint_52<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_53<roboptim::EigenMatrixDense> > cstrFunc_53 = boost::make_shared<LiftConstraint_53<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_54<roboptim::EigenMatrixDense> > cstrFunc_54 = boost::make_shared<LiftConstraint_54<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_55<roboptim::EigenMatrixDense> > cstrFunc_55 = boost::make_shared<LiftConstraint_55<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_56<roboptim::EigenMatrixDense> > cstrFunc_56 = boost::make_shared<LiftConstraint_56<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_57<roboptim::EigenMatrixDense> > cstrFunc_57 = boost::make_shared<LiftConstraint_57<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_58<roboptim::EigenMatrixDense> > cstrFunc_58 = boost::make_shared<LiftConstraint_58<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_59<roboptim::EigenMatrixDense> > cstrFunc_59 = boost::make_shared<LiftConstraint_59<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_60<roboptim::EigenMatrixDense> > cstrFunc_60 = boost::make_shared<LiftConstraint_60<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_61<roboptim::EigenMatrixDense> > cstrFunc_61 = boost::make_shared<LiftConstraint_61<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_62<roboptim::EigenMatrixDense> > cstrFunc_62 = boost::make_shared<LiftConstraint_62<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_63<roboptim::EigenMatrixDense> > cstrFunc_63 = boost::make_shared<LiftConstraint_63<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_64<roboptim::EigenMatrixDense> > cstrFunc_64 = boost::make_shared<LiftConstraint_64<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_65<roboptim::EigenMatrixDense> > cstrFunc_65 = boost::make_shared<LiftConstraint_65<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_66<roboptim::EigenMatrixDense> > cstrFunc_66 = boost::make_shared<LiftConstraint_66<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_67<roboptim::EigenMatrixDense> > cstrFunc_67 = boost::make_shared<LiftConstraint_67<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_68<roboptim::EigenMatrixDense> > cstrFunc_68 = boost::make_shared<LiftConstraint_68<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_69<roboptim::EigenMatrixDense> > cstrFunc_69 = boost::make_shared<LiftConstraint_69<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_70<roboptim::EigenMatrixDense> > cstrFunc_70 = boost::make_shared<LiftConstraint_70<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_71<roboptim::EigenMatrixDense> > cstrFunc_71 = boost::make_shared<LiftConstraint_71<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_72<roboptim::EigenMatrixDense> > cstrFunc_72 = boost::make_shared<LiftConstraint_72<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_73<roboptim::EigenMatrixDense> > cstrFunc_73 = boost::make_shared<LiftConstraint_73<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_74<roboptim::EigenMatrixDense> > cstrFunc_74 = boost::make_shared<LiftConstraint_74<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_75<roboptim::EigenMatrixDense> > cstrFunc_75 = boost::make_shared<LiftConstraint_75<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_76<roboptim::EigenMatrixDense> > cstrFunc_76 = boost::make_shared<LiftConstraint_76<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_77<roboptim::EigenMatrixDense> > cstrFunc_77 = boost::make_shared<LiftConstraint_77<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_78<roboptim::EigenMatrixDense> > cstrFunc_78 = boost::make_shared<LiftConstraint_78<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_79<roboptim::EigenMatrixDense> > cstrFunc_79 = boost::make_shared<LiftConstraint_79<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_80<roboptim::EigenMatrixDense> > cstrFunc_80 = boost::make_shared<LiftConstraint_80<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_81<roboptim::EigenMatrixDense> > cstrFunc_81 = boost::make_shared<LiftConstraint_81<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_82<roboptim::EigenMatrixDense> > cstrFunc_82 = boost::make_shared<LiftConstraint_82<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_83<roboptim::EigenMatrixDense> > cstrFunc_83 = boost::make_shared<LiftConstraint_83<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_84<roboptim::EigenMatrixDense> > cstrFunc_84 = boost::make_shared<LiftConstraint_84<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_85<roboptim::EigenMatrixDense> > cstrFunc_85 = boost::make_shared<LiftConstraint_85<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_86<roboptim::EigenMatrixDense> > cstrFunc_86 = boost::make_shared<LiftConstraint_86<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_87<roboptim::EigenMatrixDense> > cstrFunc_87 = boost::make_shared<LiftConstraint_87<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_88<roboptim::EigenMatrixDense> > cstrFunc_88 = boost::make_shared<LiftConstraint_88<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<LiftConstraint_89<roboptim::EigenMatrixDense> > cstrFunc_89 = boost::make_shared<LiftConstraint_89<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<EEConstraint_1<roboptim::EigenMatrixDense> > cstrFunc_90 = boost::make_shared<EEConstraint_1<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<EEConstraint_2<roboptim::EigenMatrixDense> > cstrFunc_91 = boost::make_shared<EEConstraint_2<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);
	boost::shared_ptr<EEConstraint_3<roboptim::EigenMatrixDense> > cstrFunc_92 = boost::make_shared<EEConstraint_3<roboptim::EigenMatrixDense> > (EE_1_1, EE_1_2, EE_1_3);

  //Create problem
  solver_t::problem_t pb (*cost);

  // Set bounds for all optimization parameters
  pb.argumentBounds ()[0] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[1] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[2] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[3] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[4] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[5] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[6] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[7] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[8] = roboptim::Function::makeInterval (-pi, pi);
	pb.argumentBounds ()[9] = roboptim::Function::makeInterval (-pi, pi);

  // Create constraints.
  {
		LiftConstraint_1<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_1), bounds, scales); 
	}
	{
		LiftConstraint_2<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_2), bounds, scales); 
	}
	{
		LiftConstraint_3<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_3), bounds, scales); 
	}
	{
		LiftConstraint_4<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_4), bounds, scales); 
	}
	{
		LiftConstraint_5<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_5), bounds, scales); 
	}
	{
		LiftConstraint_6<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_6), bounds, scales); 
	}
	{
		LiftConstraint_7<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_7), bounds, scales); 
	}
	{
		LiftConstraint_8<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_8), bounds, scales); 
	}
	{
		LiftConstraint_9<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_9), bounds, scales); 
	}
	{
		LiftConstraint_10<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_10), bounds, scales); 
	}
	{
		LiftConstraint_11<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_11), bounds, scales); 
	}
	{
		LiftConstraint_12<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_12), bounds, scales); 
	}
	{
		LiftConstraint_13<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_13), bounds, scales); 
	}
	{
		LiftConstraint_14<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_14), bounds, scales); 
	}
	{
		LiftConstraint_15<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_15), bounds, scales); 
	}
	{
		LiftConstraint_16<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_16), bounds, scales); 
	}
	{
		LiftConstraint_17<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_17), bounds, scales); 
	}
	{
		LiftConstraint_18<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_18), bounds, scales); 
	}
	{
		LiftConstraint_19<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_19), bounds, scales); 
	}
	{
		LiftConstraint_20<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_20), bounds, scales); 
	}
	{
		LiftConstraint_21<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_21), bounds, scales); 
	}
	{
		LiftConstraint_22<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_22), bounds, scales); 
	}
	{
		LiftConstraint_23<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_23), bounds, scales); 
	}
	{
		LiftConstraint_24<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_24), bounds, scales); 
	}
	{
		LiftConstraint_25<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_25), bounds, scales); 
	}
	{
		LiftConstraint_26<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_26), bounds, scales); 
	}
	{
		LiftConstraint_27<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_27), bounds, scales); 
	}
	{
		LiftConstraint_28<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_28), bounds, scales); 
	}
	{
		LiftConstraint_29<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_29), bounds, scales); 
	}
	{
		LiftConstraint_30<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_30), bounds, scales); 
	}
	{
		LiftConstraint_31<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_31), bounds, scales); 
	}
	{
		LiftConstraint_32<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_32), bounds, scales); 
	}
	{
		LiftConstraint_33<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_33), bounds, scales); 
	}
	{
		LiftConstraint_34<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_34), bounds, scales); 
	}
	{
		LiftConstraint_35<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_35), bounds, scales); 
	}
	{
		LiftConstraint_36<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_36), bounds, scales); 
	}
	{
		LiftConstraint_37<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_37), bounds, scales); 
	}
	{
		LiftConstraint_38<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_38), bounds, scales); 
	}
	{
		LiftConstraint_39<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_39), bounds, scales); 
	}
	{
		LiftConstraint_40<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_40), bounds, scales); 
	}
	{
		LiftConstraint_41<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_41), bounds, scales); 
	}
	{
		LiftConstraint_42<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_42), bounds, scales); 
	}
	{
		LiftConstraint_43<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_43), bounds, scales); 
	}
	{
		LiftConstraint_44<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_44), bounds, scales); 
	}
	{
		LiftConstraint_45<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_45), bounds, scales); 
	}
	{
		LiftConstraint_46<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_46), bounds, scales); 
	}
	{
		LiftConstraint_47<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_47), bounds, scales); 
	}
	{
		LiftConstraint_48<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_48), bounds, scales); 
	}
	{
		LiftConstraint_49<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_49), bounds, scales); 
	}
	{
		LiftConstraint_50<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_50), bounds, scales); 
	}
	{
		LiftConstraint_51<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_51), bounds, scales); 
	}
	{
		LiftConstraint_52<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_52), bounds, scales); 
	}
	{
		LiftConstraint_53<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_53), bounds, scales); 
	}
	{
		LiftConstraint_54<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_54), bounds, scales); 
	}
	{
		LiftConstraint_55<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_55), bounds, scales); 
	}
	{
		LiftConstraint_56<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_56), bounds, scales); 
	}
	{
		LiftConstraint_57<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_57), bounds, scales); 
	}
	{
		LiftConstraint_58<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_58), bounds, scales); 
	}
	{
		LiftConstraint_59<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_59), bounds, scales); 
	}
	{
		LiftConstraint_60<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_60), bounds, scales); 
	}
	{
		LiftConstraint_61<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_61), bounds, scales); 
	}
	{
		LiftConstraint_62<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_62), bounds, scales); 
	}
	{
		LiftConstraint_63<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_63), bounds, scales); 
	}
	{
		LiftConstraint_64<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_64), bounds, scales); 
	}
	{
		LiftConstraint_65<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_65), bounds, scales); 
	}
	{
		LiftConstraint_66<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_66), bounds, scales); 
	}
	{
		LiftConstraint_67<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_67), bounds, scales); 
	}
	{
		LiftConstraint_68<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_68), bounds, scales); 
	}
	{
		LiftConstraint_69<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_69), bounds, scales); 
	}
	{
		LiftConstraint_70<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_70), bounds, scales); 
	}
	{
		LiftConstraint_71<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_71), bounds, scales); 
	}
	{
		LiftConstraint_72<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_72), bounds, scales); 
	}
	{
		LiftConstraint_73<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_73), bounds, scales); 
	}
	{
		LiftConstraint_74<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_74), bounds, scales); 
	}
	{
		LiftConstraint_75<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_75), bounds, scales); 
	}
	{
		LiftConstraint_76<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_76), bounds, scales); 
	}
	{
		LiftConstraint_77<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_77), bounds, scales); 
	}
	{
		LiftConstraint_78<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_78), bounds, scales); 
	}
	{
		LiftConstraint_79<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_79), bounds, scales); 
	}
	{
		LiftConstraint_80<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_80), bounds, scales); 
	}
	{
		LiftConstraint_81<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_81), bounds, scales); 
	}
	{
		LiftConstraint_82<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_82), bounds, scales); 
	}
	{
		LiftConstraint_83<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_83), bounds, scales); 
	}
	{
		LiftConstraint_84<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_84), bounds, scales); 
	}
	{
		LiftConstraint_85<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_85), bounds, scales); 
	}
	{
		LiftConstraint_86<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_86), bounds, scales); 
	}
	{
		LiftConstraint_87<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_87), bounds, scales); 
	}
	{
		LiftConstraint_88<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_88), bounds, scales); 
	}
	{
		LiftConstraint_89<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericDifferentiableFunction<roboptim::EigenMatrixDense> > (cstrFunc_89), bounds, scales); 
	}
	{
		EEConstraint_1<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericLinearFunction<roboptim::EigenMatrixDense> > (cstrFunc_90), bounds, scales); 
	}
	{
		EEConstraint_2<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericLinearFunction<roboptim::EigenMatrixDense> > (cstrFunc_91), bounds, scales); 
	}
	{
		EEConstraint_3<roboptim::EigenMatrixDense>::intervals_t bounds;
		solver_t::problem_t::scales_t scales;
		bounds.push_back(roboptim::Function::makeInterval (0., 0.));
		scales.push_back(1.);
		pb.addConstraint (boost::static_pointer_cast<roboptim::GenericLinearFunction<roboptim::EigenMatrixDense> > (cstrFunc_92), bounds, scales); 
	}

  pb.startingPoint () = start;
  

  {
    roboptim::SolverFactory<solver_t> factoryTMP ("cfsqp", pb);
    boost::timer::auto_cpu_timer t;
    for( int i = 0; i<100; i++)
    {
      roboptim::SolverFactory<solver_t> factory ("cfsqp", pb);
      solver_t& solver = factory ();
      solver.solve();
    }
  }

  roboptim::SolverFactory<solver_t> factory ("cfsqp", pb);
  solver_t& solver = factory ();
  solver.solve();
  solver_t::result_t res = solver.minimum ();

  
  //std::cout << solver << std::endl;

  // Process the result
  switch (res.which ())
    {
    case solver_t::SOLVER_VALUE:
      {
        // Get the result.
	roboptim::Result& result =
	  boost::get<roboptim::Result> (res);

        // Display the result.
	std::cout << "A solution has been found: " << std::endl
                  << result << std::endl;

        return;
      }

    case solver_t::SOLVER_VALUE_WARNINGS:
      {
        // Get the result.
        roboptim::ResultWithWarnings& result =
	  boost::get<roboptim::ResultWithWarnings> (res);

        // Display the result.
	std::cout << "A solution has been found: " << std::endl
                  << result << std::endl;

        return;
      }

    case solver_t::SOLVER_NO_SOLUTION:
    case solver_t::SOLVER_ERROR:
      {
	std::cout << "A solution should have been found. Failing..."
                  << std::endl
                  << boost::get<roboptim::SolverError> (res).what ()
                  << std::endl;

        return;
      }
    }

  return;
}

int main ()
{
  	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0012108;
		start[11] = 0.0080583;
		start[12] = 0.0018858;
		start[13] = 0.0043964;
		start[14] = 0.0050744;
		start[15] = 0.0050078;
		start[16] = 0.0062517;
		start[17] = 0.0092609;
		start[18] = 8.5733e-05;
		start[19] = 0.0098309;
		start[20] = 0.0019784;
		start[21] = 0.0035543;
		start[22] = 0.0098568;
		start[23] = 0.0048322;
		start[24] = 0.0016796;
		start[25] = 0.0095861;
		start[26] = 0.009767;
		start[27] = 0.0030448;
		start[28] = 0.0066635;
		start[29] = 0.0015503;
		start[30] = 0.0042895;
		start[31] = 0.0054483;
		start[32] = 0.0022106;
		start[33] = 0.0094529;
		start[34] = 0.0046458;
		start[35] = 0.0046775;
		start[36] = 0.0007604;
		start[37] = 0.0028902;
		start[38] = 0.0082904;
		start[39] = 0.0060026;
		start[40] = 0.0030265;
		start[41] = 0.0013921;
		start[42] = 0.0037186;
		start[43] = 0.0038079;
		start[44] = 0.0095829;
		start[45] = 0.0088195;
		start[46] = 0.0020283;
		start[47] = 0.00087886;
		start[48] = 0.0045809;
		start[49] = 0.0012217;
		start[50] = 0.0080668;
		start[51] = 0.0014374;
		start[52] = 0.0023119;
		start[53] = 0.0070695;
		start[54] = 0.0077873;
		start[55] = 0.0068818;
		start[56] = 0.0011837;
		start[57] = 0.0066668;
		start[58] = 0.0051709;
		start[59] = 0.00050043;
		start[60] = 0.0090894;
		start[61] = 0.0089187;
		start[62] = 0.0011673;
		start[63] = 0.0042466;
		start[64] = 0.0060566;
		start[65] = 0.0038031;
		start[66] = 0.0025189;
		start[67] = 0.0077446;
		start[68] = 0.0096719;
		start[69] = 0.0053716;
		start[70] = 0.0077678;
		start[71] = 0.0013629;
		start[72] = 0.0031137;
		start[73] = 0.0021205;
		start[74] = 0.0073127;
		start[75] = 0.0084956;
		start[76] = 0.0049891;
		start[77] = 0.0066945;
		start[78] = 0.0043009;
		start[79] = 0.0022553;
		start[80] = 0.0029834;
		start[81] = 0.0099478;
		start[82] = 0.0081992;
		start[83] = 0.0031323;
		start[84] = 0.0093648;
		start[85] = 0.0070215;
		start[86] = 0.0086203;
		start[87] = 0.0011063;
		start[88] = 0.0023098;
		start[89] = 0.0047519;
		start[90] = 0.0091801;
		start[91] = 0.0060086;
		start[92] = 0.002543;
		start[93] = 0.0044321;
		start[94] = 0.0016409;
		start[95] = 0.0058909;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0052421;
		start[11] = 0.0074608;
		start[12] = 0.0014479;
		start[13] = 0.0079755;
		start[14] = 0.0016374;
		start[15] = 0.0021897;
		start[16] = 0.00019231;
		start[17] = 0.0075485;
		start[18] = 0.0041469;
		start[19] = 0.0040136;
		start[20] = 0.0081126;
		start[21] = 0.00034907;
		start[22] = 0.0068676;
		start[23] = 0.0025393;
		start[24] = 0.0031008;
		start[25] = 0.0048396;
		start[26] = 0.008277;
		start[27] = 0.0043528;
		start[28] = 0.0031552;
		start[29] = 0.0070502;
		start[30] = 0.0053835;
		start[31] = 0.0013137;
		start[32] = 0.0076119;
		start[33] = 0.0041158;
		start[34] = 0.0075961;
		start[35] = 0.0016081;
		start[36] = 0.0066381;
		start[37] = 0.00098589;
		start[38] = 0.0077165;
		start[39] = 0.00022536;
		start[40] = 0.0028768;
		start[41] = 0.0070589;
		start[42] = 0.0081219;
		start[43] = 0.0072119;
		start[44] = 0.0082492;
		start[45] = 0.0088893;
		start[46] = 0.003437;
		start[47] = 0.004728;
		start[48] = 0.0067299;
		start[49] = 0.0011018;
		start[50] = 0.0013725;
		start[51] = 0.0083897;
		start[52] = 0.0039395;
		start[53] = 0.0083041;
		start[54] = 0.00021536;
		start[55] = 0.0097457;
		start[56] = 0.0010611;
		start[57] = 0.0071584;
		start[58] = 0.0095646;
		start[59] = 0.00836;
		start[60] = 0.0039802;
		start[61] = 0.0078163;
		start[62] = 0.0047152;
		start[63] = 0.0032632;
		start[64] = 0.0023838;
		start[65] = 0.0016829;
		start[66] = 0.0014046;
		start[67] = 0.0053245;
		start[68] = 7.1254e-05;
		start[69] = 0.00071766;
		start[70] = 0.0085203;
		start[71] = 0.0060303;
		start[72] = 0.0039578;
		start[73] = 0.0072707;
		start[74] = 0.00032102;
		start[75] = 0.005384;
		start[76] = 0.005327;
		start[77] = 0.00075005;
		start[78] = 0.0098503;
		start[79] = 0.00031665;
		start[80] = 0.00672;
		start[81] = 0.004086;
		start[82] = 0.0035551;
		start[83] = 0.0025704;
		start[84] = 0.0029365;
		start[85] = 0.0027494;
		start[86] = 0.0024773;
		start[87] = 0.0030381;
		start[88] = 0.0074399;
		start[89] = 0.0022382;
		start[90] = 0.0051052;
		start[91] = 0.0061515;
		start[92] = 0.0026121;
		start[93] = 0.0091058;
		start[94] = 0.00076566;
		start[95] = 0.0049464;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.00029048;
		start[11] = 0.0053389;
		start[12] = 0.0036843;
		start[13] = 0.0017791;
		start[14] = 0.0024298;
		start[15] = 0.0056926;
		start[16] = 0.00066243;
		start[17] = 0.0020178;
		start[18] = 0.0083904;
		start[19] = 0.0072399;
		start[20] = 0.0076193;
		start[21] = 0.0032309;
		start[22] = 0.0071912;
		start[23] = 0.0021257;
		start[24] = 0.0029512;
		start[25] = 0.0031613;
		start[26] = 0.0019391;
		start[27] = 0.0026986;
		start[28] = 0.00062051;
		start[29] = 0.0042061;
		start[30] = 0.0084775;
		start[31] = 0.0035117;
		start[32] = 0.0092537;
		start[33] = 0.0066851;
		start[34] = 0.0056512;
		start[35] = 0.0017084;
		start[36] = 0.0048996;
		start[37] = 0.0094527;
		start[38] = 0.006806;
		start[39] = 0.0086798;
		start[40] = 0.009738;
		start[41] = 0.004324;
		start[42] = 0.0078604;
		start[43] = 0.0059789;
		start[44] = 0.0065446;
		start[45] = 0.00061301;
		start[46] = 0.0035624;
		start[47] = 0.0046126;
		start[48] = 0.0033873;
		start[49] = 0.00039555;
		start[50] = 0.0040077;
		start[51] = 0.0084449;
		start[52] = 0.0045647;
		start[53] = 0.0080123;
		start[54] = 0.0037759;
		start[55] = 0.0055842;
		start[56] = 0.0040293;
		start[57] = 0.0074096;
		start[58] = 0.0079172;
		start[59] = 0.0065255;
		start[60] = 0.0098587;
		start[61] = 0.0098281;
		start[62] = 0.0044768;
		start[63] = 0.0098035;
		start[64] = 0.008459;
		start[65] = 0.0003563;
		start[66] = 0.0042377;
		start[67] = 0.0095804;
		start[68] = 0.0080904;
		start[69] = 0.0029951;
		start[70] = 0.0022598;
		start[71] = 0.001786;
		start[72] = 0.0038715;
		start[73] = 0.0024547;
		start[74] = 0.0049791;
		start[75] = 0.0040731;
		start[76] = 0.0079486;
		start[77] = 0.0056358;
		start[78] = 0.0063623;
		start[79] = 0.0012973;
		start[80] = 0.0042283;
		start[81] = 0.0041236;
		start[82] = 0.0023445;
		start[83] = 0.0033502;
		start[84] = 0.0060667;
		start[85] = 0.0050013;
		start[86] = 0.0081881;
		start[87] = 0.0023787;
		start[88] = 0.0036151;
		start[89] = 0.0046117;
		start[90] = 0.0074187;
		start[91] = 0.0066402;
		start[92] = 0.0010537;
		start[93] = 0.00099109;
		start[94] = 0.0066081;
		start[95] = 0.0068103;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0066734;
		start[11] = 0.0046228;
		start[12] = 0.0094593;
		start[13] = 0.0062805;
		start[14] = 0.00023872;
		start[15] = 0.00017342;
		start[16] = 0.00053161;
		start[17] = 0.0076891;
		start[18] = 0.0058947;
		start[19] = 0.0041557;
		start[20] = 0.0081725;
		start[21] = 0.0081991;
		start[22] = 0.0044447;
		start[23] = 0.0098138;
		start[24] = 0.0056444;
		start[25] = 0.0093853;
		start[26] = 0.0030406;
		start[27] = 0.0084581;
		start[28] = 0.0050837;
		start[29] = 0.0098236;
		start[30] = 0.0033175;
		start[31] = 0.0041818;
		start[32] = 0.0085827;
		start[33] = 0.0048401;
		start[34] = 0.0099187;
		start[35] = 0.0061128;
		start[36] = 0.0030954;
		start[37] = 0.0071569;
		start[38] = 0.0016171;
		start[39] = 0.0020991;
		start[40] = 0.0016301;
		start[41] = 0.0031985;
		start[42] = 0.0062436;
		start[43] = 0.00062293;
		start[44] = 0.0020491;
		start[45] = 0.0065093;
		start[46] = 0.0023632;
		start[47] = 0.0016792;
		start[48] = 0.0026111;
		start[49] = 0.0026247;
		start[50] = 0.0074649;
		start[51] = 0.0012458;
		start[52] = 0.0045644;
		start[53] = 0.0059019;
		start[54] = 0.0084241;
		start[55] = 0.0086643;
		start[56] = 0.0071711;
		start[57] = 0.0084696;
		start[58] = 0.0013849;
		start[59] = 0.001342;
		start[60] = 0.0026344;
		start[61] = 0.0025715;
		start[62] = 0.0013444;
		start[63] = 0.0086352;
		start[64] = 0.0058185;
		start[65] = 0.009411;
		start[66] = 0.0049751;
		start[67] = 0.0071286;
		start[68] = 0.00061597;
		start[69] = 0.0004527;
		start[70] = 0.009302;
		start[71] = 6.2756e-05;
		start[72] = 0.00389;
		start[73] = 0.0046812;
		start[74] = 0.0028468;
		start[75] = 0.0085307;
		start[76] = 0.0045615;
		start[77] = 0.0020213;
		start[78] = 0.0083408;
		start[79] = 2.2505e-05;
		start[80] = 0.0085297;
		start[81] = 0.0046909;
		start[82] = 0.0073024;
		start[83] = 0.0056304;
		start[84] = 0.00029989;
		start[85] = 0.0087284;
		start[86] = 0.004384;
		start[87] = 0.0071524;
		start[88] = 0.00066309;
		start[89] = 0.0094222;
		start[90] = 0.0078347;
		start[91] = 0.0095064;
		start[92] = 0.0037333;
		start[93] = 0.0057097;
		start[94] = 0.00019386;
		start[95] = 0.0048521;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.00199;
		start[11] = 0.0036455;
		start[12] = 0.0036419;
		start[13] = 0.0053744;
		start[14] = 0.007674;
		start[15] = 0.0088938;
		start[16] = 0.00023086;
		start[17] = 0.0058732;
		start[18] = 0.00016308;
		start[19] = 0.00046481;
		start[20] = 0.0038099;
		start[21] = 0.0067836;
		start[22] = 0.0051825;
		start[23] = 0.0093418;
		start[24] = 0.009565;
		start[25] = 0.0081581;
		start[26] = 0.0041343;
		start[27] = 0.00079306;
		start[28] = 2.6716e-05;
		start[29] = 0.0054204;
		start[30] = 0.0061149;
		start[31] = 0.0086205;
		start[32] = 0.0035612;
		start[33] = 0.008472;
		start[34] = 0.0045202;
		start[35] = 0.0075617;
		start[36] = 0.0083081;
		start[37] = 0.0048555;
		start[38] = 0.0056452;
		start[39] = 0.0024455;
		start[40] = 0.0092454;
		start[41] = 0.0046743;
		start[42] = 0.0064506;
		start[43] = 0.0093007;
		start[44] = 0.003479;
		start[45] = 0.0035624;
		start[46] = 0.0075821;
		start[47] = 0.0013294;
		start[48] = 0.0055738;
		start[49] = 0.003719;
		start[50] = 0.0044905;
		start[51] = 0.0046661;
		start[52] = 0.0017984;
		start[53] = 0.0035251;
		start[54] = 0.0083241;
		start[55] = 0.00013105;
		start[56] = 0.0065055;
		start[57] = 0.0098247;
		start[58] = 0.0026877;
		start[59] = 0.0066878;
		start[60] = 0.00099842;
		start[61] = 0.0077421;
		start[62] = 7.1986e-05;
		start[63] = 0.0061264;
		start[64] = 0.0027605;
		start[65] = 0.0040816;
		start[66] = 0.0098395;
		start[67] = 0.0086399;
		start[68] = 0.0093499;
		start[69] = 0.0030255;
		start[70] = 0.0039895;
		start[71] = 0.0056166;
		start[72] = 0.0012094;
		start[73] = 0.0025784;
		start[74] = 0.0085473;
		start[75] = 0.0017836;
		start[76] = 0.0094611;
		start[77] = 0.0087895;
		start[78] = 0.0070149;
		start[79] = 0.0042333;
		start[80] = 0.0062226;
		start[81] = 0.0094655;
		start[82] = 0.004444;
		start[83] = 0.0099179;
		start[84] = 0.0083812;
		start[85] = 0.0048817;
		start[86] = 0.0091621;
		start[87] = 0.0019943;
		start[88] = 0.0048692;
		start[89] = 0.0060122;
		start[90] = 0.0055746;
		start[91] = 0.0087295;
		start[92] = 0.0074221;
		start[93] = 0.0032514;
		start[94] = 0.00043533;
		start[95] = 0.0035441;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0075982;
		start[11] = 0.0096678;
		start[12] = 0.0077118;
		start[13] = 0.0028573;
		start[14] = 0.0036258;
		start[15] = 0.0073546;
		start[16] = 0.0022507;
		start[17] = 0.0090627;
		start[18] = 0.00016681;
		start[19] = 0.007807;
		start[20] = 0.0062803;
		start[21] = 0.0047603;
		start[22] = 9.7721e-06;
		start[23] = 0.00073515;
		start[24] = 0.0045856;
		start[25] = 0.005922;
		start[26] = 0.0041725;
		start[27] = 0.0070239;
		start[28] = 0.006946;
		start[29] = 0.006175;
		start[30] = 0.0040903;
		start[31] = 0.0036093;
		start[32] = 0.00012957;
		start[33] = 0.0096519;
		start[34] = 0.0014037;
		start[35] = 0.0021987;
		start[36] = 0.0031378;
		start[37] = 0.0089;
		start[38] = 0.0011327;
		start[39] = 0.0016009;
		start[40] = 0.00052484;
		start[41] = 0.0080657;
		start[42] = 0.0082019;
		start[43] = 0.0034796;
		start[44] = 0.009971;
		start[45] = 0.0027819;
		start[46] = 0.0048421;
		start[47] = 0.0078323;
		start[48] = 0.0016072;
		start[49] = 0.0087119;
		start[50] = 0.0076493;
		start[51] = 0.0049404;
		start[52] = 0.0060035;
		start[53] = 0.00063297;
		start[54] = 0.0021574;
		start[55] = 0.0016772;
		start[56] = 0.00048219;
		start[57] = 0.005412;
		start[58] = 0.0094913;
		start[59] = 0.0029139;
		start[60] = 0.0047846;
		start[61] = 0.0025176;
		start[62] = 0.0032018;
		start[63] = 0.006133;
		start[64] = 0.0073641;
		start[65] = 0.0099138;
		start[66] = 0.00019831;
		start[67] = 0.009069;
		start[68] = 0.0073418;
		start[69] = 0.0016885;
		start[70] = 0.0094247;
		start[71] = 0.0023816;
		start[72] = 0.0093599;
		start[73] = 0.0034042;
		start[74] = 0.0024682;
		start[75] = 0.0061857;
		start[76] = 0.0092497;
		start[77] = 0.0063687;
		start[78] = 0.0097918;
		start[79] = 0.0080214;
		start[80] = 0.0048254;
		start[81] = 0.0058661;
		start[82] = 0.0080972;
		start[83] = 0.0038482;
		start[84] = 0.0065895;
		start[85] = 0.0061003;
		start[86] = 0.00547;
		start[87] = 0.0020254;
		start[88] = 0.0053058;
		start[89] = 0.0057992;
		start[90] = 0.0023325;
		start[91] = 0.0099864;
		start[92] = 0.0031488;
		start[93] = 0.0020266;
		start[94] = 0.0026198;
		start[95] = 0.0081628;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0087723;
		start[11] = 0.0063955;
		start[12] = 0.0091115;
		start[13] = 0.0056482;
		start[14] = 0.0057145;
		start[15] = 0.0073668;
		start[16] = 0.0011424;
		start[17] = 0.0034983;
		start[18] = 0.0048655;
		start[19] = 0.0011366;
		start[20] = 0.0073513;
		start[21] = 0.0054439;
		start[22] = 0.0012937;
		start[23] = 0.00058927;
		start[24] = 0.0010482;
		start[25] = 0.0006883;
		start[26] = 0.0036024;
		start[27] = 0.0044343;
		start[28] = 0.0033081;
		start[29] = 0.0014938;
		start[30] = 0.0087431;
		start[31] = 0.0057447;
		start[32] = 0.0099486;
		start[33] = 0.0026676;
		start[34] = 0.0022958;
		start[35] = 0.0050557;
		start[36] = 0.0044592;
		start[37] = 0.005854;
		start[38] = 0.0083844;
		start[39] = 0.0039757;
		start[40] = 0.0080037;
		start[41] = 0.0028614;
		start[42] = 0.0014084;
		start[43] = 0.0073603;
		start[44] = 0.00060821;
		start[45] = 0.0069978;
		start[46] = 0.0060008;
		start[47] = 0.00033595;
		start[48] = 0.0093194;
		start[49] = 0.0097496;
		start[50] = 0.0051066;
		start[51] = 0.0014348;
		start[52] = 0.0016305;
		start[53] = 0.0011444;
		start[54] = 0.0045263;
		start[55] = 0.0053529;
		start[56] = 0.0082007;
		start[57] = 0.0084346;
		start[58] = 0.0030257;
		start[59] = 0.0086762;
		start[60] = 0.0050625;
		start[61] = 0.0057314;
		start[62] = 0.0013387;
		start[63] = 0.0092749;
		start[64] = 7.0657e-05;
		start[65] = 0.0020021;
		start[66] = 0.0017382;
		start[67] = 0.0097368;
		start[68] = 0.0061477;
		start[69] = 0.0048529;
		start[70] = 0.0054674;
		start[71] = 0.0069799;
		start[72] = 0.0012804;
		start[73] = 0.0035904;
		start[74] = 0.0028458;
		start[75] = 0.0088643;
		start[76] = 0.0016149;
		start[77] = 0.00411;
		start[78] = 0.0070137;
		start[79] = 0.0039103;
		start[80] = 0.008329;
		start[81] = 0.0085849;
		start[82] = 0.0069769;
		start[83] = 0.0031394;
		start[84] = 0.0084968;
		start[85] = 0.0087196;
		start[86] = 0.0024991;
		start[87] = 0.0093984;
		start[88] = 0.00019594;
		start[89] = 0.0013757;
		start[90] = 0.0016481;
		start[91] = 2.0678e-05;
		start[92] = 0.005009;
		start[93] = 0.0087415;
		start[94] = 0.0028517;
		start[95] = 0.0027293;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0047654;
		start[11] = 0.00097225;
		start[12] = 0.0068256;
		start[13] = 0.0088297;
		start[14] = 0.0092079;
		start[15] = 0.0096339;
		start[16] = 0.0086388;
		start[17] = 0.0089735;
		start[18] = 0.0048951;
		start[19] = 0.0023102;
		start[20] = 0.0037441;
		start[21] = 0.001848;
		start[22] = 0.0033345;
		start[23] = 0.0052259;
		start[24] = 0.0078899;
		start[25] = 0.0060317;
		start[26] = 0.0006556;
		start[27] = 0.0067744;
		start[28] = 0.00052799;
		start[29] = 0.0025678;
		start[30] = 0.0098915;
		start[31] = 0.008078;
		start[32] = 0.0024927;
		start[33] = 0.0040784;
		start[34] = 0.0017882;
		start[35] = 0.0070936;
		start[36] = 0.0086589;
		start[37] = 0.0034643;
		start[38] = 0.0029592;
		start[39] = 0.0022095;
		start[40] = 0.0091487;
		start[41] = 0.0035842;
		start[42] = 0.0049106;
		start[43] = 0.0022546;
		start[44] = 0.0069697;
		start[45] = 0.0080948;
		start[46] = 0.005563;
		start[47] = 0.002584;
		start[48] = 0.002299;
		start[49] = 0.0026194;
		start[50] = 0.0061943;
		start[51] = 0.00089219;
		start[52] = 0.0031378;
		start[53] = 0.0027581;
		start[54] = 0.0047333;
		start[55] = 0.00065625;
		start[56] = 0.0078127;
		start[57] = 0.0028234;
		start[58] = 0.0093528;
		start[59] = 0.0091586;
		start[60] = 0.0057537;
		start[61] = 0.0098068;
		start[62] = 0.0026129;
		start[63] = 0.0037723;
		start[64] = 0.0078233;
		start[65] = 0.0097337;
		start[66] = 0.0066062;
		start[67] = 0.00091791;
		start[68] = 0.007806;
		start[69] = 0.0053778;
		start[70] = 0.0074123;
		start[71] = 0.009873;
		start[72] = 0.0018005;
		start[73] = 0.0010762;
		start[74] = 0.0054719;
		start[75] = 0.0020527;
		start[76] = 0.0058583;
		start[77] = 0.0087136;
		start[78] = 0.0064504;
		start[79] = 0.0053362;
		start[80] = 0.0022027;
		start[81] = 0.003004;
		start[82] = 0.0036723;
		start[83] = 0.008286;
		start[84] = 0.0082565;
		start[85] = 0.0057344;
		start[86] = 9.294e-05;
		start[87] = 0.0043175;
		start[88] = 0.0064971;
		start[89] = 0.00052279;
		start[90] = 0.0071419;
		start[91] = 0.005737;
		start[92] = 0.00098013;
		start[93] = 0.0056413;
		start[94] = 0.0015408;
		start[95] = 0.0045461;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0072606;
		start[11] = 0.0034456;
		start[12] = 0.002975;
		start[13] = 0.00038058;
		start[14] = 0.0054147;
		start[15] = 0.0021843;
		start[16] = 0.0097064;
		start[17] = 0.00047373;
		start[18] = 0.0051556;
		start[19] = 3.481e-05;
		start[20] = 0.0077138;
		start[21] = 0.001553;
		start[22] = 0.0091614;
		start[23] = 0.0037392;
		start[24] = 0.0049007;
		start[25] = 0.0089917;
		start[26] = 0.0025136;
		start[27] = 0.0059431;
		start[28] = 0.0081734;
		start[29] = 0.001134;
		start[30] = 0.0053569;
		start[31] = 0.0082068;
		start[32] = 0.0064165;
		start[33] = 0.0057688;
		start[34] = 0.0067796;
		start[35] = 0.0096632;
		start[36] = 0.00054529;
		start[37] = 0.0092038;
		start[38] = 0.0029829;
		start[39] = 0.0058878;
		start[40] = 0.0019563;
		start[41] = 0.0061212;
		start[42] = 0.0063635;
		start[43] = 0.0026916;
		start[44] = 0.0045414;
		start[45] = 0.0076741;
		start[46] = 0.0081275;
		start[47] = 0.0012869;
		start[48] = 0.0043224;
		start[49] = 0.0095312;
		start[50] = 0.0045489;
		start[51] = 0.00084444;
		start[52] = 0.0062328;
		start[53] = 0.0082134;
		start[54] = 0.0064915;
		start[55] = 0.001458;
		start[56] = 0.0035683;
		start[57] = 0.0047782;
		start[58] = 0.0056172;
		start[59] = 0.0018203;
		start[60] = 0.0077429;
		start[61] = 0.0056961;
		start[62] = 0.0099465;
		start[63] = 0.0099139;
		start[64] = 0.0093908;
		start[65] = 0.001139;
		start[66] = 0.0042515;
		start[67] = 0.0021169;
		start[68] = 0.0089085;
		start[69] = 0.0053677;
		start[70] = 0.0010383;
		start[71] = 0.002527;
		start[72] = 0.0089007;
		start[73] = 0.0025843;
		start[74] = 0.0084942;
		start[75] = 0.0023193;
		start[76] = 0.0072134;
		start[77] = 0.0015357;
		start[78] = 0.00072726;
		start[79] = 0.0057694;
		start[80] = 0.0034496;
		start[81] = 0.0093526;
		start[82] = 0.00040995;
		start[83] = 0.0088908;
		start[84] = 0.0033201;
		start[85] = 0.0098637;
		start[86] = 0.0025108;
		start[87] = 0.00035124;
		start[88] = 0.0086913;
		start[89] = 0.0060499;
		start[90] = 0.0048033;
		start[91] = 0.0039366;
		start[92] = 0.0096028;
		start[93] = 0.0003235;
		start[94] = 0.0037782;
		start[95] = 0.0070064;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0020991;
		start[11] = 0.0053365;
		start[12] = 0.0035997;
		start[13] = 0.0071317;
		start[14] = 6.9389e-05;
		start[15] = 0.0063957;
		start[16] = 0.0012625;
		start[17] = 0.0077454;
		start[18] = 0.0053736;
		start[19] = 0.0059317;
		start[20] = 0.0011931;
		start[21] = 0.0061183;
		start[22] = 0.0048931;
		start[23] = 0.0037865;
		start[24] = 0.00011429;
		start[25] = 0.0085968;
		start[26] = 0.008913;
		start[27] = 0.0075442;
		start[28] = 0.0079982;
		start[29] = 0.0013356;
		start[30] = 0.0027461;
		start[31] = 0.0093699;
		start[32] = 0.0099558;
		start[33] = 0.0095166;
		start[34] = 0.0049966;
		start[35] = 0.0063017;
		start[36] = 0.00018054;
		start[37] = 0.0037216;
		start[38] = 9.1425e-05;
		start[39] = 0.0054672;
		start[40] = 0.0042248;
		start[41] = 0.0077903;
		start[42] = 0.0076932;
		start[43] = 0.0014827;
		start[44] = 0.0015038;
		start[45] = 0.0053642;
		start[46] = 0.0056146;
		start[47] = 0.0031215;
		start[48] = 0.0020457;
		start[49] = 0.0061925;
		start[50] = 0.0046405;
		start[51] = 0.0061533;
		start[52] = 6.1626e-05;
		start[53] = 0.0048415;
		start[54] = 0.0034393;
		start[55] = 0.0012286;
		start[56] = 0.0047995;
		start[57] = 0.0043652;
		start[58] = 0.00678;
		start[59] = 0.0066185;
		start[60] = 0.0013286;
		start[61] = 0.0022556;
		start[62] = 0.0013397;
		start[63] = 0.0053667;
		start[64] = 0.00052316;
		start[65] = 0.0025572;
		start[66] = 0.0044575;
		start[67] = 0.002022;
		start[68] = 0.0088664;
		start[69] = 0.0057283;
		start[70] = 0.0060784;
		start[71] = 0.0052496;
		start[72] = 0.0064299;
		start[73] = 0.0029117;
		start[74] = 0.0032506;
		start[75] = 0.0079937;
		start[76] = 0.0078192;
		start[77] = 0.0062999;
		start[78] = 0.0044903;
		start[79] = 0.00011816;
		start[80] = 0.0012233;
		start[81] = 0.0075683;
		start[82] = 0.0044149;
		start[83] = 0.0071143;
		start[84] = 0.0095822;
		start[85] = 0.0025553;
		start[86] = 0.0011086;
		start[87] = 0.0038993;
		start[88] = 0.0024938;
		start[89] = 0.0023342;
		start[90] = 0.0052128;
		start[91] = 0.0038137;
		start[92] = 0.0028099;
		start[93] = 0.0053307;
		start[94] = 0.0063765;
		start[95] = 0.0020157;
		std::vector<double> endEff (3);
		endEff[0] = 1.1199;
		endEff[1] = 0.29582;
		endEff[2] = -0.069952;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0046255;
		start[11] = 0.0010546;
		start[12] = 0.0035384;
		start[13] = 0.0066812;
		start[14] = 0.0047029;
		start[15] = 0.0018728;
		start[16] = 0.00029658;
		start[17] = 0.0052434;
		start[18] = 0.0038398;
		start[19] = 0.0055253;
		start[20] = 0.0094324;
		start[21] = 0.0055876;
		start[22] = 0.0010232;
		start[23] = 0.0022331;
		start[24] = 0.0076205;
		start[25] = 0.00055094;
		start[26] = 0.0064811;
		start[27] = 0.001685;
		start[28] = 0.0051565;
		start[29] = 0.0028196;
		start[30] = 0.0064964;
		start[31] = 0.0038713;
		start[32] = 0.0041106;
		start[33] = 0.00066541;
		start[34] = 0.0037957;
		start[35] = 0.0052807;
		start[36] = 0.0045337;
		start[37] = 0.0059032;
		start[38] = 0.0096714;
		start[39] = 0.00093855;
		start[40] = 0.00058202;
		start[41] = 0.008675;
		start[42] = 0.0069569;
		start[43] = 0.0084622;
		start[44] = 0.0059978;
		start[45] = 0.0078818;
		start[46] = 0.0036045;
		start[47] = 0.0089766;
		start[48] = 0.001275;
		start[49] = 0.0057544;
		start[50] = 0.0072102;
		start[51] = 0.0071867;
		start[52] = 0.0071111;
		start[53] = 0.0078912;
		start[54] = 0.0049127;
		start[55] = 0.0036735;
		start[56] = 0.0078573;
		start[57] = 0.0008766;
		start[58] = 0.0041936;
		start[59] = 0.0099938;
		start[60] = 0.0058061;
		start[61] = 0.0076201;
		start[62] = 0.0037332;
		start[63] = 0.0055151;
		start[64] = 0.0090668;
		start[65] = 0.0090841;
		start[66] = 0.0045252;
		start[67] = 0.00048695;
		start[68] = 0.007487;
		start[69] = 0.0052504;
		start[70] = 0.0022748;
		start[71] = 0.0079956;
		start[72] = 0.0032403;
		start[73] = 0.0081005;
		start[74] = 0.0099848;
		start[75] = 0.0087177;
		start[76] = 0.0032836;
		start[77] = 0.0065296;
		start[78] = 0.0025307;
		start[79] = 0.0092895;
		start[80] = 0.0043999;
		start[81] = 0.0051646;
		start[82] = 0.001046;
		start[83] = 0.0069979;
		start[84] = 0.0060663;
		start[85] = 0.0052431;
		start[86] = 0.0065284;
		start[87] = 0.0098934;
		start[88] = 0.0079548;
		start[89] = 0.0064434;
		start[90] = 0.0088395;
		start[91] = 0.002151;
		start[92] = 0.0042458;
		start[93] = 0.0096994;
		start[94] = 0.0065814;
		start[95] = 0.0059778;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0031086;
		start[11] = 8.1838e-05;
		start[12] = 0.0098487;
		start[13] = 0.0021841;
		start[14] = 0.0073249;
		start[15] = 0.0080137;
		start[16] = 0.0060049;
		start[17] = 0.0014896;
		start[18] = 0.0016517;
		start[19] = 0.0035025;
		start[20] = 0.0070308;
		start[21] = 3.9566e-05;
		start[22] = 0.0015269;
		start[23] = 0.0095283;
		start[24] = 0.009925;
		start[25] = 0.0036117;
		start[26] = 0.0032897;
		start[27] = 0.006182;
		start[28] = 0.0050901;
		start[29] = 0.0056813;
		start[30] = 0.0090671;
		start[31] = 0.0066092;
		start[32] = 0.0078621;
		start[33] = 0.0027109;
		start[34] = 0.0018226;
		start[35] = 0.0083711;
		start[36] = 0.00049196;
		start[37] = 0.0013092;
		start[38] = 0.0029806;
		start[39] = 0.0056645;
		start[40] = 0.0044429;
		start[41] = 0.0092606;
		start[42] = 0.0099923;
		start[43] = 0.0060144;
		start[44] = 0.0081104;
		start[45] = 0.0081514;
		start[46] = 0.00061674;
		start[47] = 0.0020611;
		start[48] = 0.0034929;
		start[49] = 0.002109;
		start[50] = 0.0021366;
		start[51] = 0.0032921;
		start[52] = 0.0027468;
		start[53] = 0.0073255;
		start[54] = 0.007074;
		start[55] = 0.0028685;
		start[56] = 6.4439e-05;
		start[57] = 0.0030757;
		start[58] = 0.0034007;
		start[59] = 0.0044393;
		start[60] = 0.0019902;
		start[61] = 0.0036942;
		start[62] = 0.0074732;
		start[63] = 0.0031902;
		start[64] = 0.0097827;
		start[65] = 0.0095975;
		start[66] = 0.0084759;
		start[67] = 0.0058883;
		start[68] = 0.0010934;
		start[69] = 0.0019336;
		start[70] = 0.0049424;
		start[71] = 0.00089071;
		start[72] = 0.0092982;
		start[73] = 0.0086783;
		start[74] = 0.0068934;
		start[75] = 0.0032013;
		start[76] = 0.0029408;
		start[77] = 0.0060096;
		start[78] = 0.0026295;
		start[79] = 0.003079;
		start[80] = 0.0028971;
		start[81] = 0.0089805;
		start[82] = 0.0091784;
		start[83] = 0.0051707;
		start[84] = 0.0049477;
		start[85] = 0.0088051;
		start[86] = 0.006163;
		start[87] = 0.001449;
		start[88] = 0.0011116;
		start[89] = 0.0014749;
		start[90] = 0.0096411;
		start[91] = 0.0049071;
		start[92] = 0.0063019;
		start[93] = 0.0039483;
		start[94] = 0.0079128;
		start[95] = 0.0068944;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0071022;
		start[11] = 0.0011607;
		start[12] = 0.0093582;
		start[13] = 0.003225;
		start[14] = 0.0097671;
		start[15] = 0.0051465;
		start[16] = 0.0051222;
		start[17] = 0.0011794;
		start[18] = 0.0064233;
		start[19] = 0.0033313;
		start[20] = 0.0098413;
		start[21] = 0.0097696;
		start[22] = 0.0094726;
		start[23] = 0.00026105;
		start[24] = 0.0036363;
		start[25] = 0.0006271;
		start[26] = 0.001542;
		start[27] = 0.0093072;
		start[28] = 0.0033541;
		start[29] = 0.0033218;
		start[30] = 0.0048043;
		start[31] = 0.0069733;
		start[32] = 0.0034947;
		start[33] = 0.0024774;
		start[34] = 0.0085416;
		start[35] = 0.008822;
		start[36] = 0.0086867;
		start[37] = 0.0017421;
		start[38] = 0.0022184;
		start[39] = 0.0043694;
		start[40] = 0.00046188;
		start[41] = 0.0062652;
		start[42] = 0.00091939;
		start[43] = 0.0057595;
		start[44] = 0.0065791;
		start[45] = 0.0051924;
		start[46] = 0.00069866;
		start[47] = 0.0087554;
		start[48] = 0.0032995;
		start[49] = 0.00952;
		start[50] = 0.0090975;
		start[51] = 0.0095679;
		start[52] = 0.0024062;
		start[53] = 0.0020972;
		start[54] = 0.0050287;
		start[55] = 0.005345;
		start[56] = 0.00045839;
		start[57] = 0.00041313;
		start[58] = 0.0076334;
		start[59] = 0.0046817;
		start[60] = 0.0067989;
		start[61] = 0.0059658;
		start[62] = 0.0052882;
		start[63] = 0.0095645;
		start[64] = 0.0040413;
		start[65] = 0.0080665;
		start[66] = 0.0099803;
		start[67] = 0.0062578;
		start[68] = 0.0025032;
		start[69] = 0.0087292;
		start[70] = 0.00056495;
		start[71] = 0.001991;
		start[72] = 0.0092857;
		start[73] = 0.0045173;
		start[74] = 0.0078261;
		start[75] = 0.0026237;
		start[76] = 0.0098876;
		start[77] = 0.0060047;
		start[78] = 0.0041998;
		start[79] = 0.0093497;
		start[80] = 0.0036618;
		start[81] = 0.005858;
		start[82] = 0.0017878;
		start[83] = 0.0059892;
		start[84] = 0.0055816;
		start[85] = 0.0058203;
		start[86] = 0.003491;
		start[87] = 0.0019341;
		start[88] = 0.005476;
		start[89] = 0.0079836;
		start[90] = 0.0036879;
		start[91] = 0.0047928;
		start[92] = 0.0088976;
		start[93] = 0.0082819;
		start[94] = 0.008703;
		start[95] = 0.0094743;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0028048;
		start[11] = 0.00048206;
		start[12] = 0.0015898;
		start[13] = 0.0012333;
		start[14] = 0.0068994;
		start[15] = 0.00015708;
		start[16] = 0.0080208;
		start[17] = 0.0024849;
		start[18] = 0.0090999;
		start[19] = 0.0026754;
		start[20] = 0.0095246;
		start[21] = 0.0035197;
		start[22] = 0.0079329;
		start[23] = 0.00094242;
		start[24] = 0.0066764;
		start[25] = 0.0026958;
		start[26] = 0.0080594;
		start[27] = 0.0088575;
		start[28] = 0.0002278;
		start[29] = 0.0066689;
		start[30] = 0.0071804;
		start[31] = 0.0043123;
		start[32] = 0.0018296;
		start[33] = 0.0076448;
		start[34] = 0.0015972;
		start[35] = 0.0039585;
		start[36] = 0.0088027;
		start[37] = 0.008963;
		start[38] = 0.004916;
		start[39] = 0.003497;
		start[40] = 0.0034076;
		start[41] = 0.0078044;
		start[42] = 0.0091205;
		start[43] = 0.0090629;
		start[44] = 0.0037783;
		start[45] = 0.0075347;
		start[46] = 0.0044538;
		start[47] = 0.0069446;
		start[48] = 0.0074649;
		start[49] = 0.001511;
		start[50] = 0.006669;
		start[51] = 0.0014234;
		start[52] = 0.0067311;
		start[53] = 0.0066482;
		start[54] = 0.00021817;
		start[55] = 0.0030422;
		start[56] = 0.0012366;
		start[57] = 0.0058801;
		start[58] = 0.0061352;
		start[59] = 0.0079082;
		start[60] = 0.0071165;
		start[61] = 0.0094153;
		start[62] = 0.0048201;
		start[63] = 0.0054447;
		start[64] = 0.0046957;
		start[65] = 0.0068767;
		start[66] = 0.0016735;
		start[67] = 0.0029022;
		start[68] = 0.0056601;
		start[69] = 0.0040061;
		start[70] = 0.0011123;
		start[71] = 0.0084905;
		start[72] = 0.0047756;
		start[73] = 0.0038346;
		start[74] = 0.0021769;
		start[75] = 0.0057534;
		start[76] = 0.004705;
		start[77] = 0.0050569;
		start[78] = 0.0050751;
		start[79] = 0.0032347;
		start[80] = 0.0011218;
		start[81] = 0.003144;
		start[82] = 0.00065875;
		start[83] = 0.001386;
		start[84] = 0.0025401;
		start[85] = 0.00146;
		start[86] = 0.0088453;
		start[87] = 0.0011414;
		start[88] = 0.0093221;
		start[89] = 0.0084072;
		start[90] = 0.0046219;
		start[91] = 0.0019203;
		start[92] = 0.0025223;
		start[93] = 0.0082047;
		start[94] = 0.0042031;
		start[95] = 0.0029408;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0088265;
		start[11] = 0.00869;
		start[12] = 0.008178;
		start[13] = 0.00042869;
		start[14] = 0.0068366;
		start[15] = 0.0083496;
		start[16] = 0.0026188;
		start[17] = 0.00071019;
		start[18] = 0.0060069;
		start[19] = 0.00033884;
		start[20] = 0.0053701;
		start[21] = 0.0022308;
		start[22] = 0.0067509;
		start[23] = 0.00018984;
		start[24] = 0.0084617;
		start[25] = 0.0021619;
		start[26] = 0.0076276;
		start[27] = 0.0023722;
		start[28] = 0.00072019;
		start[29] = 0.0043023;
		start[30] = 0.0059138;
		start[31] = 0.0097091;
		start[32] = 0.0068261;
		start[33] = 0.0039988;
		start[34] = 0.00054482;
		start[35] = 0.0063811;
		start[36] = 0.0009342;
		start[37] = 0.0031788;
		start[38] = 0.0060659;
		start[39] = 0.0040105;
		start[40] = 0.009347;
		start[41] = 0.0096287;
		start[42] = 0.0048512;
		start[43] = 0.0096233;
		start[44] = 0.00072595;
		start[45] = 0.0019417;
		start[46] = 1.6398e-05;
		start[47] = 0.0087411;
		start[48] = 0.0086035;
		start[49] = 0.00020481;
		start[50] = 7.3882e-05;
		start[51] = 0.0032593;
		start[52] = 0.0080274;
		start[53] = 0.0053157;
		start[54] = 0.0095896;
		start[55] = 0.0010826;
		start[56] = 0.0082099;
		start[57] = 0.0068866;
		start[58] = 0.008126;
		start[59] = 0.0078061;
		start[60] = 0.0044037;
		start[61] = 0.0075459;
		start[62] = 0.0091022;
		start[63] = 0.0013993;
		start[64] = 0.0082234;
		start[65] = 0.0031131;
		start[66] = 0.0027161;
		start[67] = 0.0082587;
		start[68] = 0.0023631;
		start[69] = 0.0021103;
		start[70] = 0.007988;
		start[71] = 0.0030518;
		start[72] = 0.0037647;
		start[73] = 0.00019766;
		start[74] = 0.0059472;
		start[75] = 0.0052515;
		start[76] = 0.00018639;
		start[77] = 0.003857;
		start[78] = 0.0034569;
		start[79] = 0.0011687;
		start[80] = 0.0052227;
		start[81] = 0.0088551;
		start[82] = 0.0097254;
		start[83] = 0.0073152;
		start[84] = 0.0053004;
		start[85] = 0.0099977;
		start[86] = 0.0034592;
		start[87] = 0.0036527;
		start[88] = 0.00010995;
		start[89] = 7.6208e-05;
		start[90] = 0.0020839;
		start[91] = 0.0076186;
		start[92] = 0.0079266;
		start[93] = 0.0034185;
		start[94] = 0.00057122;
		start[95] = 0.0019599;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0058383;
		start[11] = 0.0092459;
		start[12] = 0.0037013;
		start[13] = 0.0024735;
		start[14] = 0.0013389;
		start[15] = 0.0088373;
		start[16] = 0.0048224;
		start[17] = 0.003408;
		start[18] = 0.0032316;
		start[19] = 0.0071326;
		start[20] = 0.0039013;
		start[21] = 0.0033113;
		start[22] = 0.0050775;
		start[23] = 0.00033185;
		start[24] = 0.0078212;
		start[25] = 0.0070797;
		start[26] = 0.0077795;
		start[27] = 0.0025442;
		start[28] = 0.0030679;
		start[29] = 0.0081802;
		start[30] = 0.0013716;
		start[31] = 0.0069757;
		start[32] = 0.0093986;
		start[33] = 0.0039595;
		start[34] = 0.0037623;
		start[35] = 0.00055969;
		start[36] = 0.0012805;
		start[37] = 0.0010198;
		start[38] = 0.0075637;
		start[39] = 0.0086602;
		start[40] = 0.0099659;
		start[41] = 0.00098478;
		start[42] = 0.0017257;
		start[43] = 0.0048452;
		start[44] = 0.0093727;
		start[45] = 0.005096;
		start[46] = 0.0021629;
		start[47] = 0.00051465;
		start[48] = 0.0064995;
		start[49] = 0.00403;
		start[50] = 0.0022083;
		start[51] = 0.00048006;
		start[52] = 0.0046645;
		start[53] = 0.0057044;
		start[54] = 0.007295;
		start[55] = 0.0097044;
		start[56] = 0.0050271;
		start[57] = 0.0037366;
		start[58] = 0.0075504;
		start[59] = 0.0042731;
		start[60] = 0.0061893;
		start[61] = 0.0083446;
		start[62] = 0.0010106;
		start[63] = 0.0050494;
		start[64] = 0.0081517;
		start[65] = 0.0038014;
		start[66] = 0.0013537;
		start[67] = 0.0072685;
		start[68] = 0.00098645;
		start[69] = 0.0076049;
		start[70] = 0.0070349;
		start[71] = 0.0087791;
		start[72] = 0.008461;
		start[73] = 0.0032782;
		start[74] = 0.0010119;
		start[75] = 0.00693;
		start[76] = 0.00084878;
		start[77] = 0.0051035;
		start[78] = 0.0043738;
		start[79] = 0.0028246;
		start[80] = 0.0069803;
		start[81] = 0.0056994;
		start[82] = 0.0050301;
		start[83] = 0.00051193;
		start[84] = 0.0091283;
		start[85] = 0.00278;
		start[86] = 0.0069137;
		start[87] = 0.00049433;
		start[88] = 0.0032424;
		start[89] = 0.00020583;
		start[90] = 0.0010955;
		start[91] = 0.0021475;
		start[92] = 0.0092595;
		start[93] = 0.0068713;
		start[94] = 0.0036595;
		start[95] = 0.0099328;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.00064316;
		start[11] = 0.0051252;
		start[12] = 0.0080507;
		start[13] = 0.0073022;
		start[14] = 0.0059745;
		start[15] = 0.0011263;
		start[16] = 0.005466;
		start[17] = 0.0088819;
		start[18] = 0.002552;
		start[19] = 0.0039557;
		start[20] = 0.002546;
		start[21] = 0.0042173;
		start[22] = 0.0067038;
		start[23] = 0.0092307;
		start[24] = 0.0017884;
		start[25] = 0.0089816;
		start[26] = 0.0068567;
		start[27] = 0.0072117;
		start[28] = 0.0039126;
		start[29] = 0.0082421;
		start[30] = 0.0062312;
		start[31] = 0.0083157;
		start[32] = 0.00084832;
		start[33] = 0.00025891;
		start[34] = 0.0001071;
		start[35] = 0.0080598;
		start[36] = 0.00097034;
		start[37] = 0.0033488;
		start[38] = 0.0041101;
		start[39] = 0.0099169;
		start[40] = 0.0098171;
		start[41] = 0.0021881;
		start[42] = 0.0037004;
		start[43] = 0.001919;
		start[44] = 0.0017891;
		start[45] = 0.0061804;
		start[46] = 0.009433;
		start[47] = 0.0015922;
		start[48] = 0.0084661;
		start[49] = 0.0074068;
		start[50] = 0.0038439;
		start[51] = 0.0026055;
		start[52] = 0.0078416;
		start[53] = 0.0032405;
		start[54] = 0.0037884;
		start[55] = 0.0095173;
		start[56] = 0.0043974;
		start[57] = 0.0049521;
		start[58] = 0.00058624;
		start[59] = 0.0030913;
		start[60] = 0.0012802;
		start[61] = 0.00019712;
		start[62] = 0.0013482;
		start[63] = 0.0030022;
		start[64] = 0.0023271;
		start[65] = 0.006466;
		start[66] = 0.0037843;
		start[67] = 0.0074533;
		start[68] = 0.0017417;
		start[69] = 0.0080853;
		start[70] = 0.00016886;
		start[71] = 0.0059476;
		start[72] = 0.003001;
		start[73] = 0.0016028;
		start[74] = 0.0001822;
		start[75] = 0.0082435;
		start[76] = 0.0071795;
		start[77] = 0.0076981;
		start[78] = 0.0097692;
		start[79] = 0.0030875;
		start[80] = 0.0027465;
		start[81] = 0.008841;
		start[82] = 0.004138;
		start[83] = 0.0047759;
		start[84] = 0.0072901;
		start[85] = 0.0015093;
		start[86] = 0.0041749;
		start[87] = 0.0023453;
		start[88] = 0.0017134;
		start[89] = 0.0093379;
		start[90] = 0.0057549;
		start[91] = 0.0030887;
		start[92] = 0.0012339;
		start[93] = 0.0069799;
		start[94] = 0.0095962;
		start[95] = 0.000518;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0071086;
		start[11] = 0.0086807;
		start[12] = 0.0074198;
		start[13] = 0.0096741;
		start[14] = 0.0094136;
		start[15] = 0.0017224;
		start[16] = 0.0071092;
		start[17] = 0.0058842;
		start[18] = 0.0036998;
		start[19] = 0.0050468;
		start[20] = 0.008323;
		start[21] = 0.0022022;
		start[22] = 0.009569;
		start[23] = 0.0064025;
		start[24] = 0.0057611;
		start[25] = 0.0044402;
		start[26] = 0.0059961;
		start[27] = 0.0030793;
		start[28] = 0.0087035;
		start[29] = 0.0033447;
		start[30] = 0.0031176;
		start[31] = 0.0075896;
		start[32] = 0.0025914;
		start[33] = 0.0013052;
		start[34] = 0.0057799;
		start[35] = 0.0013329;
		start[36] = 0.0053112;
		start[37] = 0.0054197;
		start[38] = 0.0026621;
		start[39] = 0.005862;
		start[40] = 0.0023477;
		start[41] = 0.0028105;
		start[42] = 0.00566;
		start[43] = 0.0045036;
		start[44] = 0.0084455;
		start[45] = 0.00036921;
		start[46] = 0.0019558;
		start[47] = 0.00021331;
		start[48] = 0.0056263;
		start[49] = 0.00053837;
		start[50] = 0.003362;
		start[51] = 0.0045848;
		start[52] = 0.008752;
		start[53] = 0.0068959;
		start[54] = 0.0023177;
		start[55] = 0.0048869;
		start[56] = 0.0065688;
		start[57] = 0.0020661;
		start[58] = 0.0097867;
		start[59] = 0.0092135;
		start[60] = 0.0011608;
		start[61] = 0.0093881;
		start[62] = 0.0041335;
		start[63] = 0.0023697;
		start[64] = 0.00026387;
		start[65] = 0.0061009;
		start[66] = 0.0091698;
		start[67] = 0.0064595;
		start[68] = 0.0062676;
		start[69] = 0.0022025;
		start[70] = 0.0055231;
		start[71] = 0.0046991;
		start[72] = 0.0058515;
		start[73] = 0.0052709;
		start[74] = 0.0074524;
		start[75] = 0.0061845;
		start[76] = 0.0057471;
		start[77] = 0.0032544;
		start[78] = 0.0057972;
		start[79] = 0.00047494;
		start[80] = 0.0014945;
		start[81] = 0.0054683;
		start[82] = 0.0086522;
		start[83] = 0.001682;
		start[84] = 0.0043632;
		start[85] = 0.0020559;
		start[86] = 0.0070072;
		start[87] = 0.0025257;
		start[88] = 0.00084317;
		start[89] = 0.00092929;
		start[90] = 0.0098778;
		start[91] = 0.0098255;
		start[92] = 0.0088397;
		start[93] = 0.0076077;
		start[94] = 0.0011851;
		start[95] = 0.0090809;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0043802;
		start[11] = 0.0082663;
		start[12] = 0.0009002;
		start[13] = 0.0029618;
		start[14] = 0.0034103;
		start[15] = 0.002579;
		start[16] = 0.0076547;
		start[17] = 0.0051585;
		start[18] = 0.0028108;
		start[19] = 0.004693;
		start[20] = 0.0069814;
		start[21] = 0.0037873;
		start[22] = 0.006818;
		start[23] = 0.0041514;
		start[24] = 6.5222e-05;
		start[25] = 0.0094591;
		start[26] = 0.0083068;
		start[27] = 0.0086964;
		start[28] = 0.0086213;
		start[29] = 0.0052125;
		start[30] = 0.0065527;
		start[31] = 0.0012137;
		start[32] = 0.0071116;
		start[33] = 0.0078335;
		start[34] = 0.0048925;
		start[35] = 0.0089145;
		start[36] = 0.0015528;
		start[37] = 0.0075878;
		start[38] = 0.0019276;
		start[39] = 0.0069151;
		start[40] = 0.0096576;
		start[41] = 0.00071145;
		start[42] = 0.0090588;
		start[43] = 0.00087153;
		start[44] = 0.005073;
		start[45] = 0.0035399;
		start[46] = 0.0023138;
		start[47] = 0.0077111;
		start[48] = 0.0056156;
		start[49] = 0.0029053;
		start[50] = 0.00090554;
		start[51] = 0.0052427;
		start[52] = 0.0034313;
		start[53] = 0.0075973;
		start[54] = 0.00079104;
		start[55] = 0.0053789;
		start[56] = 0.0068375;
		start[57] = 0.007603;
		start[58] = 0.0042535;
		start[59] = 0.0024766;
		start[60] = 0.001917;
		start[61] = 0.0031889;
		start[62] = 0.0039855;
		start[63] = 0.0033414;
		start[64] = 0.0025531;
		start[65] = 0.0058774;
		start[66] = 0.0064972;
		start[67] = 0.004741;
		start[68] = 0.0030106;
		start[69] = 0.006229;
		start[70] = 0.00891;
		start[71] = 0.0087433;
		start[72] = 0.0083126;
		start[73] = 0.007863;
		start[74] = 0.0053064;
		start[75] = 0.0001022;
		start[76] = 0.003947;
		start[77] = 0.008796;
		start[78] = 0.00017944;
		start[79] = 0.0011204;
		start[80] = 0.0019127;
		start[81] = 0.0064126;
		start[82] = 0.0047751;
		start[83] = 0.0022483;
		start[84] = 0.0052671;
		start[85] = 0.0068143;
		start[86] = 0.0074421;
		start[87] = 0.0081827;
		start[88] = 0.009204;
		start[89] = 0.0085793;
		start[90] = 0.0052517;
		start[91] = 0.0017578;
		start[92] = 0.0054556;
		start[93] = 0.0089432;
		start[94] = 0.005497;
		start[95] = 0.0031583;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0056683;
		start[11] = 0.0049306;
		start[12] = 0.0022586;
		start[13] = 0.0099723;
		start[14] = 0.0099168;
		start[15] = 0.0083083;
		start[16] = 0.0077151;
		start[17] = 0.0080731;
		start[18] = 0.0063733;
		start[19] = 0.0014148;
		start[20] = 0.0091144;
		start[21] = 0.0026968;
		start[22] = 0.0099215;
		start[23] = 0.0045875;
		start[24] = 0.006356;
		start[25] = 0.0066048;
		start[26] = 0.00054092;
		start[27] = 0.00042915;
		start[28] = 0.0027742;
		start[29] = 0.00074246;
		start[30] = 0.006322;
		start[31] = 0.0034739;
		start[32] = 0.0056405;
		start[33] = 3.3046e-05;
		start[34] = 0.00074918;
		start[35] = 0.0075082;
		start[36] = 0.00050416;
		start[37] = 0.0051518;
		start[38] = 0.0017517;
		start[39] = 0.0076293;
		start[40] = 0.0059571;
		start[41] = 0.008958;
		start[42] = 0.0082129;
		start[43] = 0.0066852;
		start[44] = 0.0062147;
		start[45] = 0.0098867;
		start[46] = 0.0057854;
		start[47] = 0.0048987;
		start[48] = 0.0066204;
		start[49] = 0.0080945;
		start[50] = 0.0014731;
		start[51] = 0.0010644;
		start[52] = 0.0098134;
		start[53] = 0.0082599;
		start[54] = 0.007227;
		start[55] = 0.0018082;
		start[56] = 0.0007146;
		start[57] = 0.00085082;
		start[58] = 0.0079083;
		start[59] = 0.0030845;
		start[60] = 0.0066315;
		start[61] = 0.0079521;
		start[62] = 0.0061725;
		start[63] = 0.0056239;
		start[64] = 0.0083531;
		start[65] = 0.0045532;
		start[66] = 0.0017962;
		start[67] = 0.00010264;
		start[68] = 0.009089;
		start[69] = 0.0065968;
		start[70] = 0.0037312;
		start[71] = 0.006189;
		start[72] = 0.0016282;
		start[73] = 0.0014053;
		start[74] = 0.0013202;
		start[75] = 0.009593;
		start[76] = 0.0061085;
		start[77] = 0.0032018;
		start[78] = 0.0028649;
		start[79] = 0.0010112;
		start[80] = 0.007045;
		start[81] = 0.0086518;
		start[82] = 0.0001039;
		start[83] = 0.0067588;
		start[84] = 0.0017097;
		start[85] = 0.005694;
		start[86] = 0.0075751;
		start[87] = 0.0015954;
		start[88] = 0.0049924;
		start[89] = 0.00069332;
		start[90] = 0.0012376;
		start[91] = 0.006593;
		start[92] = 0.00485;
		start[93] = 0.0049715;
		start[94] = 0.0035918;
		start[95] = 0.0014902;
		std::vector<double> endEff (3);
		endEff[0] = 0.90404;
		endEff[1] = 0.1023;
		endEff[2] = -0.77522;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0070056;
		start[11] = 0.00012999;
		start[12] = 0.0016979;
		start[13] = 0.0016613;
		start[14] = 0.0092594;
		start[15] = 0.0070832;
		start[16] = 0.0016022;
		start[17] = 0.0032117;
		start[18] = 0.0069076;
		start[19] = 0.0045198;
		start[20] = 0.00024832;
		start[21] = 0.0033943;
		start[22] = 0.0078341;
		start[23] = 0.004139;
		start[24] = 0.007435;
		start[25] = 0.0042737;
		start[26] = 0.0068461;
		start[27] = 0.009054;
		start[28] = 0.0077707;
		start[29] = 0.0046166;
		start[30] = 0.0043905;
		start[31] = 4.6261e-05;
		start[32] = 0.0085755;
		start[33] = 0.0043072;
		start[34] = 0.007119;
		start[35] = 0.0036005;
		start[36] = 0.0078144;
		start[37] = 0.0060505;
		start[38] = 0.0054196;
		start[39] = 0.0061707;
		start[40] = 0.0013755;
		start[41] = 0.006818;
		start[42] = 0.004833;
		start[43] = 0.0073446;
		start[44] = 0.0037562;
		start[45] = 0.0049571;
		start[46] = 0.0072432;
		start[47] = 0.0098763;
		start[48] = 0.0083207;
		start[49] = 0.0099637;
		start[50] = 0.0097227;
		start[51] = 0.0060957;
		start[52] = 0.0024981;
		start[53] = 0.0095881;
		start[54] = 0.0095477;
		start[55] = 0.0066178;
		start[56] = 0.004089;
		start[57] = 0.00094048;
		start[58] = 0.0010456;
		start[59] = 0.0096123;
		start[60] = 0.0092689;
		start[61] = 0.0084997;
		start[62] = 0.00014684;
		start[63] = 0.0048502;
		start[64] = 0.0056328;
		start[65] = 0.0071124;
		start[66] = 0.0031165;
		start[67] = 0.0064287;
		start[68] = 0.00422;
		start[69] = 0.0063217;
		start[70] = 0.0024175;
		start[71] = 0.0076341;
		start[72] = 0.0048008;
		start[73] = 0.0034249;
		start[74] = 0.0013249;
		start[75] = 0.0063228;
		start[76] = 0.0045788;
		start[77] = 0.00034232;
		start[78] = 0.0051208;
		start[79] = 2.626e-05;
		start[80] = 0.00016617;
		start[81] = 0.0059356;
		start[82] = 0.0071102;
		start[83] = 0.0023309;
		start[84] = 0.007693;
		start[85] = 0.0024249;
		start[86] = 0.0066803;
		start[87] = 0.0014449;
		start[88] = 0.0052731;
		start[89] = 0.0021007;
		start[90] = 0.0050744;
		start[91] = 0.0050348;
		start[92] = 0.0052858;
		start[93] = 0.0081449;
		start[94] = 0.0077823;
		start[95] = 0.0060399;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0093164;
		start[11] = 0.0065471;
		start[12] = 0.00089445;
		start[13] = 0.00073125;
		start[14] = 0.007934;
		start[15] = 0.0042412;
		start[16] = 0.0023584;
		start[17] = 0.0075341;
		start[18] = 0.0056412;
		start[19] = 0.0066104;
		start[20] = 0.0014357;
		start[21] = 0.0062145;
		start[22] = 0.0054368;
		start[23] = 0.0093373;
		start[24] = 2.1216e-06;
		start[25] = 0.00083557;
		start[26] = 0.0065015;
		start[27] = 0.0045844;
		start[28] = 0.0035067;
		start[29] = 0.0049511;
		start[30] = 0.002425;
		start[31] = 0.0030492;
		start[32] = 0.00081152;
		start[33] = 0.0090168;
		start[34] = 0.0056763;
		start[35] = 0.0013052;
		start[36] = 0.0049838;
		start[37] = 0.0048569;
		start[38] = 0.0042766;
		start[39] = 0.0039738;
		start[40] = 0.004479;
		start[41] = 0.0075362;
		start[42] = 0.0044738;
		start[43] = 1.6959e-05;
		start[44] = 0.0025033;
		start[45] = 0.0048806;
		start[46] = 0.0062409;
		start[47] = 0.0027859;
		start[48] = 0.003291;
		start[49] = 0.0011303;
		start[50] = 0.0076904;
		start[51] = 0.0047067;
		start[52] = 0.0060437;
		start[53] = 0.0055164;
		start[54] = 0.0068984;
		start[55] = 0.0051934;
		start[56] = 0.0014473;
		start[57] = 0.0037618;
		start[58] = 0.0020449;
		start[59] = 0.00031098;
		start[60] = 0.0022548;
		start[61] = 0.0024546;
		start[62] = 0.0017917;
		start[63] = 0.0082643;
		start[64] = 0.0060202;
		start[65] = 0.0070735;
		start[66] = 0.0053063;
		start[67] = 0.0037793;
		start[68] = 0.0049227;
		start[69] = 0.0033155;
		start[70] = 0.0064092;
		start[71] = 0.0092653;
		start[72] = 0.0064044;
		start[73] = 0.0062292;
		start[74] = 0.0073206;
		start[75] = 0.0058386;
		start[76] = 0.0088729;
		start[77] = 0.0064651;
		start[78] = 0.0026229;
		start[79] = 0.0011434;
		start[80] = 0.0092138;
		start[81] = 0.00031313;
		start[82] = 0.0035528;
		start[83] = 0.0056327;
		start[84] = 0.0046988;
		start[85] = 0.0052276;
		start[86] = 0.0045778;
		start[87] = 0.0072745;
		start[88] = 0.0067098;
		start[89] = 0.009937;
		start[90] = 0.0097017;
		start[91] = 0.0045731;
		start[92] = 0.00076294;
		start[93] = 0.008822;
		start[94] = 0.0020724;
		start[95] = 0.0096334;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0092484;
		start[11] = 0.0039117;
		start[12] = 0.00030503;
		start[13] = 0.0065398;
		start[14] = 0.0079231;
		start[15] = 0.0095634;
		start[16] = 0.0055552;
		start[17] = 0.0065465;
		start[18] = 0.0022315;
		start[19] = 0.0050097;
		start[20] = 0.0062686;
		start[21] = 0.0034744;
		start[22] = 0.0058328;
		start[23] = 0.0015427;
		start[24] = 0.00079509;
		start[25] = 0.0058739;
		start[26] = 0.0036265;
		start[27] = 0.0021299;
		start[28] = 0.00070034;
		start[29] = 0.0047723;
		start[30] = 0.0072475;
		start[31] = 0.0024821;
		start[32] = 0.0018777;
		start[33] = 0.00051856;
		start[34] = 0.0043617;
		start[35] = 0.0023001;
		start[36] = 0.0043977;
		start[37] = 0.0074504;
		start[38] = 0.0021469;
		start[39] = 0.0061246;
		start[40] = 0.0033231;
		start[41] = 0.0010936;
		start[42] = 0.0081717;
		start[43] = 0.00071421;
		start[44] = 0.0062529;
		start[45] = 0.0077724;
		start[46] = 0.00012936;
		start[47] = 0.0025062;
		start[48] = 0.0097728;
		start[49] = 0.0067285;
		start[50] = 0.0030304;
		start[51] = 0.0057207;
		start[52] = 0.0025361;
		start[53] = 0.00056613;
		start[54] = 0.0018991;
		start[55] = 0.0039062;
		start[56] = 0.0092221;
		start[57] = 0.0020568;
		start[58] = 0.00058673;
		start[59] = 0.0036724;
		start[60] = 0.008372;
		start[61] = 0.0098963;
		start[62] = 0.0020068;
		start[63] = 0.0071976;
		start[64] = 0.0098585;
		start[65] = 0.0097292;
		start[66] = 0.00086853;
		start[67] = 0.0007321;
		start[68] = 0.0047083;
		start[69] = 0.0067023;
		start[70] = 0.0011565;
		start[71] = 0.00027406;
		start[72] = 0.0018228;
		start[73] = 0.0083943;
		start[74] = 0.0017499;
		start[75] = 0.0033116;
		start[76] = 0.003979;
		start[77] = 0.0066755;
		start[78] = 0.0042854;
		start[79] = 0.0059301;
		start[80] = 0.0019454;
		start[81] = 0.0037375;
		start[82] = 0.0039281;
		start[83] = 0.0051031;
		start[84] = 0.0081995;
		start[85] = 0.00086438;
		start[86] = 0.0020487;
		start[87] = 0.0075892;
		start[88] = 0.008766;
		start[89] = 0.0088702;
		start[90] = 0.0094524;
		start[91] = 0.0080214;
		start[92] = 0.0087992;
		start[93] = 0.0014564;
		start[94] = 0.0097006;
		start[95] = 0.0042396;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0016014;
		start[11] = 0.0015103;
		start[12] = 0.005523;
		start[13] = 0.0018779;
		start[14] = 0.0029795;
		start[15] = 0.0073027;
		start[16] = 0.0096099;
		start[17] = 0.0063157;
		start[18] = 0.0021053;
		start[19] = 0.0013189;
		start[20] = 0.00036741;
		start[21] = 0.0035061;
		start[22] = 0.0018507;
		start[23] = 0.00026427;
		start[24] = 0.0066361;
		start[25] = 0.0049074;
		start[26] = 0.0083443;
		start[27] = 0.00060924;
		start[28] = 0.0033812;
		start[29] = 0.004097;
		start[30] = 0.0031382;
		start[31] = 0.0056141;
		start[32] = 0.0045454;
		start[33] = 0.0075322;
		start[34] = 0.0069162;
		start[35] = 0.0071708;
		start[36] = 0.0048297;
		start[37] = 0.0046859;
		start[38] = 0.0050158;
		start[39] = 0.003808;
		start[40] = 0.0091077;
		start[41] = 0.0064691;
		start[42] = 0.0084819;
		start[43] = 0.00643;
		start[44] = 0.0015295;
		start[45] = 0.0011565;
		start[46] = 0.0031308;
		start[47] = 0.0033512;
		start[48] = 0.0072657;
		start[49] = 0.007509;
		start[50] = 0.0045196;
		start[51] = 0.0074004;
		start[52] = 0.0081869;
		start[53] = 0.0096086;
		start[54] = 0.0062811;
		start[55] = 0.00048363;
		start[56] = 0.0010762;
		start[57] = 0.0076642;
		start[58] = 0.0031195;
		start[59] = 0.0089647;
		start[60] = 0.0082507;
		start[61] = 0.0019845;
		start[62] = 0.0087929;
		start[63] = 0.0024712;
		start[64] = 0.0081023;
		start[65] = 0.0092896;
		start[66] = 0.0016998;
		start[67] = 0.0037685;
		start[68] = 0.0064898;
		start[69] = 0.0047504;
		start[70] = 0.0010756;
		start[71] = 0.0069181;
		start[72] = 0.0028177;
		start[73] = 0.0065865;
		start[74] = 0.0083319;
		start[75] = 0.0061096;
		start[76] = 0.00065404;
		start[77] = 0.005675;
		start[78] = 0.009547;
		start[79] = 0.0034045;
		start[80] = 0.0082237;
		start[81] = 0.00076854;
		start[82] = 0.0056277;
		start[83] = 0.0094928;
		start[84] = 0.0050021;
		start[85] = 0.0034473;
		start[86] = 0.0050451;
		start[87] = 0.005313;
		start[88] = 0.009282;
		start[89] = 0.0024299;
		start[90] = 0.0065237;
		start[91] = 0.0058354;
		start[92] = 0.0024358;
		start[93] = 0.0018386;
		start[94] = 0.00048783;
		start[95] = 0.00528;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0065768;
		start[11] = 0.0032998;
		start[12] = 0.0016834;
		start[13] = 0.0016546;
		start[14] = 0.00045867;
		start[15] = 0.0022914;
		start[16] = 0.0057681;
		start[17] = 0.0040564;
		start[18] = 0.0016334;
		start[19] = 0.0036897;
		start[20] = 0.0060222;
		start[21] = 0.0096288;
		start[22] = 0.0099121;
		start[23] = 0.00069948;
		start[24] = 0.0023183;
		start[25] = 0.0027561;
		start[26] = 0.0080995;
		start[27] = 0.009758;
		start[28] = 1.2306e-06;
		start[29] = 0.0047239;
		start[30] = 0.0047499;
		start[31] = 0.0012933;
		start[32] = 0.0036645;
		start[33] = 0.0048458;
		start[34] = 0.0080368;
		start[35] = 0.006825;
		start[36] = 0.00020955;
		start[37] = 0.0013332;
		start[38] = 0.0063732;
		start[39] = 0.0041509;
		start[40] = 0.00074463;
		start[41] = 0.008659;
		start[42] = 0.0035322;
		start[43] = 0.0086556;
		start[44] = 0.0033173;
		start[45] = 0.0069543;
		start[46] = 0.006453;
		start[47] = 0.0056186;
		start[48] = 0.0092693;
		start[49] = 0.0058909;
		start[50] = 0.0041167;
		start[51] = 0.0052165;
		start[52] = 0.0087821;
		start[53] = 0.0046118;
		start[54] = 0.0043537;
		start[55] = 0.0059385;
		start[56] = 0.00074962;
		start[57] = 0.00035795;
		start[58] = 0.002941;
		start[59] = 0.0075689;
		start[60] = 0.0076797;
		start[61] = 0.0008964;
		start[62] = 0.0030541;
		start[63] = 0.0020478;
		start[64] = 0.00011851;
		start[65] = 0.0064744;
		start[66] = 0.007061;
		start[67] = 0.0078009;
		start[68] = 0.0084743;
		start[69] = 0.0067514;
		start[70] = 0.0068576;
		start[71] = 0.0081463;
		start[72] = 3.4282e-05;
		start[73] = 0.0088038;
		start[74] = 0.0044747;
		start[75] = 0.0082051;
		start[76] = 0.0082838;
		start[77] = 0.0087206;
		start[78] = 0.0027508;
		start[79] = 0.0008911;
		start[80] = 4.4229e-05;
		start[81] = 0.0093433;
		start[82] = 0.0073153;
		start[83] = 0.0082119;
		start[84] = 0.0014128;
		start[85] = 0.0070148;
		start[86] = 0.0069816;
		start[87] = 0.0037233;
		start[88] = 0.0056903;
		start[89] = 0.0037152;
		start[90] = 0.0061954;
		start[91] = 0.0069525;
		start[92] = 0.0037018;
		start[93] = 0.0037921;
		start[94] = 0.0034925;
		start[95] = 0.0076912;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.001098;
		start[11] = 0.0066718;
		start[12] = 0.0090707;
		start[13] = 0.0079692;
		start[14] = 0.0020739;
		start[15] = 0.0056377;
		start[16] = 0.0059956;
		start[17] = 0.0054106;
		start[18] = 0.0033752;
		start[19] = 0.0014925;
		start[20] = 0.0026521;
		start[21] = 0.0066917;
		start[22] = 0.0054394;
		start[23] = 0.0031629;
		start[24] = 0.0084776;
		start[25] = 0.0039001;
		start[26] = 0.0021812;
		start[27] = 0.00087626;
		start[28] = 0.0012131;
		start[29] = 0.0027232;
		start[30] = 0.0083054;
		start[31] = 0.0066153;
		start[32] = 0.0094132;
		start[33] = 0.009497;
		start[34] = 0.0043309;
		start[35] = 0.0051503;
		start[36] = 0.00057276;
		start[37] = 0.0087015;
		start[38] = 0.0032185;
		start[39] = 0.0049411;
		start[40] = 0.0060206;
		start[41] = 0.0059597;
		start[42] = 0.0030326;
		start[43] = 0.0071653;
		start[44] = 0.0077821;
		start[45] = 0.0098989;
		start[46] = 0.0048521;
		start[47] = 0.0053267;
		start[48] = 0.0067947;
		start[49] = 0.000835;
		start[50] = 0.0010814;
		start[51] = 0.004258;
		start[52] = 0.00316;
		start[53] = 0.008586;
		start[54] = 0.005201;
		start[55] = 0.0060143;
		start[56] = 0.0020392;
		start[57] = 0.0076166;
		start[58] = 0.0025711;
		start[59] = 0.0068771;
		start[60] = 0.006333;
		start[61] = 0.0053817;
		start[62] = 0.0073658;
		start[63] = 0.0092045;
		start[64] = 0.0089873;
		start[65] = 0.0070078;
		start[66] = 0.0073282;
		start[67] = 0.007205;
		start[68] = 0.0066506;
		start[69] = 0.0032365;
		start[70] = 0.0051436;
		start[71] = 0.0043581;
		start[72] = 0.00062395;
		start[73] = 0.0075008;
		start[74] = 0.00077392;
		start[75] = 0.0016117;
		start[76] = 0.008134;
		start[77] = 0.0084187;
		start[78] = 0.0023184;
		start[79] = 0.0012958;
		start[80] = 0.00085131;
		start[81] = 0.0020315;
		start[82] = 0.0031513;
		start[83] = 0.0002535;
		start[84] = 0.0076893;
		start[85] = 0.002705;
		start[86] = 0.0029376;
		start[87] = 0.0028097;
		start[88] = 0.0055501;
		start[89] = 0.0048529;
		start[90] = 0.0074865;
		start[91] = 0.0095713;
		start[92] = 0.001198;
		start[93] = 0.0079422;
		start[94] = 0.00037806;
		start[95] = 0.0098002;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0050777;
		start[11] = 0.0016729;
		start[12] = 0.00049733;
		start[13] = 0.0026825;
		start[14] = 0.00053206;
		start[15] = 0.0079251;
		start[16] = 0.0019137;
		start[17] = 0.0040489;
		start[18] = 0.00097945;
		start[19] = 0.0079804;
		start[20] = 0.003503;
		start[21] = 0.0090753;
		start[22] = 0.0019531;
		start[23] = 0.0055341;
		start[24] = 0.0016131;
		start[25] = 0.0021267;
		start[26] = 0.0065753;
		start[27] = 0.0096194;
		start[28] = 0.0074881;
		start[29] = 0.0098305;
		start[30] = 0.0061128;
		start[31] = 0.0058398;
		start[32] = 0.0079149;
		start[33] = 0.0037755;
		start[34] = 0.0078617;
		start[35] = 0.0029576;
		start[36] = 0.005518;
		start[37] = 0.0091877;
		start[38] = 0.0063208;
		start[39] = 0.0011277;
		start[40] = 0.0017075;
		start[41] = 0.0017036;
		start[42] = 0.0079627;
		start[43] = 0.0026897;
		start[44] = 0.00074445;
		start[45] = 0.0083401;
		start[46] = 0.0012531;
		start[47] = 0.0082866;
		start[48] = 0.0058663;
		start[49] = 0.0049845;
		start[50] = 0.0010234;
		start[51] = 0.0010485;
		start[52] = 0.0048534;
		start[53] = 0.0086992;
		start[54] = 0.00093968;
		start[55] = 0.0069145;
		start[56] = 0.0013078;
		start[57] = 0.007048;
		start[58] = 0.0046195;
		start[59] = 0.0051201;
		start[60] = 0.0088154;
		start[61] = 0.00037473;
		start[62] = 0.0085653;
		start[63] = 0.0038481;
		start[64] = 0.0013211;
		start[65] = 0.0066543;
		start[66] = 0.0027403;
		start[67] = 0.0041729;
		start[68] = 0.004253;
		start[69] = 0.0080527;
		start[70] = 0.0071219;
		start[71] = 0.0012674;
		start[72] = 0.007654;
		start[73] = 0.005249;
		start[74] = 0.0074259;
		start[75] = 0.0035004;
		start[76] = 0.0099648;
		start[77] = 0.0052226;
		start[78] = 0.0078002;
		start[79] = 0.00028379;
		start[80] = 0.0024257;
		start[81] = 0.007147;
		start[82] = 0.0043604;
		start[83] = 0.0049115;
		start[84] = 0.0018613;
		start[85] = 0.0024259;
		start[86] = 0.00069384;
		start[87] = 0.0092038;
		start[88] = 0.0028059;
		start[89] = 0.0099224;
		start[90] = 0.0090512;
		start[91] = 0.0066474;
		start[92] = 0.0060865;
		start[93] = 0.0057359;
		start[94] = 0.0023864;
		start[95] = 0.0031007;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0043903;
		start[11] = 0.0046939;
		start[12] = 0.0053793;
		start[13] = 0.0087602;
		start[14] = 0.0045862;
		start[15] = 0.006521;
		start[16] = 0.0099694;
		start[17] = 0.00081475;
		start[18] = 0.0041027;
		start[19] = 0.005793;
		start[20] = 0.0077846;
		start[21] = 0.0031493;
		start[22] = 0.0032471;
		start[23] = 0.0018365;
		start[24] = 0.0014062;
		start[25] = 0.0017578;
		start[26] = 0.002377;
		start[27] = 0.0025106;
		start[28] = 0.0070924;
		start[29] = 0.005352;
		start[30] = 0.0080162;
		start[31] = 0.0043447;
		start[32] = 0.0035772;
		start[33] = 0.0021189;
		start[34] = 0.0088926;
		start[35] = 0.00044643;
		start[36] = 0.0032284;
		start[37] = 0.0014681;
		start[38] = 0.0060192;
		start[39] = 0.0092408;
		start[40] = 0.0040675;
		start[41] = 0.0097052;
		start[42] = 0.0041694;
		start[43] = 0.0095662;
		start[44] = 0.0045391;
		start[45] = 0.00078839;
		start[46] = 0.0072036;
		start[47] = 0.0019765;
		start[48] = 0.0073688;
		start[49] = 0.0059893;
		start[50] = 0.0012929;
		start[51] = 0.00090966;
		start[52] = 0.0067202;
		start[53] = 0.0043013;
		start[54] = 0.0025601;
		start[55] = 0.0039553;
		start[56] = 0.0030948;
		start[57] = 0.0033756;
		start[58] = 0.0052024;
		start[59] = 0.0022987;
		start[60] = 0.0099573;
		start[61] = 0.00060946;
		start[62] = 0.0035377;
		start[63] = 0.0028268;
		start[64] = 0.0043508;
		start[65] = 0.0035112;
		start[66] = 0.008263;
		start[67] = 0.005019;
		start[68] = 0.0034411;
		start[69] = 0.008925;
		start[70] = 0.0049064;
		start[71] = 0.0096942;
		start[72] = 0.0071223;
		start[73] = 0.0088167;
		start[74] = 0.0058697;
		start[75] = 0.0041573;
		start[76] = 0.0063298;
		start[77] = 0.0042336;
		start[78] = 0.0029995;
		start[79] = 0.0076739;
		start[80] = 0.0083108;
		start[81] = 0.0081904;
		start[82] = 0.0027395;
		start[83] = 0.0080687;
		start[84] = 0.0044387;
		start[85] = 0.0042344;
		start[86] = 0.0073742;
		start[87] = 0.009713;
		start[88] = 0.0071201;
		start[89] = 0.0048692;
		start[90] = 0.0086469;
		start[91] = 0.0021146;
		start[92] = 0.0071237;
		start[93] = 0.0034383;
		start[94] = 0.0015452;
		start[95] = 0.0070038;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0092398;
		start[11] = 0.0077844;
		start[12] = 0.0090006;
		start[13] = 0.0035562;
		start[14] = 0.00036825;
		start[15] = 0.0085671;
		start[16] = 0.0034006;
		start[17] = 0.0073844;
		start[18] = 0.0045752;
		start[19] = 0.0014842;
		start[20] = 0.0077695;
		start[21] = 0.0031571;
		start[22] = 0.0010925;
		start[23] = 0.0098482;
		start[24] = 0.0032106;
		start[25] = 0.0098591;
		start[26] = 0.0018669;
		start[27] = 0.0029987;
		start[28] = 0.0097155;
		start[29] = 0.0089292;
		start[30] = 0.0066281;
		start[31] = 0.006538;
		start[32] = 0.0035436;
		start[33] = 0.0069609;
		start[34] = 0.0052118;
		start[35] = 0.0025207;
		start[36] = 0.0035179;
		start[37] = 0.0018008;
		start[38] = 0.0068725;
		start[39] = 0.0018814;
		start[40] = 0.0086921;
		start[41] = 0.0035502;
		start[42] = 0.0072645;
		start[43] = 0.0084415;
		start[44] = 0.0086274;
		start[45] = 0.0095556;
		start[46] = 0.0087564;
		start[47] = 0.0040357;
		start[48] = 0.0022972;
		start[49] = 0.0047194;
		start[50] = 0.0045044;
		start[51] = 0.004791;
		start[52] = 0.0017693;
		start[53] = 0.0038034;
		start[54] = 0.0036717;
		start[55] = 0.0042626;
		start[56] = 0.0023559;
		start[57] = 0.006288;
		start[58] = 0.00078477;
		start[59] = 0.0087148;
		start[60] = 0.0028068;
		start[61] = 0.0049738;
		start[62] = 0.0011321;
		start[63] = 0.0066392;
		start[64] = 0.0057206;
		start[65] = 0.0014303;
		start[66] = 0.00079082;
		start[67] = 0.0050412;
		start[68] = 0.0052881;
		start[69] = 0.0075365;
		start[70] = 0.007413;
		start[71] = 0.0017727;
		start[72] = 0.003005;
		start[73] = 0.0028945;
		start[74] = 0.0078485;
		start[75] = 0.0024113;
		start[76] = 0.0054762;
		start[77] = 0.0021801;
		start[78] = 0.0066487;
		start[79] = 0.0077315;
		start[80] = 0.0095459;
		start[81] = 0.0079172;
		start[82] = 0.0035227;
		start[83] = 0.0064682;
		start[84] = 0.00061701;
		start[85] = 0.00097546;
		start[86] = 0.006868;
		start[87] = 0.0091726;
		start[88] = 0.0040217;
		start[89] = 0.0017999;
		start[90] = 0.00067488;
		start[91] = 0.00069967;
		start[92] = 0.0090419;
		start[93] = 0.004263;
		start[94] = 0.0041552;
		start[95] = 0.0054125;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0081362;
		start[11] = 0.0049223;
		start[12] = 0.0039802;
		start[13] = 0.0034422;
		start[14] = 0.0089946;
		start[15] = 0.0027066;
		start[16] = 0.0070667;
		start[17] = 0.0046162;
		start[18] = 0.0060886;
		start[19] = 0.0091279;
		start[20] = 0.006525;
		start[21] = 0.006551;
		start[22] = 0.0095299;
		start[23] = 0.0099505;
		start[24] = 0.0065161;
		start[25] = 0.0070474;
		start[26] = 0.0021862;
		start[27] = 0.0019058;
		start[28] = 0.002846;
		start[29] = 0.0064539;
		start[30] = 0.0061397;
		start[31] = 0.0087186;
		start[32] = 0.0027972;
		start[33] = 0.0023306;
		start[34] = 0.0026108;
		start[35] = 0.0057328;
		start[36] = 0.0093722;
		start[37] = 0.0093885;
		start[38] = 0.0015539;
		start[39] = 0.0015807;
		start[40] = 0.0023984;
		start[41] = 0.0079912;
		start[42] = 0.0050877;
		start[43] = 0.0097588;
		start[44] = 0.00094473;
		start[45] = 0.0032826;
		start[46] = 0.0099567;
		start[47] = 0.0049458;
		start[48] = 0.0046236;
		start[49] = 0.0045725;
		start[50] = 0.0098433;
		start[51] = 0.0033907;
		start[52] = 0.006804;
		start[53] = 0.0037106;
		start[54] = 0.0078758;
		start[55] = 0.00052369;
		start[56] = 0.001109;
		start[57] = 0.0074697;
		start[58] = 0.0032295;
		start[59] = 0.0048872;
		start[60] = 0.00083262;
		start[61] = 0.0040003;
		start[62] = 0.0017299;
		start[63] = 0.0032377;
		start[64] = 0.0038713;
		start[65] = 0.0077099;
		start[66] = 0.0043724;
		start[67] = 0.0069102;
		start[68] = 0.009917;
		start[69] = 0.0010618;
		start[70] = 0.0048732;
		start[71] = 0.0081151;
		start[72] = 0.00070268;
		start[73] = 0.0062921;
		start[74] = 0.008849;
		start[75] = 0.0083475;
		start[76] = 0.00352;
		start[77] = 0.0016373;
		start[78] = 0.0054;
		start[79] = 0.0075666;
		start[80] = 0.0027867;
		start[81] = 0.0081504;
		start[82] = 0.0074724;
		start[83] = 0.004581;
		start[84] = 0.0050023;
		start[85] = 0.0016274;
		start[86] = 0.0096816;
		start[87] = 0.00092525;
		start[88] = 0.0091604;
		start[89] = 0.0011002;
		start[90] = 0.0076627;
		start[91] = 0.0048967;
		start[92] = 0.0094909;
		start[93] = 0.0042011;
		start[94] = 0.0020671;
		start[95] = 0.0065495;
		std::vector<double> endEff (3);
		endEff[0] = 0.2658;
		endEff[1] = -1.0015;
		endEff[2] = 0.13214;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0081711;
		start[11] = 0.008408;
		start[12] = 0.0027569;
		start[13] = 0.00040989;
		start[14] = 0.0044846;
		start[15] = 0.0097254;
		start[16] = 0.0071676;
		start[17] = 0.0049156;
		start[18] = 0.0054472;
		start[19] = 0.0028821;
		start[20] = 0.0016585;
		start[21] = 0.0065668;
		start[22] = 0.0050653;
		start[23] = 0.0095452;
		start[24] = 0.0063028;
		start[25] = 0.0088359;
		start[26] = 0.0084799;
		start[27] = 0.0035275;
		start[28] = 0.0075718;
		start[29] = 0.0042431;
		start[30] = 0.0089093;
		start[31] = 0.0022569;
		start[32] = 0.0057552;
		start[33] = 0.0013799;
		start[34] = 0.0010049;
		start[35] = 0.0044104;
		start[36] = 0.0067999;
		start[37] = 0.0041026;
		start[38] = 0.0032439;
		start[39] = 0.0097617;
		start[40] = 0.006688;
		start[41] = 0.0025226;
		start[42] = 0.0066807;
		start[43] = 0.002041;
		start[44] = 0.0043844;
		start[45] = 0.0084488;
		start[46] = 7.8904e-05;
		start[47] = 0.0059374;
		start[48] = 0.0093825;
		start[49] = 0.0028698;
		start[50] = 0.0083047;
		start[51] = 0.0013675;
		start[52] = 0.0079451;
		start[53] = 0.0016136;
		start[54] = 0.00034232;
		start[55] = 0.0025499;
		start[56] = 0.0075883;
		start[57] = 0.0091615;
		start[58] = 0.0029971;
		start[59] = 0.00020637;
		start[60] = 0.0068572;
		start[61] = 0.0097559;
		start[62] = 0.0025306;
		start[63] = 0.0037511;
		start[64] = 0.007581;
		start[65] = 0.0038587;
		start[66] = 0.0036083;
		start[67] = 0.0079037;
		start[68] = 0.0075924;
		start[69] = 0.00069945;
		start[70] = 0.0029194;
		start[71] = 0.0084672;
		start[72] = 0.00023942;
		start[73] = 0.0075096;
		start[74] = 0.0064714;
		start[75] = 0.0062787;
		start[76] = 0.0020692;
		start[77] = 0.0077109;
		start[78] = 0.0033554;
		start[79] = 0.0099367;
		start[80] = 0.0018159;
		start[81] = 0.0056282;
		start[82] = 0.0012429;
		start[83] = 0.0057559;
		start[84] = 0.0068762;
		start[85] = 0.0013459;
		start[86] = 0.0052071;
		start[87] = 0.0059766;
		start[88] = 0.001447;
		start[89] = 0.0091665;
		start[90] = 0.0062404;
		start[91] = 0.0074856;
		start[92] = 0.0077726;
		start[93] = 0.0045095;
		start[94] = 0.00060282;
		start[95] = 0.0032849;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.00028805;
		start[11] = 0.0056306;
		start[12] = 0.0030792;
		start[13] = 0.0044558;
		start[14] = 0.005126;
		start[15] = 0.0088683;
		start[16] = 0.0011086;
		start[17] = 0.0070458;
		start[18] = 0.0017205;
		start[19] = 0.0027777;
		start[20] = 0.0071756;
		start[21] = 0.0016381;
		start[22] = 0.0069473;
		start[23] = 0.0021776;
		start[24] = 0.0054357;
		start[25] = 0.0099784;
		start[26] = 0.0027187;
		start[27] = 0.0097551;
		start[28] = 0.0071766;
		start[29] = 0.0076259;
		start[30] = 0.0034136;
		start[31] = 0.0039987;
		start[32] = 0.0085868;
		start[33] = 0.0010302;
		start[34] = 0.0041646;
		start[35] = 0.0078978;
		start[36] = 0.0052085;
		start[37] = 0.0015247;
		start[38] = 0.0016224;
		start[39] = 0.0031859;
		start[40] = 0.0034363;
		start[41] = 0.004093;
		start[42] = 0.0038521;
		start[43] = 0.0051719;
		start[44] = 0.0093287;
		start[45] = 0.00031375;
		start[46] = 0.0054184;
		start[47] = 0.0050635;
		start[48] = 0.0039285;
		start[49] = 9.2672e-05;
		start[50] = 0.0098027;
		start[51] = 0.00898;
		start[52] = 0.0072941;
		start[53] = 0.0041509;
		start[54] = 0.00045431;
		start[55] = 0.0085238;
		start[56] = 0.008029;
		start[57] = 0.0051881;
		start[58] = 0.0021533;
		start[59] = 0.0095103;
		start[60] = 0.0013856;
		start[61] = 0.0064385;
		start[62] = 0.0040621;
		start[63] = 0.00024916;
		start[64] = 0.0054751;
		start[65] = 0.0028989;
		start[66] = 0.0094203;
		start[67] = 0.0076014;
		start[68] = 0.00024554;
		start[69] = 0.0015772;
		start[70] = 0.0058106;
		start[71] = 0.0058628;
		start[72] = 0.0077405;
		start[73] = 0.0024079;
		start[74] = 0.0052512;
		start[75] = 0.0055395;
		start[76] = 0.0033789;
		start[77] = 0.0088552;
		start[78] = 0.0018808;
		start[79] = 0.0059028;
		start[80] = 0.0013531;
		start[81] = 0.0072907;
		start[82] = 0.0025788;
		start[83] = 0.0059863;
		start[84] = 0.00047699;
		start[85] = 0.0010704;
		start[86] = 0.0019126;
		start[87] = 0.0054733;
		start[88] = 0.0053914;
		start[89] = 0.0049269;
		start[90] = 0.0014881;
		start[91] = 0.0032391;
		start[92] = 0.00039125;
		start[93] = 0.00069886;
		start[94] = 0.00034754;
		start[95] = 0.005635;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0053254;
		start[11] = 0.0058675;
		start[12] = 0.0024653;
		start[13] = 0.0075287;
		start[14] = 0.0077401;
		start[15] = 0.0054546;
		start[16] = 0.0083875;
		start[17] = 0.0021065;
		start[18] = 0.0042675;
		start[19] = 0.0012075;
		start[20] = 0.006917;
		start[21] = 0.0088987;
		start[22] = 0.0015404;
		start[23] = 0.0044399;
		start[24] = 0.0099073;
		start[25] = 0.0055918;
		start[26] = 0.0052279;
		start[27] = 0.0077899;
		start[28] = 0.0088617;
		start[29] = 0.0010851;
		start[30] = 0.0063591;
		start[31] = 0.0033386;
		start[32] = 0.0021721;
		start[33] = 2.5473e-05;
		start[34] = 6.6063e-05;
		start[35] = 0.0051725;
		start[36] = 0.0035053;
		start[37] = 0.0025886;
		start[38] = 0.0082743;
		start[39] = 0.0027342;
		start[40] = 0.007684;
		start[41] = 0.00091634;
		start[42] = 0.0070511;
		start[43] = 0.0085585;
		start[44] = 0.0041507;
		start[45] = 0.0098512;
		start[46] = 0.0056692;
		start[47] = 0.0039541;
		start[48] = 0.0068378;
		start[49] = 0.0019917;
		start[50] = 0.0018212;
		start[51] = 0.0081173;
		start[52] = 0.0069469;
		start[53] = 0.00081806;
		start[54] = 0.0066298;
		start[55] = 0.005108;
		start[56] = 0.0016836;
		start[57] = 0.00051958;
		start[58] = 0.0039774;
		start[59] = 0.0007235;
		start[60] = 0.0058477;
		start[61] = 0.00082994;
		start[62] = 0.0069182;
		start[63] = 0.0010883;
		start[64] = 0.00078897;
		start[65] = 0.00946;
		start[66] = 0.0048533;
		start[67] = 0.0002845;
		start[68] = 0.0062514;
		start[69] = 0.0024627;
		start[70] = 0.0038433;
		start[71] = 0.0029841;
		start[72] = 0.0014342;
		start[73] = 0.0013102;
		start[74] = 0.00067289;
		start[75] = 0.0080252;
		start[76] = 0.004562;
		start[77] = 0.0060118;
		start[78] = 0.0033343;
		start[79] = 0.0021578;
		start[80] = 0.0056177;
		start[81] = 0.0087544;
		start[82] = 0.0045995;
		start[83] = 0.0082828;
		start[84] = 0.006128;
		start[85] = 0.0070671;
		start[86] = 0.0012256;
		start[87] = 0.002996;
		start[88] = 0.0068239;
		start[89] = 0.0075282;
		start[90] = 0.0054568;
		start[91] = 0.0072248;
		start[92] = 0.0046293;
		start[93] = 0.00043727;
		start[94] = 0.00050476;
		start[95] = 0.00662;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0086358;
		start[11] = 0.0049145;
		start[12] = 0.0042677;
		start[13] = 0.0079231;
		start[14] = 0.0039066;
		start[15] = 0.0047588;
		start[16] = 0.0016637;
		start[17] = 0.0055681;
		start[18] = 0.0005068;
		start[19] = 0.0068132;
		start[20] = 0.0094212;
		start[21] = 0.0066232;
		start[22] = 0.0011524;
		start[23] = 0.0015457;
		start[24] = 0.0029363;
		start[25] = 0.0092678;
		start[26] = 0.0080804;
		start[27] = 0.0057522;
		start[28] = 0.0056359;
		start[29] = 0.0055292;
		start[30] = 0.0093984;
		start[31] = 0.006585;
		start[32] = 0.0032314;
		start[33] = 0.00036217;
		start[34] = 0.009721;
		start[35] = 0.00464;
		start[36] = 0.0059104;
		start[37] = 0.0072064;
		start[38] = 0.00011712;
		start[39] = 0.0083027;
		start[40] = 0.0062743;
		start[41] = 0.0099684;
		start[42] = 0.00055589;
		start[43] = 0.0032226;
		start[44] = 0.0098508;
		start[45] = 0.0077903;
		start[46] = 0.0072082;
		start[47] = 0.0073603;
		start[48] = 0.0010736;
		start[49] = 0.0087534;
		start[50] = 0.008676;
		start[51] = 0.00061331;
		start[52] = 0.0077529;
		start[53] = 0.0010088;
		start[54] = 0.007712;
		start[55] = 0.0078092;
		start[56] = 0.00033249;
		start[57] = 0.0040341;
		start[58] = 0.0019589;
		start[59] = 0.0059668;
		start[60] = 0.0065617;
		start[61] = 0.005006;
		start[62] = 0.0025543;
		start[63] = 0.0023067;
		start[64] = 0.0024907;
		start[65] = 0.0042641;
		start[66] = 0.0029882;
		start[67] = 0.00078885;
		start[68] = 0.0019871;
		start[69] = 0.001765;
		start[70] = 0.00081792;
		start[71] = 0.0064049;
		start[72] = 0.0022727;
		start[73] = 0.009489;
		start[74] = 0.0014834;
		start[75] = 0.0040065;
		start[76] = 0.0040956;
		start[77] = 0.0059463;
		start[78] = 0.0042325;
		start[79] = 0.0090334;
		start[80] = 8.9535e-05;
		start[81] = 0.0067576;
		start[82] = 0.0093866;
		start[83] = 0.006357;
		start[84] = 0.0057397;
		start[85] = 0.0050966;
		start[86] = 0.003834;
		start[87] = 0.0086858;
		start[88] = 0.0061431;
		start[89] = 0.0070107;
		start[90] = 0.0095501;
		start[91] = 0.0022835;
		start[92] = 0.0072764;
		start[93] = 0.0019904;
		start[94] = 0.004415;
		start[95] = 0.0033899;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.00669;
		start[11] = 0.0098238;
		start[12] = 0.0066974;
		start[13] = 0.0014028;
		start[14] = 0.0046079;
		start[15] = 0.00022737;
		start[16] = 0.0036486;
		start[17] = 0.0033307;
		start[18] = 0.0092714;
		start[19] = 0.003182;
		start[20] = 0.0063457;
		start[21] = 0.0072997;
		start[22] = 0.0021011;
		start[23] = 0.0038414;
		start[24] = 0.0011729;
		start[25] = 0.0012904;
		start[26] = 0.0068386;
		start[27] = 0.0071126;
		start[28] = 0.0040457;
		start[29] = 6.4539e-05;
		start[30] = 0.0034725;
		start[31] = 0.0057394;
		start[32] = 0.0053245;
		start[33] = 0.0022821;
		start[34] = 0.009802;
		start[35] = 0.0023987;
		start[36] = 0.0046654;
		start[37] = 0.0063359;
		start[38] = 0.0099464;
		start[39] = 0.0083878;
		start[40] = 0.0049961;
		start[41] = 0.0019777;
		start[42] = 0.00039655;
		start[43] = 0.005762;
		start[44] = 0.0023338;
		start[45] = 0.0043204;
		start[46] = 0.00079225;
		start[47] = 0.008836;
		start[48] = 0.0046974;
		start[49] = 0.0054072;
		start[50] = 0.0011593;
		start[51] = 0.0081266;
		start[52] = 0.0047269;
		start[53] = 0.0062652;
		start[54] = 0.0057333;
		start[55] = 0.0053837;
		start[56] = 0.0061159;
		start[57] = 0.0015824;
		start[58] = 0.0079051;
		start[59] = 0.001459;
		start[60] = 0.0061928;
		start[61] = 0.0032324;
		start[62] = 0.0069519;
		start[63] = 0.0061162;
		start[64] = 0.0035862;
		start[65] = 0.0015622;
		start[66] = 0.0025767;
		start[67] = 0.0046864;
		start[68] = 0.0023231;
		start[69] = 0.00055785;
		start[70] = 0.0052392;
		start[71] = 0.009198;
		start[72] = 0.0045565;
		start[73] = 0.0046933;
		start[74] = 0.0038974;
		start[75] = 0.0098445;
		start[76] = 0.00059797;
		start[77] = 0.0078705;
		start[78] = 0.0038208;
		start[79] = 0.0060712;
		start[80] = 0.0054978;
		start[81] = 0.0053606;
		start[82] = 0.0031034;
		start[83] = 0.0089056;
		start[84] = 0.0019325;
		start[85] = 0.0020293;
		start[86] = 0.007341;
		start[87] = 0.0015697;
		start[88] = 0.0077898;
		start[89] = 0.00031859;
		start[90] = 0.0042212;
		start[91] = 0.001542;
		start[92] = 0.0050767;
		start[93] = 0.0017527;
		start[94] = 0.0040159;
		start[95] = 0.0093621;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0029137;
		start[11] = 0.0014394;
		start[12] = 0.0091331;
		start[13] = 0.009245;
		start[14] = 0.0017669;
		start[15] = 0.00037932;
		start[16] = 0.0038419;
		start[17] = 0.0076103;
		start[18] = 0.0050908;
		start[19] = 0.004986;
		start[20] = 0.0065962;
		start[21] = 0.0015659;
		start[22] = 0.0070769;
		start[23] = 0.0056621;
		start[24] = 0.0083444;
		start[25] = 0.0079389;
		start[26] = 0.00025139;
		start[27] = 0.0044744;
		start[28] = 0.0029631;
		start[29] = 0.00042389;
		start[30] = 0.0080696;
		start[31] = 0.0067856;
		start[32] = 0.0047197;
		start[33] = 0.0022197;
		start[34] = 0.0029961;
		start[35] = 0.0053697;
		start[36] = 0.0025411;
		start[37] = 0.0025299;
		start[38] = 0.007521;
		start[39] = 0.0025907;
		start[40] = 0.00011748;
		start[41] = 0.0045843;
		start[42] = 0.0022404;
		start[43] = 0.0085701;
		start[44] = 0.0064287;
		start[45] = 0.0013794;
		start[46] = 0.0079;
		start[47] = 0.0056946;
		start[48] = 0.0012221;
		start[49] = 0.005814;
		start[50] = 0.0028396;
		start[51] = 0.0092963;
		start[52] = 0.0037113;
		start[53] = 0.00031099;
		start[54] = 0.0090977;
		start[55] = 0.0016633;
		start[56] = 0.0042031;
		start[57] = 0.0035133;
		start[58] = 0.0050939;
		start[59] = 0.00028607;
		start[60] = 0.0022122;
		start[61] = 0.0068739;
		start[62] = 0.0068579;
		start[63] = 0.0050848;
		start[64] = 0.00023089;
		start[65] = 0.0071001;
		start[66] = 0.0009761;
		start[67] = 0.0022156;
		start[68] = 0.0053392;
		start[69] = 0.0061938;
		start[70] = 0.0043334;
		start[71] = 0.0054214;
		start[72] = 0.0090997;
		start[73] = 0.00074003;
		start[74] = 0.0017869;
		start[75] = 0.0077654;
		start[76] = 0.0063575;
		start[77] = 0.0014211;
		start[78] = 0.0062607;
		start[79] = 0.00093573;
		start[80] = 0.0077524;
		start[81] = 0.0079137;
		start[82] = 0.0027862;
		start[83] = 0.0057438;
		start[84] = 0.009266;
		start[85] = 0.0034119;
		start[86] = 0.0056875;
		start[87] = 0.0074473;
		start[88] = 0.0081425;
		start[89] = 0.0090536;
		start[90] = 0.008839;
		start[91] = 0.00794;
		start[92] = 0.0096462;
		start[93] = 0.0096269;
		start[94] = 0.0028986;
		start[95] = 0.0088272;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0013996;
		start[11] = 0.007859;
		start[12] = 0.00062644;
		start[13] = 2.0347e-06;
		start[14] = 0.0030605;
		start[15] = 0.0023535;
		start[16] = 0.0046431;
		start[17] = 0.0027006;
		start[18] = 0.0006398;
		start[19] = 0.0083068;
		start[20] = 0.0089356;
		start[21] = 0.00087125;
		start[22] = 0.0077438;
		start[23] = 0.0080433;
		start[24] = 0.0094556;
		start[25] = 0.001696;
		start[26] = 0.009096;
		start[27] = 0.0089192;
		start[28] = 0.0070736;
		start[29] = 0.004513;
		start[30] = 6.5739e-06;
		start[31] = 0.00047674;
		start[32] = 0.0021338;
		start[33] = 0.0047594;
		start[34] = 0.00047988;
		start[35] = 0.0069674;
		start[36] = 0.0080333;
		start[37] = 0.0046915;
		start[38] = 0.0039795;
		start[39] = 0.0059622;
		start[40] = 0.0060977;
		start[41] = 0.0014128;
		start[42] = 0.0076793;
		start[43] = 0.0079194;
		start[44] = 0.0003808;
		start[45] = 0.0075235;
		start[46] = 0.0038512;
		start[47] = 0.0041805;
		start[48] = 0.0036533;
		start[49] = 0.0031837;
		start[50] = 0.0044966;
		start[51] = 8.5059e-05;
		start[52] = 0.003958;
		start[53] = 0.0051419;
		start[54] = 0.0082584;
		start[55] = 0.0024837;
		start[56] = 7.9944e-05;
		start[57] = 0.0027899;
		start[58] = 0.00049129;
		start[59] = 0.00071326;
		start[60] = 0.00090177;
		start[61] = 0.0061911;
		start[62] = 0.0067778;
		start[63] = 0.003056;
		start[64] = 0.0092248;
		start[65] = 0.00011062;
		start[66] = 0.0017604;
		start[67] = 0.0080099;
		start[68] = 0.0085223;
		start[69] = 0.0081261;
		start[70] = 0.008283;
		start[71] = 0.0098233;
		start[72] = 0.0031087;
		start[73] = 0.0022965;
		start[74] = 0.0049144;
		start[75] = 0.0070553;
		start[76] = 0.0042476;
		start[77] = 0.0014232;
		start[78] = 0.0053219;
		start[79] = 0.0091765;
		start[80] = 0.0010844;
		start[81] = 0.0022739;
		start[82] = 0.009119;
		start[83] = 0.00027003;
		start[84] = 0.0069847;
		start[85] = 0.0017115;
		start[86] = 0.005842;
		start[87] = 0.0086412;
		start[88] = 0.008322;
		start[89] = 0.0037622;
		start[90] = 0.0062113;
		start[91] = 0.0029596;
		start[92] = 0.0048112;
		start[93] = 0.0051741;
		start[94] = 0.0015943;
		start[95] = 0.0048707;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.008419;
		start[11] = 0.0066368;
		start[12] = 0.0039539;
		start[13] = 0.0013528;
		start[14] = 0.0039961;
		start[15] = 0.0021114;
		start[16] = 0.0031725;
		start[17] = 0.008331;
		start[18] = 0.0054232;
		start[19] = 0.0015969;
		start[20] = 0.0013315;
		start[21] = 0.0075503;
		start[22] = 0.0063537;
		start[23] = 0.0069914;
		start[24] = 0.0097294;
		start[25] = 0.0041347;
		start[26] = 0.0023483;
		start[27] = 0.0016075;
		start[28] = 0.0013687;
		start[29] = 0.0012764;
		start[30] = 0.0060407;
		start[31] = 0.009652;
		start[32] = 0.0017711;
		start[33] = 0.00057134;
		start[34] = 0.0069908;
		start[35] = 0.0011464;
		start[36] = 0.0026436;
		start[37] = 0.00014905;
		start[38] = 0.00084154;
		start[39] = 0.003842;
		start[40] = 0.0088497;
		start[41] = 0.0093325;
		start[42] = 0.0018587;
		start[43] = 0.0050259;
		start[44] = 0.0013389;
		start[45] = 0.0033939;
		start[46] = 0.0058326;
		start[47] = 0.0021246;
		start[48] = 0.0036341;
		start[49] = 0.0080948;
		start[50] = 0.00037256;
		start[51] = 0.0097476;
		start[52] = 0.0082346;
		start[53] = 0.0030148;
		start[54] = 0.0057526;
		start[55] = 0.0049084;
		start[56] = 0.0040286;
		start[57] = 2.311e-05;
		start[58] = 0.0032474;
		start[59] = 0.0036097;
		start[60] = 0.0070822;
		start[61] = 0.0094147;
		start[62] = 0.0024989;
		start[63] = 0.0058277;
		start[64] = 0.0076186;
		start[65] = 0.009656;
		start[66] = 0.0074125;
		start[67] = 4.8606e-05;
		start[68] = 0.0027625;
		start[69] = 0.0011835;
		start[70] = 0.0013257;
		start[71] = 0.0038116;
		start[72] = 0.00721;
		start[73] = 0.0057452;
		start[74] = 0.0091436;
		start[75] = 0.0066823;
		start[76] = 0.0043594;
		start[77] = 0.0098823;
		start[78] = 0.0023328;
		start[79] = 0.0022668;
		start[80] = 0.0041876;
		start[81] = 0.0019608;
		start[82] = 0.0013814;
		start[83] = 0.0025733;
		start[84] = 0.0028676;
		start[85] = 0.0041202;
		start[86] = 0.00205;
		start[87] = 0.0033953;
		start[88] = 0.0050342;
		start[89] = 0.0092076;
		start[90] = 0.0092465;
		start[91] = 0.0042912;
		start[92] = 0.0040967;
		start[93] = 0.0099594;
		start[94] = 0.0096272;
		start[95] = 0.0081974;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0065864;
		start[11] = 0.00014906;
		start[12] = 0.0038521;
		start[13] = 0.0039544;
		start[14] = 0.00085751;
		start[15] = 0.0099663;
		start[16] = 0.0040201;
		start[17] = 0.0042839;
		start[18] = 0.0090604;
		start[19] = 0.0096862;
		start[20] = 0.0072862;
		start[21] = 0.0051448;
		start[22] = 0.0050578;
		start[23] = 0.0085337;
		start[24] = 0.0041137;
		start[25] = 0.0057147;
		start[26] = 0.0025274;
		start[27] = 0.00049073;
		start[28] = 0.0038887;
		start[29] = 0.0061392;
		start[30] = 0.00865;
		start[31] = 0.0055551;
		start[32] = 0.0024637;
		start[33] = 0.0063097;
		start[34] = 0.0050226;
		start[35] = 0.0013446;
		start[36] = 0.0021526;
		start[37] = 0.0019072;
		start[38] = 0.0055945;
		start[39] = 0.0075796;
		start[40] = 0.006623;
		start[41] = 0.0071078;
		start[42] = 0.0054517;
		start[43] = 0.0056022;
		start[44] = 0.0032555;
		start[45] = 0.0096635;
		start[46] = 0.0011342;
		start[47] = 0.0066983;
		start[48] = 0.0088184;
		start[49] = 0.0073773;
		start[50] = 0.0093809;
		start[51] = 0.0046614;
		start[52] = 0.0027862;
		start[53] = 0.0047847;
		start[54] = 0.008856;
		start[55] = 0.0074495;
		start[56] = 0.0033972;
		start[57] = 0.00063241;
		start[58] = 0.0063759;
		start[59] = 0.0093703;
		start[60] = 0.0077081;
		start[61] = 0.0089779;
		start[62] = 0.0070674;
		start[63] = 0.0010403;
		start[64] = 0.0032808;
		start[65] = 0.0056501;
		start[66] = 0.0022539;
		start[67] = 0.0054832;
		start[68] = 0.0017359;
		start[69] = 0.006981;
		start[70] = 0.008066;
		start[71] = 0.0015051;
		start[72] = 0.0068983;
		start[73] = 0.0069417;
		start[74] = 0.0042205;
		start[75] = 0.0029917;
		start[76] = 0.0014571;
		start[77] = 0.0047182;
		start[78] = 0.0030181;
		start[79] = 0.0063059;
		start[80] = 0.00054585;
		start[81] = 0.00014607;
		start[82] = 0.0091158;
		start[83] = 0.0030841;
		start[84] = 0.0044646;
		start[85] = 0.0039174;
		start[86] = 0.0023876;
		start[87] = 0.0091177;
		start[88] = 0.0070919;
		start[89] = 0.0013077;
		start[90] = 0.0074005;
		start[91] = 0.0084267;
		start[92] = 9.4433e-05;
		start[93] = 0.0089184;
		start[94] = 0.0067365;
		start[95] = 0.0088048;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0055887;
		start[11] = 0.0075271;
		start[12] = 0.0019675;
		start[13] = 0.0095636;
		start[14] = 0.00021462;
		start[15] = 0.00085986;
		start[16] = 0.0056301;
		start[17] = 0.00028121;
		start[18] = 0.0058757;
		start[19] = 0.0087227;
		start[20] = 0.0089992;
		start[21] = 0.0059995;
		start[22] = 0.0090771;
		start[23] = 0.0073877;
		start[24] = 0.0068873;
		start[25] = 0.0075525;
		start[26] = 0.0078947;
		start[27] = 0.0081229;
		start[28] = 0.0065494;
		start[29] = 0.0055382;
		start[30] = 0.0051222;
		start[31] = 0.0052913;
		start[32] = 1.0474e-05;
		start[33] = 0.0031748;
		start[34] = 0.0037876;
		start[35] = 0.0088245;
		start[36] = 0.0096337;
		start[37] = 0.0025576;
		start[38] = 0.0090613;
		start[39] = 0.0037231;
		start[40] = 0.0039959;
		start[41] = 0.0089775;
		start[42] = 0.0093763;
		start[43] = 0.0091454;
		start[44] = 0.0018246;
		start[45] = 0.0014586;
		start[46] = 0.0085922;
		start[47] = 0.0043535;
		start[48] = 0.0097417;
		start[49] = 0.0084094;
		start[50] = 0.0039423;
		start[51] = 0.0025322;
		start[52] = 0.0044782;
		start[53] = 0.0040626;
		start[54] = 0.0089503;
		start[55] = 0.0025411;
		start[56] = 0.0025024;
		start[57] = 0.0069945;
		start[58] = 0.0048088;
		start[59] = 0.0010513;
		start[60] = 0.0048206;
		start[61] = 0.0085364;
		start[62] = 0.0045935;
		start[63] = 0.0096614;
		start[64] = 0.0025155;
		start[65] = 0.0096529;
		start[66] = 0.0051279;
		start[67] = 0.0089693;
		start[68] = 0.0077567;
		start[69] = 0.0082649;
		start[70] = 0.0042447;
		start[71] = 0.0066392;
		start[72] = 0.008114;
		start[73] = 0.0080978;
		start[74] = 0.00012466;
		start[75] = 0.0010086;
		start[76] = 0.0086326;
		start[77] = 0.00051344;
		start[78] = 9.1945e-05;
		start[79] = 0.0018166;
		start[80] = 0.0007147;
		start[81] = 0.0070865;
		start[82] = 0.0018675;
		start[83] = 0.0080286;
		start[84] = 0.0051234;
		start[85] = 0.007467;
		start[86] = 0.0054969;
		start[87] = 8.7573e-05;
		start[88] = 0.0029946;
		start[89] = 0.001243;
		start[90] = 0.0062256;
		start[91] = 0.0060424;
		start[92] = 0.0068319;
		start[93] = 0.00062204;
		start[94] = 0.0092526;
		start[95] = 0.0064267;
		std::vector<double> endEff (3);
		endEff[0] = -0.36186;
		endEff[1] = 0.5161;
		endEff[2] = 0.81306;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0079269;
		start[11] = 0.0055421;
		start[12] = 0.0037962;
		start[13] = 0.0084898;
		start[14] = 0.0096869;
		start[15] = 0.00077968;
		start[16] = 0.0066965;
		start[17] = 0.0043211;
		start[18] = 0.0062104;
		start[19] = 0.0058628;
		start[20] = 0.0014406;
		start[21] = 0.0073122;
		start[22] = 0.0037891;
		start[23] = 0.0032517;
		start[24] = 0.00018041;
		start[25] = 0.0059911;
		start[26] = 0.0033457;
		start[27] = 0.0024562;
		start[28] = 0.0085759;
		start[29] = 0.0073136;
		start[30] = 0.0038031;
		start[31] = 0.0046254;
		start[32] = 0.0012748;
		start[33] = 0.0061045;
		start[34] = 0.0061743;
		start[35] = 0.00535;
		start[36] = 0.0094488;
		start[37] = 0.0049647;
		start[38] = 0.0074026;
		start[39] = 0.0074489;
		start[40] = 0.0099894;
		start[41] = 0.0048651;
		start[42] = 0.004006;
		start[43] = 0.0011277;
		start[44] = 0.00053821;
		start[45] = 0.0035739;
		start[46] = 0.0063018;
		start[47] = 0.0054344;
		start[48] = 0.00076544;
		start[49] = 0.0094649;
		start[50] = 9.2609e-05;
		start[51] = 0.0063632;
		start[52] = 0.0093475;
		start[53] = 0.0051117;
		start[54] = 0.0077067;
		start[55] = 0.005483;
		start[56] = 0.0023438;
		start[57] = 0.0036749;
		start[58] = 0.0040166;
		start[59] = 0.0076956;
		start[60] = 0.0020775;
		start[61] = 0.0025865;
		start[62] = 0.0091128;
		start[63] = 0.0066708;
		start[64] = 0.0076748;
		start[65] = 0.0014353;
		start[66] = 0.0051945;
		start[67] = 0.0023092;
		start[68] = 0.0037252;
		start[69] = 0.0093518;
		start[70] = 0.005981;
		start[71] = 0.0015963;
		start[72] = 0.0045112;
		start[73] = 0.0031921;
		start[74] = 0.0034921;
		start[75] = 0.007718;
		start[76] = 0.0068676;
		start[77] = 0.0022171;
		start[78] = 0.0097473;
		start[79] = 0.0020276;
		start[80] = 0.0043693;
		start[81] = 0.0046262;
		start[82] = 0.00067916;
		start[83] = 0.0096637;
		start[84] = 0.0083016;
		start[85] = 0.002674;
		start[86] = 0.0091169;
		start[87] = 0.006669;
		start[88] = 0.0016528;
		start[89] = 0.007846;
		start[90] = 0.0017629;
		start[91] = 0.0039542;
		start[92] = 0.0041547;
		start[93] = 0.0021435;
		start[94] = 0.0054364;
		start[95] = 0.0035827;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.00066921;
		start[11] = 0.00040203;
		start[12] = 0.0025481;
		start[13] = 0.007236;
		start[14] = 0.008453;
		start[15] = 0.0077515;
		start[16] = 0.0080976;
		start[17] = 0.0094723;
		start[18] = 0.0024081;
		start[19] = 0.00082074;
		start[20] = 0.0022022;
		start[21] = 0.0097691;
		start[22] = 0.0091145;
		start[23] = 0.0063162;
		start[24] = 0.009923;
		start[25] = 0.0058754;
		start[26] = 0.0039371;
		start[27] = 0.0033318;
		start[28] = 0.006776;
		start[29] = 0.0067616;
		start[30] = 0.003711;
		start[31] = 0.0045352;
		start[32] = 0.0069295;
		start[33] = 0.0034748;
		start[34] = 0.0014478;
		start[35] = 0.0036385;
		start[36] = 0.0078803;
		start[37] = 0.0094644;
		start[38] = 0.00081439;
		start[39] = 0.0089975;
		start[40] = 0.0080212;
		start[41] = 0.0074069;
		start[42] = 0.0028359;
		start[43] = 0.0069165;
		start[44] = 0.00096816;
		start[45] = 0.0098138;
		start[46] = 0.0089958;
		start[47] = 0.0084567;
		start[48] = 0.006492;
		start[49] = 0.0068375;
		start[50] = 0.0046173;
		start[51] = 0.0083119;
		start[52] = 0.0062008;
		start[53] = 0.0088254;
		start[54] = 0.00062888;
		start[55] = 0.006573;
		start[56] = 0.0096542;
		start[57] = 0.00084389;
		start[58] = 0.0016239;
		start[59] = 0.0065119;
		start[60] = 0.0024087;
		start[61] = 0.0075376;
		start[62] = 0.0028275;
		start[63] = 0.0040964;
		start[64] = 0.0047748;
		start[65] = 0.00017427;
		start[66] = 0.0069157;
		start[67] = 0.0057065;
		start[68] = 0.0093049;
		start[69] = 0.003071;
		start[70] = 0.00031709;
		start[71] = 0.0054775;
		start[72] = 0.0052085;
		start[73] = 0.0078681;
		start[74] = 0.00666;
		start[75] = 0.009863;
		start[76] = 0.0069162;
		start[77] = 0.0055005;
		start[78] = 0.0062915;
		start[79] = 0.0097035;
		start[80] = 0.0012518;
		start[81] = 0.0031938;
		start[82] = 0.0036271;
		start[83] = 0.0071711;
		start[84] = 0.0079807;
		start[85] = 0.0024598;
		start[86] = 0.0025444;
		start[87] = 0.0097303;
		start[88] = 0.0097071;
		start[89] = 0.0011512;
		start[90] = 0.0097359;
		start[91] = 0.0081689;
		start[92] = 0.0060881;
		start[93] = 0.0028219;
		start[94] = 0.0073135;
		start[95] = 0.00031876;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0074754;
		start[11] = 0.009416;
		start[12] = 0.0052456;
		start[13] = 0.006647;
		start[14] = 0.0056914;
		start[15] = 0.0086939;
		start[16] = 0.0029666;
		start[17] = 0.00010693;
		start[18] = 0.0042681;
		start[19] = 0.0023393;
		start[20] = 0.0044739;
		start[21] = 0.0053343;
		start[22] = 0.0059037;
		start[23] = 0.0070171;
		start[24] = 0.00018739;
		start[25] = 0.0010322;
		start[26] = 0.0064109;
		start[27] = 0.0086941;
		start[28] = 0.0023131;
		start[29] = 0.0043108;
		start[30] = 0.009876;
		start[31] = 0.0017692;
		start[32] = 0.0071591;
		start[33] = 0.00030251;
		start[34] = 0.0015711;
		start[35] = 0.0065821;
		start[36] = 0.0060757;
		start[37] = 0.0065916;
		start[38] = 0.0044968;
		start[39] = 0.001972;
		start[40] = 0.0020728;
		start[41] = 0.0034837;
		start[42] = 0.0070427;
		start[43] = 0.0010084;
		start[44] = 0.0057426;
		start[45] = 0.0083517;
		start[46] = 0.00057667;
		start[47] = 0.00067862;
		start[48] = 0.0011501;
		start[49] = 0.0004193;
		start[50] = 0.0028611;
		start[51] = 0.0023208;
		start[52] = 0.009174;
		start[53] = 0.0037464;
		start[54] = 0.0062446;
		start[55] = 0.0049062;
		start[56] = 0.0071225;
		start[57] = 0.0095248;
		start[58] = 0.0019106;
		start[59] = 0.0058913;
		start[60] = 0.0074527;
		start[61] = 0.003197;
		start[62] = 0.007304;
		start[63] = 0.0063082;
		start[64] = 0.0090057;
		start[65] = 0.0041532;
		start[66] = 0.0028646;
		start[67] = 0.00943;
		start[68] = 0.003272;
		start[69] = 0.0099722;
		start[70] = 0.0097233;
		start[71] = 0.0075712;
		start[72] = 0.0015618;
		start[73] = 0.0081237;
		start[74] = 0.0097823;
		start[75] = 0.004008;
		start[76] = 0.0011045;
		start[77] = 0.0055069;
		start[78] = 0.0063754;
		start[79] = 0.0079106;
		start[80] = 0.0005839;
		start[81] = 0.0036828;
		start[82] = 0.0088449;
		start[83] = 0.0069105;
		start[84] = 0.0056905;
		start[85] = 0.0093944;
		start[86] = 0.0030617;
		start[87] = 0.0079917;
		start[88] = 0.003921;
		start[89] = 0.0094508;
		start[90] = 0.002579;
		start[91] = 0.0056862;
		start[92] = 0.0087385;
		start[93] = 0.0068115;
		start[94] = 0.002494;
		start[95] = 0.0058866;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0037471;
		start[11] = 0.0099136;
		start[12] = 0.0071278;
		start[13] = 0.00058561;
		start[14] = 0.0044797;
		start[15] = 0.0074964;
		start[16] = 0.00095583;
		start[17] = 0.002882;
		start[18] = 0.0045271;
		start[19] = 0.0087618;
		start[20] = 0.0084151;
		start[21] = 0.0057595;
		start[22] = 0.0078077;
		start[23] = 0.0062303;
		start[24] = 0.0034267;
		start[25] = 0.00055954;
		start[26] = 0.0076907;
		start[27] = 0.0037812;
		start[28] = 0.0010163;
		start[29] = 0.0061669;
		start[30] = 0.0024754;
		start[31] = 0.0098218;
		start[32] = 0.0091081;
		start[33] = 0.0046224;
		start[34] = 0.0009677;
		start[35] = 0.0080918;
		start[36] = 0.0051445;
		start[37] = 0.0080683;
		start[38] = 0.00026133;
		start[39] = 0.0065535;
		start[40] = 0.0034952;
		start[41] = 0.0089672;
		start[42] = 0.0085127;
		start[43] = 0.0014647;
		start[44] = 0.0025177;
		start[45] = 0.0078563;
		start[46] = 0.0045418;
		start[47] = 0.0078098;
		start[48] = 0.0079808;
		start[49] = 0.0027814;
		start[50] = 0.0086388;
		start[51] = 0.0099941;
		start[52] = 0.0080369;
		start[53] = 0.0014889;
		start[54] = 0.0055606;
		start[55] = 0.0028926;
		start[56] = 0.0087776;
		start[57] = 0.0076271;
		start[58] = 0.0075339;
		start[59] = 0.009493;
		start[60] = 0.0057026;
		start[61] = 0.0010281;
		start[62] = 0.0059605;
		start[63] = 0.0093514;
		start[64] = 0.0096355;
		start[65] = 0.0065535;
		start[66] = 0.0085277;
		start[67] = 0.0052852;
		start[68] = 0.0014154;
		start[69] = 0.007601;
		start[70] = 0.0070012;
		start[71] = 0.0028098;
		start[72] = 0.0044967;
		start[73] = 0.0084461;
		start[74] = 0.0035231;
		start[75] = 0.0096189;
		start[76] = 0.0017253;
		start[77] = 0.0038925;
		start[78] = 0.0080782;
		start[79] = 0.0030784;
		start[80] = 0.00079144;
		start[81] = 0.0083751;
		start[82] = 0.00653;
		start[83] = 0.0094859;
		start[84] = 0.0021697;
		start[85] = 0.0059603;
		start[86] = 0.00079073;
		start[87] = 0.0083131;
		start[88] = 0.0073828;
		start[89] = 0.003609;
		start[90] = 0.0016279;
		start[91] = 0.0085887;
		start[92] = 0.00031346;
		start[93] = 0.0048994;
		start[94] = 0.0021696;
		start[95] = 0.0026309;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.00053898;
		start[11] = 0.000156;
		start[12] = 0.0075478;
		start[13] = 0.0062307;
		start[14] = 0.0053335;
		start[15] = 0.0082393;
		start[16] = 0.0025761;
		start[17] = 0.0079765;
		start[18] = 0.0069807;
		start[19] = 0.00010446;
		start[20] = 0.0095065;
		start[21] = 0.0039951;
		start[22] = 0.0003987;
		start[23] = 0.0041848;
		start[24] = 0.0036272;
		start[25] = 0.0066835;
		start[26] = 0.0053865;
		start[27] = 0.009099;
		start[28] = 0.008227;
		start[29] = 0.0016056;
		start[30] = 0.0030352;
		start[31] = 0.0015783;
		start[32] = 0.0035907;
		start[33] = 0.00059319;
		start[34] = 0.0075782;
		start[35] = 0.0099671;
		start[36] = 0.0069973;
		start[37] = 0.003141;
		start[38] = 0.0034095;
		start[39] = 0.0082931;
		start[40] = 0.0019808;
		start[41] = 0.0027347;
		start[42] = 0.0038667;
		start[43] = 0.0059968;
		start[44] = 0.0027772;
		start[45] = 2.7983e-05;
		start[46] = 0.0080146;
		start[47] = 7.5026e-05;
		start[48] = 0.0020073;
		start[49] = 0.0053327;
		start[50] = 0.0020683;
		start[51] = 0.0096301;
		start[52] = 0.0050599;
		start[53] = 0.00053024;
		start[54] = 0.0094498;
		start[55] = 0.0030537;
		start[56] = 0.0048913;
		start[57] = 0.0056425;
		start[58] = 0.0090156;
		start[59] = 0.0070236;
		start[60] = 0.006103;
		start[61] = 0.00030114;
		start[62] = 0.0055537;
		start[63] = 0.0053386;
		start[64] = 0.0078728;
		start[65] = 0.0019042;
		start[66] = 0.0050298;
		start[67] = 0.0075848;
		start[68] = 0.00053975;
		start[69] = 0.0028388;
		start[70] = 0.0044699;
		start[71] = 0.0069287;
		start[72] = 0.0011022;
		start[73] = 0.0094867;
		start[74] = 0.0011839;
		start[75] = 0.0039166;
		start[76] = 0.0034657;
		start[77] = 0.0028969;
		start[78] = 0.0061413;
		start[79] = 0.0076225;
		start[80] = 0.0025909;
		start[81] = 0.004016;
		start[82] = 0.0091266;
		start[83] = 0.00055837;
		start[84] = 0.0092322;
		start[85] = 0.00052118;
		start[86] = 0.0076077;
		start[87] = 0.0053285;
		start[88] = 0.00010509;
		start[89] = 0.0090148;
		start[90] = 0.00065324;
		start[91] = 0.0030659;
		start[92] = 0.0090631;
		start[93] = 0.00039897;
		start[94] = 0.006861;
		start[95] = 0.0026861;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0017616;
		start[11] = 0.007107;
		start[12] = 0.0039009;
		start[13] = 0.0039392;
		start[14] = 0.0054941;
		start[15] = 0.0049197;
		start[16] = 0.0057765;
		start[17] = 0.0047999;
		start[18] = 0.0012753;
		start[19] = 0.008156;
		start[20] = 0.00030994;
		start[21] = 0.0023744;
		start[22] = 0.0024924;
		start[23] = 0.0089713;
		start[24] = 0.0049925;
		start[25] = 0.003528;
		start[26] = 0.0091876;
		start[27] = 0.0049229;
		start[28] = 0.0050099;
		start[29] = 0.0048855;
		start[30] = 0.006814;
		start[31] = 0.0022904;
		start[32] = 0.0059024;
		start[33] = 0.0052967;
		start[34] = 0.0054887;
		start[35] = 0.0051422;
		start[36] = 0.0062072;
		start[37] = 0.0069478;
		start[38] = 0.008794;
		start[39] = 0.0040546;
		start[40] = 0.0060689;
		start[41] = 0.0024305;
		start[42] = 0.0050502;
		start[43] = 0.0085645;
		start[44] = 0.00057357;
		start[45] = 0.0068849;
		start[46] = 0.0024783;
		start[47] = 0.0012545;
		start[48] = 0.0010072;
		start[49] = 0.005711;
		start[50] = 0.0071088;
		start[51] = 0.0056257;
		start[52] = 0.00089915;
		start[53] = 0.0024142;
		start[54] = 0.0063546;
		start[55] = 0.0094862;
		start[56] = 0.0070392;
		start[57] = 0.0040465;
		start[58] = 0.0015206;
		start[59] = 0.0015258;
		start[60] = 0.0065561;
		start[61] = 0.00035269;
		start[62] = 0.0039051;
		start[63] = 0.0068485;
		start[64] = 0.0095303;
		start[65] = 0.0042155;
		start[66] = 0.0024889;
		start[67] = 0.0088959;
		start[68] = 0.0021435;
		start[69] = 0.0062133;
		start[70] = 0.0036665;
		start[71] = 0.0093311;
		start[72] = 0.0077905;
		start[73] = 0.0052062;
		start[74] = 0.0081687;
		start[75] = 0.0065277;
		start[76] = 0.0091733;
		start[77] = 0.0088576;
		start[78] = 0.0041844;
		start[79] = 0.0086803;
		start[80] = 0.0010863;
		start[81] = 0.0001279;
		start[82] = 0.0070407;
		start[83] = 0.00096003;
		start[84] = 0.0088338;
		start[85] = 0.0077704;
		start[86] = 0.00684;
		start[87] = 0.0042134;
		start[88] = 0.0095348;
		start[89] = 0.0048764;
		start[90] = 0.007884;
		start[91] = 0.0047906;
		start[92] = 0.0041349;
		start[93] = 0.0012505;
		start[94] = 0.0040626;
		start[95] = 0.0061792;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0060035;
		start[11] = 0.0091308;
		start[12] = 0.0080509;
		start[13] = 0.0033138;
		start[14] = 0.0058631;
		start[15] = 0.0066888;
		start[16] = 0.00074247;
		start[17] = 0.0058515;
		start[18] = 0.0048751;
		start[19] = 0.0022391;
		start[20] = 0.0091228;
		start[21] = 0.00026215;
		start[22] = 0.0040248;
		start[23] = 0.0090511;
		start[24] = 0.0015101;
		start[25] = 0.0033317;
		start[26] = 0.0043854;
		start[27] = 0.00024385;
		start[28] = 0.0020587;
		start[29] = 0.0097986;
		start[30] = 0.0011192;
		start[31] = 0.0054382;
		start[32] = 0.0055862;
		start[33] = 0.0056528;
		start[34] = 0.0090466;
		start[35] = 0.0036489;
		start[36] = 0.0092653;
		start[37] = 0.0041719;
		start[38] = 0.0075667;
		start[39] = 0.0098797;
		start[40] = 0.0043152;
		start[41] = 0.0059757;
		start[42] = 0.0013147;
		start[43] = 0.0097663;
		start[44] = 0.0091943;
		start[45] = 0.00013257;
		start[46] = 0.0062552;
		start[47] = 0.0095946;
		start[48] = 0.0089774;
		start[49] = 0.0078022;
		start[50] = 0.0042719;
		start[51] = 0.0071438;
		start[52] = 0.00075171;
		start[53] = 0.0059802;
		start[54] = 0.0063191;
		start[55] = 0.0038199;
		start[56] = 0.004984;
		start[57] = 0.0039892;
		start[58] = 1.2508e-05;
		start[59] = 0.0074351;
		start[60] = 0.0037103;
		start[61] = 0.0069191;
		start[62] = 0.0015351;
		start[63] = 0.0010988;
		start[64] = 0.00051576;
		start[65] = 0.0053047;
		start[66] = 0.0014611;
		start[67] = 0.0036284;
		start[68] = 0.0084796;
		start[69] = 0.0013549;
		start[70] = 0.0020607;
		start[71] = 0.0021339;
		start[72] = 0.0024658;
		start[73] = 0.0056811;
		start[74] = 0.008458;
		start[75] = 0.005565;
		start[76] = 0.0024655;
		start[77] = 0.0020326;
		start[78] = 0.0058795;
		start[79] = 0.0053718;
		start[80] = 0.0013967;
		start[81] = 0.00046155;
		start[82] = 0.0048354;
		start[83] = 0.00682;
		start[84] = 0.00072608;
		start[85] = 0.0095234;
		start[86] = 0.0027954;
		start[87] = 0.0069755;
		start[88] = 0.0013935;
		start[89] = 0.009354;
		start[90] = 0.0072484;
		start[91] = 0.0074779;
		start[92] = 0.0041066;
		start[93] = 0.0027211;
		start[94] = 0.0028002;
		start[95] = 0.0083297;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0020658;
		start[11] = 0.0038567;
		start[12] = 0.0094022;
		start[13] = 0.009851;
		start[14] = 0.0037038;
		start[15] = 7.8104e-05;
		start[16] = 0.0013082;
		start[17] = 0.0061644;
		start[18] = 0.0029358;
		start[19] = 0.0081127;
		start[20] = 0.0019471;
		start[21] = 0.0069309;
		start[22] = 0.0071194;
		start[23] = 0.0067997;
		start[24] = 0.0064588;
		start[25] = 0.0088338;
		start[26] = 0.00048955;
		start[27] = 0.00028631;
		start[28] = 0.00018739;
		start[29] = 0.00421;
		start[30] = 0.0078462;
		start[31] = 0.0095059;
		start[32] = 0.0044608;
		start[33] = 0.00098413;
		start[34] = 0.0094423;
		start[35] = 0.008862;
		start[36] = 0.00461;
		start[37] = 0.0048648;
		start[38] = 0.0066403;
		start[39] = 0.0091201;
		start[40] = 0.0050747;
		start[41] = 0.0074774;
		start[42] = 0.0019308;
		start[43] = 0.0073676;
		start[44] = 0.0053645;
		start[45] = 0.0013442;
		start[46] = 0.0053054;
		start[47] = 0.006102;
		start[48] = 0.0045435;
		start[49] = 0.0031275;
		start[50] = 0.004977;
		start[51] = 0.0056089;
		start[52] = 0.0089322;
		start[53] = 0.0017634;
		start[54] = 0.0037845;
		start[55] = 0.0079679;
		start[56] = 0.0050675;
		start[57] = 0.002072;
		start[58] = 0.0078864;
		start[59] = 0.0086317;
		start[60] = 0.00044954;
		start[61] = 0.00403;
		start[62] = 0.0010613;
		start[63] = 0.0097489;
		start[64] = 0.003194;
		start[65] = 0.0066989;
		start[66] = 0.0051656;
		start[67] = 0.0098806;
		start[68] = 0.0024317;
		start[69] = 0.0076165;
		start[70] = 0.0066176;
		start[71] = 0.00039814;
		start[72] = 3.098e-05;
		start[73] = 0.001312;
		start[74] = 0.0042179;
		start[75] = 0.0098242;
		start[76] = 0.0086769;
		start[77] = 0.0056102;
		start[78] = 0.0065143;
		start[79] = 0.0042124;
		start[80] = 0.0014942;
		start[81] = 0.0077378;
		start[82] = 0.0072034;
		start[83] = 0.0021893;
		start[84] = 0.0044754;
		start[85] = 0.0022615;
		start[86] = 0.0096836;
		start[87] = 0.000916;
		start[88] = 0.0031151;
		start[89] = 0.0018024;
		start[90] = 0.0058347;
		start[91] = 0.0057936;
		start[92] = 0.0026774;
		start[93] = 0.0013115;
		start[94] = 0.0067225;
		start[95] = 0.0023229;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.00039929;
		start[11] = 0.00041195;
		start[12] = 0.0095921;
		start[13] = 0.0039561;
		start[14] = 0.0056294;
		start[15] = 1.8293e-05;
		start[16] = 0.00011317;
		start[17] = 0.0022468;
		start[18] = 0.0098513;
		start[19] = 0.0035796;
		start[20] = 0.00094031;
		start[21] = 0.0065683;
		start[22] = 0.0081805;
		start[23] = 0.001502;
		start[24] = 0.0089185;
		start[25] = 0.0050987;
		start[26] = 0.0073808;
		start[27] = 0.0047759;
		start[28] = 0.0046469;
		start[29] = 0.0094417;
		start[30] = 0.0015875;
		start[31] = 0.0071276;
		start[32] = 0.0054636;
		start[33] = 0.0024774;
		start[34] = 0.0077296;
		start[35] = 0.0045954;
		start[36] = 0.0025868;
		start[37] = 0.0098608;
		start[38] = 0.0072215;
		start[39] = 0.0030713;
		start[40] = 0.0071333;
		start[41] = 0.0064142;
		start[42] = 0.0083087;
		start[43] = 0.0085334;
		start[44] = 0.0072802;
		start[45] = 0.0039581;
		start[46] = 0.00067624;
		start[47] = 0.0016518;
		start[48] = 0.0098771;
		start[49] = 0.0024066;
		start[50] = 0.0093263;
		start[51] = 0.0010467;
		start[52] = 0.0095345;
		start[53] = 0.00026646;
		start[54] = 0.0069249;
		start[55] = 0.0026316;
		start[56] = 0.0020529;
		start[57] = 0.0091327;
		start[58] = 0.0029021;
		start[59] = 0.0026564;
		start[60] = 0.0050657;
		start[61] = 0.0058119;
		start[62] = 0.00029192;
		start[63] = 0.00061755;
		start[64] = 0.0099548;
		start[65] = 0.006043;
		start[66] = 0.0083055;
		start[67] = 0.0036382;
		start[68] = 0.0075774;
		start[69] = 0.0061324;
		start[70] = 0.0085715;
		start[71] = 0.0092783;
		start[72] = 0.005162;
		start[73] = 0.0076884;
		start[74] = 0.0079117;
		start[75] = 0.0061777;
		start[76] = 0.0069261;
		start[77] = 0.0035264;
		start[78] = 0.0007125;
		start[79] = 0.0063416;
		start[80] = 0.0082794;
		start[81] = 0.0044139;
		start[82] = 0.00077444;
		start[83] = 0.00088372;
		start[84] = 0.0010556;
		start[85] = 0.0046306;
		start[86] = 0.0083206;
		start[87] = 0.0023029;
		start[88] = 0.0070875;
		start[89] = 0.0063091;
		start[90] = 0.007266;
		start[91] = 0.0021915;
		start[92] = 0.0034163;
		start[93] = 0.0062161;
		start[94] = 0.0043883;
		start[95] = 0.0048257;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0025389;
		start[11] = 0.0092978;
		start[12] = 0.0077041;
		start[13] = 0.0031878;
		start[14] = 0.004973;
		start[15] = 0.0078535;
		start[16] = 0.0015064;
		start[17] = 0.0058885;
		start[18] = 0.0026436;
		start[19] = 0.00090868;
		start[20] = 0.0052239;
		start[21] = 0.0068979;
		start[22] = 0.0056175;
		start[23] = 0.0052286;
		start[24] = 0.003076;
		start[25] = 0.0047659;
		start[26] = 0.0084494;
		start[27] = 0.0089627;
		start[28] = 0.0020767;
		start[29] = 0.0064246;
		start[30] = 0.0023963;
		start[31] = 0.0062323;
		start[32] = 0.0090002;
		start[33] = 0.0049841;
		start[34] = 0.0042694;
		start[35] = 0.0093742;
		start[36] = 8.7419e-05;
		start[37] = 0.0067066;
		start[38] = 0.0063695;
		start[39] = 0.0029694;
		start[40] = 0.0027871;
		start[41] = 0.0017065;
		start[42] = 0.0060689;
		start[43] = 0.0092826;
		start[44] = 0.008038;
		start[45] = 0.0031519;
		start[46] = 0.0025755;
		start[47] = 0.0026009;
		start[48] = 0.004753;
		start[49] = 0.0044606;
		start[50] = 0.008245;
		start[51] = 0.0049644;
		start[52] = 0.0054298;
		start[53] = 0.0019149;
		start[54] = 0.0064325;
		start[55] = 0.0055767;
		start[56] = 0.0024983;
		start[57] = 0.0022207;
		start[58] = 0.0076004;
		start[59] = 7.3566e-05;
		start[60] = 0.0014083;
		start[61] = 0.00037994;
		start[62] = 0.006723;
		start[63] = 0.0027223;
		start[64] = 0.006449;
		start[65] = 0.0017117;
		start[66] = 0.0027328;
		start[67] = 0.00026357;
		start[68] = 0.0089986;
		start[69] = 0.00072355;
		start[70] = 0.00089251;
		start[71] = 0.0050911;
		start[72] = 0.0016111;
		start[73] = 0.0020755;
		start[74] = 0.005936;
		start[75] = 2.3553e-05;
		start[76] = 0.0068567;
		start[77] = 0.004442;
		start[78] = 0.0011241;
		start[79] = 0.0092911;
		start[80] = 0.0057482;
		start[81] = 0.0027306;
		start[82] = 6.1415e-05;
		start[83] = 0.0034542;
		start[84] = 0.0081272;
		start[85] = 0.0037214;
		start[86] = 0.0084098;
		start[87] = 0.0091074;
		start[88] = 0.0059158;
		start[89] = 0.0061152;
		start[90] = 0.0060678;
		start[91] = 0.0090844;
		start[92] = 0.008358;
		start[93] = 0.0083239;
		start[94] = 0.0046246;
		start[95] = 0.0013408;
		std::vector<double> endEff (3);
		endEff[0] = 0.29796;
		endEff[1] = 0.16831;
		endEff[2] = 1.2988;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0068336;
		start[11] = 0.00085054;
		start[12] = 0.00060305;
		start[13] = 0.0069139;
		start[14] = 0.0052309;
		start[15] = 0.009175;
		start[16] = 0.0045515;
		start[17] = 0.0078656;
		start[18] = 0.0037914;
		start[19] = 0.0040926;
		start[20] = 0.0092306;
		start[21] = 0.0024848;
		start[22] = 0.00048463;
		start[23] = 0.0097316;
		start[24] = 0.0087881;
		start[25] = 0.0079126;
		start[26] = 0.0065402;
		start[27] = 0.0012769;
		start[28] = 0.0044223;
		start[29] = 3.0794e-05;
		start[30] = 0.0063401;
		start[31] = 0.0065073;
		start[32] = 0.0016993;
		start[33] = 0.0092293;
		start[34] = 0.0015764;
		start[35] = 0.0058405;
		start[36] = 0.0068169;
		start[37] = 0.0090407;
		start[38] = 0.006714;
		start[39] = 0.0055906;
		start[40] = 0.00025325;
		start[41] = 0.0075987;
		start[42] = 0.0039332;
		start[43] = 0.0044889;
		start[44] = 0.0022832;
		start[45] = 0.0080044;
		start[46] = 0.0091487;
		start[47] = 0.0071263;
		start[48] = 0.0099183;
		start[49] = 0.0016434;
		start[50] = 0.0073847;
		start[51] = 0.0017556;
		start[52] = 0.0026572;
		start[53] = 0.0026279;
		start[54] = 0.00033175;
		start[55] = 0.003853;
		start[56] = 0.00015998;
		start[57] = 0.0034808;
		start[58] = 0.0050528;
		start[59] = 0.0053291;
		start[60] = 0.0040288;
		start[61] = 0.0014428;
		start[62] = 0.0085287;
		start[63] = 0.0086566;
		start[64] = 0.00051397;
		start[65] = 0.0095664;
		start[66] = 0.0036684;
		start[67] = 0.0099926;
		start[68] = 0.0054392;
		start[69] = 0.0080523;
		start[70] = 0.0078536;
		start[71] = 0.0066631;
		start[72] = 0.00098962;
		start[73] = 0.0012803;
		start[74] = 0.0043734;
		start[75] = 0.0078307;
		start[76] = 0.0026755;
		start[77] = 0.0033005;
		start[78] = 0.0092008;
		start[79] = 0.0048154;
		start[80] = 0.0020897;
		start[81] = 0.0087955;
		start[82] = 0.0062543;
		start[83] = 0.0041222;
		start[84] = 0.0095042;
		start[85] = 0.0092411;
		start[86] = 0.0095949;
		start[87] = 0.0031661;
		start[88] = 0.0051022;
		start[89] = 0.00058147;
		start[90] = 0.0062092;
		start[91] = 0.0025947;
		start[92] = 0.0031275;
		start[93] = 0.00091131;
		start[94] = 0.0014234;
		start[95] = 0.0015032;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0031312;
		start[11] = 0.0086016;
		start[12] = 0.0064978;
		start[13] = 0.0076092;
		start[14] = 0.0012596;
		start[15] = 0.0076627;
		start[16] = 0.0052778;
		start[17] = 0.0085224;
		start[18] = 0.0065361;
		start[19] = 0.0042818;
		start[20] = 0.0078523;
		start[21] = 0.0022972;
		start[22] = 0.0075085;
		start[23] = 0.0043164;
		start[24] = 0.0076509;
		start[25] = 0.0015788;
		start[26] = 0.0033525;
		start[27] = 0.007228;
		start[28] = 0.0038311;
		start[29] = 0.00078461;
		start[30] = 0.00046681;
		start[31] = 0.0023105;
		start[32] = 0.0077242;
		start[33] = 0.0078884;
		start[34] = 0.006485;
		start[35] = 0.0074814;
		start[36] = 0.0070397;
		start[37] = 0.0034393;
		start[38] = 0.0080993;
		start[39] = 0.0024107;
		start[40] = 0.0054554;
		start[41] = 0.0040316;
		start[42] = 0.0052833;
		start[43] = 0.009671;
		start[44] = 0.0048726;
		start[45] = 0.0010534;
		start[46] = 0.004331;
		start[47] = 0.0092631;
		start[48] = 0.0094389;
		start[49] = 0.00075507;
		start[50] = 0.0079324;
		start[51] = 0.0065517;
		start[52] = 0.0091062;
		start[53] = 0.0088131;
		start[54] = 0.0016775;
		start[55] = 0.0073388;
		start[56] = 0.0019231;
		start[57] = 0.0052405;
		start[58] = 0.0045678;
		start[59] = 0.0096563;
		start[60] = 0.0058216;
		start[61] = 0.0096197;
		start[62] = 0.0068019;
		start[63] = 0.0040394;
		start[64] = 0.0012541;
		start[65] = 0.0046728;
		start[66] = 0.0095146;
		start[67] = 0.0089098;
		start[68] = 0.0027733;
		start[69] = 0.0030258;
		start[70] = 0.0019509;
		start[71] = 0.0039314;
		start[72] = 0.0096601;
		start[73] = 0.005769;
		start[74] = 0.00013366;
		start[75] = 0.0092035;
		start[76] = 0.0025482;
		start[77] = 0.0045188;
		start[78] = 0.0034129;
		start[79] = 0.0039207;
		start[80] = 0.0029959;
		start[81] = 0.00031307;
		start[82] = 0.0053956;
		start[83] = 0.0091583;
		start[84] = 0.0028479;
		start[85] = 0.0091195;
		start[86] = 0.0060148;
		start[87] = 0.0013151;
		start[88] = 0.00016643;
		start[89] = 0.0073946;
		start[90] = 0.00043915;
		start[91] = 0.0022935;
		start[92] = 0.0017399;
		start[93] = 0.004852;
		start[94] = 0.0072451;
		start[95] = 0.0055421;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0023375;
		start[11] = 0.0028088;
		start[12] = 0.00087385;
		start[13] = 0.009093;
		start[14] = 0.0039127;
		start[15] = 0.0089802;
		start[16] = 0.0074169;
		start[17] = 0.0095823;
		start[18] = 0.0082077;
		start[19] = 0.0031906;
		start[20] = 0.0012998;
		start[21] = 0.0077721;
		start[22] = 0.0093817;
		start[23] = 6.029e-05;
		start[24] = 0.0092229;
		start[25] = 0.0090715;
		start[26] = 0.0031034;
		start[27] = 0.0048225;
		start[28] = 0.0058371;
		start[29] = 0.002468;
		start[30] = 0.0043258;
		start[31] = 0.0060848;
		start[32] = 0.0047587;
		start[33] = 0.0047605;
		start[34] = 0.0082848;
		start[35] = 0.0036922;
		start[36] = 0.0077211;
		start[37] = 0.0024564;
		start[38] = 0.007994;
		start[39] = 0.0078936;
		start[40] = 0.0046675;
		start[41] = 0.0089504;
		start[42] = 0.0038959;
		start[43] = 0.0095235;
		start[44] = 0.0021004;
		start[45] = 0.0016113;
		start[46] = 0.0069511;
		start[47] = 0.0020767;
		start[48] = 0.0097087;
		start[49] = 0.006359;
		start[50] = 0.0022569;
		start[51] = 0.0025897;
		start[52] = 0.00061324;
		start[53] = 0.00054628;
		start[54] = 9.2513e-05;
		start[55] = 0.0016189;
		start[56] = 0.0058529;
		start[57] = 0.00086413;
		start[58] = 0.00064688;
		start[59] = 0.0053923;
		start[60] = 0.0082569;
		start[61] = 0.0035449;
		start[62] = 0.0052072;
		start[63] = 0.0053159;
		start[64] = 0.0085404;
		start[65] = 0.0081245;
		start[66] = 0.00066165;
		start[67] = 0.0022873;
		start[68] = 0.00445;
		start[69] = 0.0014269;
		start[70] = 0.0043827;
		start[71] = 0.0094507;
		start[72] = 0.0029915;
		start[73] = 0.00098613;
		start[74] = 0.00039924;
		start[75] = 0.0056608;
		start[76] = 0.0096883;
		start[77] = 0.0070619;
		start[78] = 0.0092328;
		start[79] = 0.0040551;
		start[80] = 0.00088958;
		start[81] = 0.0022524;
		start[82] = 0.008511;
		start[83] = 0.0060327;
		start[84] = 0.00049481;
		start[85] = 0.0073797;
		start[86] = 0.0057765;
		start[87] = 0.0039067;
		start[88] = 0.0086163;
		start[89] = 0.0098197;
		start[90] = 0.0098871;
		start[91] = 0.0080342;
		start[92] = 0.0049262;
		start[93] = 0.0028674;
		start[94] = 0.0047748;
		start[95] = 0.0045587;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0092641;
		start[11] = 0.00020523;
		start[12] = 0.00019516;
		start[13] = 0.001938;
		start[14] = 0.0049043;
		start[15] = 0.00060918;
		start[16] = 0.0022291;
		start[17] = 0.00027078;
		start[18] = 0.0046351;
		start[19] = 0.0074455;
		start[20] = 0.0076526;
		start[21] = 0.0049774;
		start[22] = 0.0090576;
		start[23] = 0.0071233;
		start[24] = 0.0013036;
		start[25] = 0.0006826;
		start[26] = 0.0037629;
		start[27] = 0.0033373;
		start[28] = 0.0055899;
		start[29] = 0.0010956;
		start[30] = 0.0095859;
		start[31] = 0.0010184;
		start[32] = 0.0037623;
		start[33] = 5.7373e-05;
		start[34] = 0.0020276;
		start[35] = 0.0083487;
		start[36] = 0.0068535;
		start[37] = 0.007192;
		start[38] = 0.0051201;
		start[39] = 0.005723;
		start[40] = 0.0031487;
		start[41] = 0.0042059;
		start[42] = 0.0095188;
		start[43] = 0.0093666;
		start[44] = 0.0052429;
		start[45] = 0.0074304;
		start[46] = 0.0042044;
		start[47] = 0.0094392;
		start[48] = 0.0070833;
		start[49] = 0.0053508;
		start[50] = 0.009966;
		start[51] = 0.0021817;
		start[52] = 0.0033284;
		start[53] = 0.0058897;
		start[54] = 0.0077643;
		start[55] = 0.0087691;
		start[56] = 0.0033566;
		start[57] = 0.0074586;
		start[58] = 0.0010935;
		start[59] = 0.0094875;
		start[60] = 0.0022318;
		start[61] = 0.00253;
		start[62] = 0.0072224;
		start[63] = 0.007851;
		start[64] = 0.00060918;
		start[65] = 0.0096725;
		start[66] = 0.0052395;
		start[67] = 0.008853;
		start[68] = 0.0048895;
		start[69] = 0.0092123;
		start[70] = 0.0032101;
		start[71] = 0.0016981;
		start[72] = 0.0087999;
		start[73] = 0.0044775;
		start[74] = 0.0085152;
		start[75] = 0.0015148;
		start[76] = 0.00059003;
		start[77] = 0.0034348;
		start[78] = 0.0034705;
		start[79] = 0.00059128;
		start[80] = 0.0024392;
		start[81] = 0.0094713;
		start[82] = 0.00075886;
		start[83] = 0.0057397;
		start[84] = 0.0046763;
		start[85] = 0.00058464;
		start[86] = 0.0010893;
		start[87] = 0.00078682;
		start[88] = 0.0037141;
		start[89] = 0.0064178;
		start[90] = 0.0064619;
		start[91] = 0.0070364;
		start[92] = 0.0099651;
		start[93] = 0.00073192;
		start[94] = 0.0046799;
		start[95] = 0.00039179;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0065616;
		start[11] = 0.00704;
		start[12] = 0.0011325;
		start[13] = 0.0058364;
		start[14] = 0.0091933;
		start[15] = 0.009366;
		start[16] = 0.0045435;
		start[17] = 0.00986;
		start[18] = 0.00841;
		start[19] = 0.0038937;
		start[20] = 0.008794;
		start[21] = 0.0060294;
		start[22] = 0.00044346;
		start[23] = 0.0040645;
		start[24] = 0.0081836;
		start[25] = 0.0032973;
		start[26] = 0.0046518;
		start[27] = 0.0095879;
		start[28] = 0.0014445;
		start[29] = 7.8647e-05;
		start[30] = 0.0063059;
		start[31] = 0.0085489;
		start[32] = 0.006051;
		start[33] = 0.0022801;
		start[34] = 0.0096636;
		start[35] = 0.0063026;
		start[36] = 0.0019527;
		start[37] = 0.0068005;
		start[38] = 0.0015187;
		start[39] = 0.00093031;
		start[40] = 0.0039328;
		start[41] = 0.00067869;
		start[42] = 0.0076852;
		start[43] = 0.0022421;
		start[44] = 0.0091019;
		start[45] = 0.0022015;
		start[46] = 0.0053376;
		start[47] = 0.0034356;
		start[48] = 0.0049762;
		start[49] = 0.0027747;
		start[50] = 0.0015102;
		start[51] = 0.0028968;
		start[52] = 0.00069271;
		start[53] = 0.0056256;
		start[54] = 0.0054392;
		start[55] = 0.00017948;
		start[56] = 0.0086201;
		start[57] = 0.0041178;
		start[58] = 0.0022846;
		start[59] = 0.0043844;
		start[60] = 0.0014626;
		start[61] = 0.0058376;
		start[62] = 0.0099182;
		start[63] = 0.00089146;
		start[64] = 0.0059298;
		start[65] = 0.0097487;
		start[66] = 0.0089883;
		start[67] = 0.002734;
		start[68] = 0.0064631;
		start[69] = 0.001313;
		start[70] = 0.0072593;
		start[71] = 0.0043711;
		start[72] = 0.0053997;
		start[73] = 0.0012435;
		start[74] = 0.0031078;
		start[75] = 0.0051947;
		start[76] = 0.0052539;
		start[77] = 0.005605;
		start[78] = 0.0030147;
		start[79] = 0.0048289;
		start[80] = 0.0080845;
		start[81] = 0.0050951;
		start[82] = 0.0082466;
		start[83] = 0.00087535;
		start[84] = 0.0022636;
		start[85] = 0.00773;
		start[86] = 0.00057579;
		start[87] = 0.0068295;
		start[88] = 0.0087629;
		start[89] = 0.0036802;
		start[90] = 0.00030192;
		start[91] = 0.0034028;
		start[92] = 0.0054156;
		start[93] = 0.0043373;
		start[94] = 0.0074907;
		start[95] = 0.0028215;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0095777;
		start[11] = 0.0091377;
		start[12] = 0.0094994;
		start[13] = 0.0063182;
		start[14] = 0.0020158;
		start[15] = 0.0085874;
		start[16] = 0.0072409;
		start[17] = 0.00035132;
		start[18] = 0.004073;
		start[19] = 0.0061363;
		start[20] = 0.0044622;
		start[21] = 0.0063422;
		start[22] = 0.0025316;
		start[23] = 0.0014819;
		start[24] = 3.2208e-05;
		start[25] = 9.2426e-05;
		start[26] = 0.0033638;
		start[27] = 0.0041503;
		start[28] = 0.0085768;
		start[29] = 0.0061964;
		start[30] = 0.0071972;
		start[31] = 0.0072877;
		start[32] = 0.0077159;
		start[33] = 0.0029339;
		start[34] = 0.0099321;
		start[35] = 0.0096895;
		start[36] = 0.0091653;
		start[37] = 0.0043548;
		start[38] = 0.0031922;
		start[39] = 0.0062043;
		start[40] = 0.0070195;
		start[41] = 0.0013535;
		start[42] = 0.0098305;
		start[43] = 0.0099405;
		start[44] = 0.0076246;
		start[45] = 0.0035296;
		start[46] = 0.0071501;
		start[47] = 0.0078193;
		start[48] = 0.0082705;
		start[49] = 0.0053768;
		start[50] = 0.0018397;
		start[51] = 0.0026914;
		start[52] = 0.0054358;
		start[53] = 0.0064972;
		start[54] = 0.0058504;
		start[55] = 0.0068594;
		start[56] = 0.0080772;
		start[57] = 0.0060186;
		start[58] = 0.0098575;
		start[59] = 0.0019902;
		start[60] = 0.0085959;
		start[61] = 0.0041603;
		start[62] = 0.0039084;
		start[63] = 0.0044006;
		start[64] = 0.0065823;
		start[65] = 0.0050645;
		start[66] = 0.00016078;
		start[67] = 0.0065369;
		start[68] = 0.0045966;
		start[69] = 0.0026866;
		start[70] = 0.0096219;
		start[71] = 6.825e-05;
		start[72] = 0.0015702;
		start[73] = 0.0053294;
		start[74] = 0.0084997;
		start[75] = 0.0016917;
		start[76] = 0.00084816;
		start[77] = 0.0021197;
		start[78] = 0.0020766;
		start[79] = 0.0039593;
		start[80] = 0.0053058;
		start[81] = 0.00056224;
		start[82] = 0.0079284;
		start[83] = 0.0049652;
		start[84] = 0.0036692;
		start[85] = 0.0062123;
		start[86] = 0.0043906;
		start[87] = 0.007011;
		start[88] = 0.00056217;
		start[89] = 0.0019201;
		start[90] = 0.008973;
		start[91] = 0.0056;
		start[92] = 0.002378;
		start[93] = 0.0055492;
		start[94] = 0.0096148;
		start[95] = 0.0023931;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.00013116;
		start[11] = 0.0043793;
		start[12] = 0.00031485;
		start[13] = 0.0054611;
		start[14] = 0.0060411;
		start[15] = 0.003772;
		start[16] = 0.0084492;
		start[17] = 0.0073928;
		start[18] = 0.0055858;
		start[19] = 0.0025969;
		start[20] = 0.0014274;
		start[21] = 0.00051885;
		start[22] = 0.0029309;
		start[23] = 0.0039585;
		start[24] = 0.0057134;
		start[25] = 0.0098454;
		start[26] = 0.0027418;
		start[27] = 0.0099833;
		start[28] = 0.0059601;
		start[29] = 0.0048331;
		start[30] = 0.0097332;
		start[31] = 0.0095203;
		start[32] = 0.0044118;
		start[33] = 0.0033263;
		start[34] = 0.0049682;
		start[35] = 0.0057565;
		start[36] = 0.0096348;
		start[37] = 0.0096742;
		start[38] = 0.0098333;
		start[39] = 0.0043864;
		start[40] = 0.0083023;
		start[41] = 0.0051287;
		start[42] = 0.0058127;
		start[43] = 0.0045822;
		start[44] = 0.0047307;
		start[45] = 0.0011311;
		start[46] = 0.0038999;
		start[47] = 0.0042948;
		start[48] = 0.0022406;
		start[49] = 0.0037273;
		start[50] = 0.0035196;
		start[51] = 0.0092404;
		start[52] = 0.0065207;
		start[53] = 0.00060905;
		start[54] = 4.614e-06;
		start[55] = 0.0093897;
		start[56] = 0.00922;
		start[57] = 0.0005901;
		start[58] = 0.0044957;
		start[59] = 0.0045157;
		start[60] = 0.0061649;
		start[61] = 0.0019585;
		start[62] = 0.0082326;
		start[63] = 0.0057474;
		start[64] = 0.006053;
		start[65] = 0.0015371;
		start[66] = 0.004309;
		start[67] = 0.0032621;
		start[68] = 0.0070531;
		start[69] = 0.0094622;
		start[70] = 0.0047492;
		start[71] = 0.005306;
		start[72] = 0.0018403;
		start[73] = 0.0096922;
		start[74] = 0.0055616;
		start[75] = 0.0099221;
		start[76] = 0.0038675;
		start[77] = 0.00013103;
		start[78] = 0.0043638;
		start[79] = 0.0075481;
		start[80] = 0.0016872;
		start[81] = 0.0083847;
		start[82] = 0.0027082;
		start[83] = 0.002836;
		start[84] = 0.00088908;
		start[85] = 0.005747;
		start[86] = 0.0024378;
		start[87] = 0.0087535;
		start[88] = 0.0093729;
		start[89] = 0.0070095;
		start[90] = 0.0058681;
		start[91] = 0.0058488;
		start[92] = 0.0054771;
		start[93] = 0.0045007;
		start[94] = 0.0044781;
		start[95] = 0.0072639;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0015726;
		start[11] = 0.0020316;
		start[12] = 0.0002157;
		start[13] = 0.0088552;
		start[14] = 0.0025905;
		start[15] = 0.001914;
		start[16] = 0.0083827;
		start[17] = 0.0013417;
		start[18] = 0.0067948;
		start[19] = 0.0096733;
		start[20] = 0.00027237;
		start[21] = 0.0054167;
		start[22] = 0.0064435;
		start[23] = 0.0074157;
		start[24] = 0.0058883;
		start[25] = 0.0090368;
		start[26] = 0.0092623;
		start[27] = 0.0062706;
		start[28] = 0.0090734;
		start[29] = 0.0069792;
		start[30] = 0.00020664;
		start[31] = 0.0017278;
		start[32] = 0.0044521;
		start[33] = 0.00039334;
		start[34] = 0.0014582;
		start[35] = 0.0069511;
		start[36] = 0.0059415;
		start[37] = 0.0049933;
		start[38] = 0.0073754;
		start[39] = 0.0030141;
		start[40] = 0.0034461;
		start[41] = 0.0068718;
		start[42] = 0.00034251;
		start[43] = 0.0044474;
		start[44] = 0.0039022;
		start[45] = 0.0071204;
		start[46] = 0.0044651;
		start[47] = 0.0038398;
		start[48] = 0.0062275;
		start[49] = 0.00029785;
		start[50] = 0.0035782;
		start[51] = 0.0044743;
		start[52] = 0.0078113;
		start[53] = 0.0032275;
		start[54] = 0.0096723;
		start[55] = 0.0038132;
		start[56] = 0.0001284;
		start[57] = 0.0044449;
		start[58] = 0.0061477;
		start[59] = 0.00090421;
		start[60] = 0.0022622;
		start[61] = 0.0086693;
		start[62] = 0.0039592;
		start[63] = 0.0021546;
		start[64] = 0.0059835;
		start[65] = 0.0063088;
		start[66] = 0.008993;
		start[67] = 0.0064478;
		start[68] = 0.0049061;
		start[69] = 0.0011421;
		start[70] = 0.0013068;
		start[71] = 0.00082009;
		start[72] = 0.009142;
		start[73] = 0.0069416;
		start[74] = 0.005405;
		start[75] = 0.0060178;
		start[76] = 0.002087;
		start[77] = 0.0089749;
		start[78] = 0.0056068;
		start[79] = 0.0051007;
		start[80] = 0.0011145;
		start[81] = 0.0093488;
		start[82] = 0.00087237;
		start[83] = 0.0018151;
		start[84] = 0.0060805;
		start[85] = 0.00090549;
		start[86] = 0.0019279;
		start[87] = 0.00055122;
		start[88] = 0.0085374;
		start[89] = 0.0080957;
		start[90] = 0.0077532;
		start[91] = 0.0046679;
		start[92] = 0.0069283;
		start[93] = 0.0025472;
		start[94] = 0.0069962;
		start[95] = 0.0087666;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.006338;
		start[11] = 0.0041268;
		start[12] = 0.0046151;
		start[13] = 0.00018759;
		start[14] = 0.00059239;
		start[15] = 0.0010402;
		start[16] = 0.0068202;
		start[17] = 0.0076822;
		start[18] = 0.0019458;
		start[19] = 0.00051859;
		start[20] = 0.0056473;
		start[21] = 0.0058936;
		start[22] = 0.0092991;
		start[23] = 0.00092873;
		start[24] = 0.002358;
		start[25] = 0.0090967;
		start[26] = 0.0098723;
		start[27] = 0.0065587;
		start[28] = 0.0042735;
		start[29] = 0.0084657;
		start[30] = 0.0037382;
		start[31] = 0.0026272;
		start[32] = 0.0012153;
		start[33] = 0.009951;
		start[34] = 0.0032231;
		start[35] = 0.0061256;
		start[36] = 0.0031533;
		start[37] = 0.0060035;
		start[38] = 0.0052494;
		start[39] = 0.0044601;
		start[40] = 0.0012;
		start[41] = 0.0085379;
		start[42] = 0.0042117;
		start[43] = 0.00048592;
		start[44] = 0.0057182;
		start[45] = 0.0010229;
		start[46] = 0.0015601;
		start[47] = 0.0052551;
		start[48] = 0.0078348;
		start[49] = 0.0074745;
		start[50] = 0.0090363;
		start[51] = 0.00222;
		start[52] = 0.0039734;
		start[53] = 0.001414;
		start[54] = 0.0022918;
		start[55] = 0.003677;
		start[56] = 0.0023764;
		start[57] = 0.0057814;
		start[58] = 0.00531;
		start[59] = 0.0033326;
		start[60] = 0.0023053;
		start[61] = 0.0044039;
		start[62] = 0.00072349;
		start[63] = 0.0044985;
		start[64] = 0.0062101;
		start[65] = 0.0018453;
		start[66] = 0.0095981;
		start[67] = 0.0042918;
		start[68] = 0.0088927;
		start[69] = 0.0072199;
		start[70] = 0.0099633;
		start[71] = 0.0089009;
		start[72] = 0.0026977;
		start[73] = 0.0030147;
		start[74] = 0.0077351;
		start[75] = 0.0068783;
		start[76] = 0.0013725;
		start[77] = 0.0028933;
		start[78] = 7.5774e-05;
		start[79] = 0.002261;
		start[80] = 0.0024363;
		start[81] = 0.0095299;
		start[82] = 0.0004516;
		start[83] = 0.0081959;
		start[84] = 0.008039;
		start[85] = 0.0030558;
		start[86] = 0.0035336;
		start[87] = 0.0042864;
		start[88] = 0.0082566;
		start[89] = 0.006592;
		start[90] = 0.0016166;
		start[91] = 0.0083281;
		start[92] = 0.0087309;
		start[93] = 0.0012639;
		start[94] = 0.0010341;
		start[95] = 0.0069144;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.00056245;
		start[11] = 0.0038054;
		start[12] = 0.0027778;
		start[13] = 0.0046972;
		start[14] = 0.0095058;
		start[15] = 0.0050338;
		start[16] = 0.0069933;
		start[17] = 0.00788;
		start[18] = 0.001379;
		start[19] = 0.0031693;
		start[20] = 0.009324;
		start[21] = 0.0072801;
		start[22] = 0.0087216;
		start[23] = 0.00090691;
		start[24] = 0.0032615;
		start[25] = 0.0019661;
		start[26] = 0.0046042;
		start[27] = 0.0020726;
		start[28] = 0.0014569;
		start[29] = 0.0080325;
		start[30] = 0.0046598;
		start[31] = 0.00958;
		start[32] = 0.00907;
		start[33] = 0.0033209;
		start[34] = 0.0046684;
		start[35] = 0.0090845;
		start[36] = 0.0020163;
		start[37] = 0.0069326;
		start[38] = 0.0031511;
		start[39] = 0.0072066;
		start[40] = 0.0037422;
		start[41] = 0.0073698;
		start[42] = 0.00064525;
		start[43] = 0.006614;
		start[44] = 0.0045159;
		start[45] = 0.0052439;
		start[46] = 0.0082628;
		start[47] = 0.009819;
		start[48] = 0.0049361;
		start[49] = 0.0061568;
		start[50] = 0.0039138;
		start[51] = 0.0043296;
		start[52] = 0.0032231;
		start[53] = 0.0066167;
		start[54] = 0.0066192;
		start[55] = 0.0051753;
		start[56] = 0.0045302;
		start[57] = 0.0046155;
		start[58] = 0.0048378;
		start[59] = 0.0095681;
		start[60] = 0.0099513;
		start[61] = 0.0026267;
		start[62] = 0.0077784;
		start[63] = 0.0092982;
		start[64] = 0.002016;
		start[65] = 0.0099404;
		start[66] = 0.0078727;
		start[67] = 0.0052876;
		start[68] = 0.0066583;
		start[69] = 0.001255;
		start[70] = 0.0014708;
		start[71] = 0.0081252;
		start[72] = 0.0054263;
		start[73] = 0.0086407;
		start[74] = 0.0014063;
		start[75] = 0.00077118;
		start[76] = 0.0018065;
		start[77] = 0.0020801;
		start[78] = 0.0057925;
		start[79] = 0.0083581;
		start[80] = 0.00040577;
		start[81] = 0.0020481;
		start[82] = 0.0053162;
		start[83] = 0.0054263;
		start[84] = 0.0099067;
		start[85] = 0.0099552;
		start[86] = 0.0026387;
		start[87] = 0.0030489;
		start[88] = 0.0031338;
		start[89] = 0.0063444;
		start[90] = 0.0024948;
		start[91] = 0.0048994;
		start[92] = 0.0036677;
		start[93] = 0.00039302;
		start[94] = 0.0039984;
		start[95] = 0.0061503;
		std::vector<double> endEff (3);
		endEff[0] = -0.10724;
		endEff[1] = -0.16213;
		endEff[2] = 0.71794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0065632;
		start[11] = 0.0020619;
		start[12] = 0.0078737;
		start[13] = 0.0027519;
		start[14] = 0.0049925;
		start[15] = 0.0014181;
		start[16] = 0.0047623;
		start[17] = 0.0096815;
		start[18] = 0.0025874;
		start[19] = 0.0046058;
		start[20] = 0.0065926;
		start[21] = 0.0041998;
		start[22] = 0.0032871;
		start[23] = 0.0083923;
		start[24] = 0.0052786;
		start[25] = 0.009632;
		start[26] = 0.0097361;
		start[27] = 0.0010936;
		start[28] = 0.0063745;
		start[29] = 0.0084194;
		start[30] = 0.0081252;
		start[31] = 0.0047388;
		start[32] = 0.0024003;
		start[33] = 0.0011285;
		start[34] = 0.0021272;
		start[35] = 0.0076567;
		start[36] = 0.0034273;
		start[37] = 0.0016366;
		start[38] = 0.0045125;
		start[39] = 0.002722;
		start[40] = 0.0050797;
		start[41] = 0.0090363;
		start[42] = 0.0044345;
		start[43] = 0.0082602;
		start[44] = 0.00021022;
		start[45] = 0.00046416;
		start[46] = 0.0065348;
		start[47] = 0.0084793;
		start[48] = 0.0033036;
		start[49] = 0.0079357;
		start[50] = 0.0025148;
		start[51] = 0.0035542;
		start[52] = 0.0094972;
		start[53] = 0.0048287;
		start[54] = 0.0016935;
		start[55] = 0.0096919;
		start[56] = 0.0081262;
		start[57] = 0.0063047;
		start[58] = 0.00096121;
		start[59] = 0.0079608;
		start[60] = 0.0077084;
		start[61] = 0.004008;
		start[62] = 0.0015701;
		start[63] = 0.0023967;
		start[64] = 0.0037403;
		start[65] = 0.0034231;
		start[66] = 0.0024698;
		start[67] = 0.0026978;
		start[68] = 0.0022621;
		start[69] = 0.00026914;
		start[70] = 0.00091573;
		start[71] = 0.00086191;
		start[72] = 0.0093883;
		start[73] = 0.0060006;
		start[74] = 0.0066613;
		start[75] = 0.0076738;
		start[76] = 0.0067348;
		start[77] = 0.0057807;
		start[78] = 0.0049323;
		start[79] = 0.0027249;
		start[80] = 0.0065041;
		start[81] = 0.0038221;
		start[82] = 0.0021195;
		start[83] = 0.00011862;
		start[84] = 0.0096499;
		start[85] = 0.0061609;
		start[86] = 0.0077826;
		start[87] = 0.0045433;
		start[88] = 0.0043612;
		start[89] = 0.0089333;
		start[90] = 0.006676;
		start[91] = 0.00052908;
		start[92] = 0.0067936;
		start[93] = 0.009991;
		start[94] = 0.0015478;
		start[95] = 0.0065;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0042395;
		start[11] = 0.0034301;
		start[12] = 0.0099744;
		start[13] = 0.0049881;
		start[14] = 0.007888;
		start[15] = 0.0036844;
		start[16] = 0.0077971;
		start[17] = 0.0018908;
		start[18] = 0.0029814;
		start[19] = 0.0061557;
		start[20] = 0.0022977;
		start[21] = 0.0049912;
		start[22] = 0.0060363;
		start[23] = 0.00020456;
		start[24] = 0.0026911;
		start[25] = 0.0069952;
		start[26] = 0.0048255;
		start[27] = 0.0052721;
		start[28] = 0.0094761;
		start[29] = 0.0062478;
		start[30] = 0.0089486;
		start[31] = 0.0088948;
		start[32] = 0.0051886;
		start[33] = 0.00046157;
		start[34] = 0.0026426;
		start[35] = 0.0090394;
		start[36] = 0.0035312;
		start[37] = 0.0032159;
		start[38] = 0.008556;
		start[39] = 0.0052907;
		start[40] = 0.00076839;
		start[41] = 0.009973;
		start[42] = 0.0015786;
		start[43] = 0.003394;
		start[44] = 0.0018357;
		start[45] = 0.0095774;
		start[46] = 0.009189;
		start[47] = 0.0093532;
		start[48] = 0.0040542;
		start[49] = 0.0025271;
		start[50] = 0.0088164;
		start[51] = 0.0022207;
		start[52] = 0.0044459;
		start[53] = 0.0037069;
		start[54] = 0.0038463;
		start[55] = 0.0019188;
		start[56] = 0.002592;
		start[57] = 0.0095426;
		start[58] = 0.003676;
		start[59] = 2.5049e-05;
		start[60] = 0.0097922;
		start[61] = 0.0011611;
		start[62] = 0.0030029;
		start[63] = 0.00045168;
		start[64] = 0.0057499;
		start[65] = 0.0035932;
		start[66] = 0.0062543;
		start[67] = 0.0070109;
		start[68] = 0.0088691;
		start[69] = 0.0016675;
		start[70] = 0.00016517;
		start[71] = 0.0098845;
		start[72] = 0.0094095;
		start[73] = 0.0036414;
		start[74] = 0.0075169;
		start[75] = 0.00021601;
		start[76] = 0.0087101;
		start[77] = 0.0073594;
		start[78] = 0.0068732;
		start[79] = 0.0059463;
		start[80] = 0.0066395;
		start[81] = 0.0054529;
		start[82] = 0.0057437;
		start[83] = 0.0090518;
		start[84] = 0.00043113;
		start[85] = 0.0030845;
		start[86] = 0.0072992;
		start[87] = 0.0043082;
		start[88] = 0.0074305;
		start[89] = 0.001342;
		start[90] = 0.0099674;
		start[91] = 0.0055006;
		start[92] = 0.0073271;
		start[93] = 0.0050686;
		start[94] = 0.005748;
		start[95] = 0.00063246;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0091952;
		start[11] = 0.0066097;
		start[12] = 0.0021263;
		start[13] = 0.0067093;
		start[14] = 0.0078953;
		start[15] = 0.00085009;
		start[16] = 0.0052169;
		start[17] = 0.0061518;
		start[18] = 0.0073514;
		start[19] = 0.0057538;
		start[20] = 0.0012194;
		start[21] = 0.0033862;
		start[22] = 0.005433;
		start[23] = 0.0037633;
		start[24] = 0.0069183;
		start[25] = 0.0095293;
		start[26] = 0.0099263;
		start[27] = 0.0075897;
		start[28] = 0.005546;
		start[29] = 0.0009298;
		start[30] = 0.0094808;
		start[31] = 0.0066367;
		start[32] = 0.0084045;
		start[33] = 0.0097313;
		start[34] = 0.0017342;
		start[35] = 0.0091991;
		start[36] = 0.0083527;
		start[37] = 0.0028574;
		start[38] = 0.0050685;
		start[39] = 0.0067643;
		start[40] = 0.0024695;
		start[41] = 0.0070572;
		start[42] = 0.0012841;
		start[43] = 0.00075309;
		start[44] = 0.0053843;
		start[45] = 0.006781;
		start[46] = 0.0069572;
		start[47] = 0.00090347;
		start[48] = 0.0033746;
		start[49] = 0.008164;
		start[50] = 0.0060919;
		start[51] = 0.0020212;
		start[52] = 0.0093098;
		start[53] = 0.0016112;
		start[54] = 0.0033174;
		start[55] = 3.5252e-06;
		start[56] = 0.0095169;
		start[57] = 0.0049302;
		start[58] = 0.0097809;
		start[59] = 0.0054537;
		start[60] = 0.0065267;
		start[61] = 0.0028356;
		start[62] = 0.0085866;
		start[63] = 0.0011266;
		start[64] = 0.0069481;
		start[65] = 0.0041177;
		start[66] = 0.0030211;
		start[67] = 0.0017883;
		start[68] = 0.0075423;
		start[69] = 0.004088;
		start[70] = 0.0074646;
		start[71] = 0.0088186;
		start[72] = 0.006006;
		start[73] = 0.0050957;
		start[74] = 0.0063964;
		start[75] = 0.0024487;
		start[76] = 0.00092342;
		start[77] = 0.0092066;
		start[78] = 0.001183;
		start[79] = 0.0016909;
		start[80] = 0.0084855;
		start[81] = 0.0068502;
		start[82] = 0.0092396;
		start[83] = 0.006357;
		start[84] = 0.005436;
		start[85] = 0.0086673;
		start[86] = 0.0035628;
		start[87] = 0.0069056;
		start[88] = 0.0066482;
		start[89] = 0.0016455;
		start[90] = 0.0096908;
		start[91] = 0.0048433;
		start[92] = 0.0024135;
		start[93] = 0.0049034;
		start[94] = 0.0086802;
		start[95] = 0.0081311;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0031836;
		start[11] = 0.0093636;
		start[12] = 0.0064161;
		start[13] = 0.0051315;
		start[14] = 0.0013889;
		start[15] = 0.0062488;
		start[16] = 0.0012108;
		start[17] = 0.0084398;
		start[18] = 0.0055253;
		start[19] = 0.0075887;
		start[20] = 0.0072014;
		start[21] = 0.0014989;
		start[22] = 0.0065476;
		start[23] = 0.005482;
		start[24] = 0.00044009;
		start[25] = 0.0027;
		start[26] = 0.0054224;
		start[27] = 0.0025905;
		start[28] = 0.0046276;
		start[29] = 0.0049164;
		start[30] = 0.0065239;
		start[31] = 0.0036706;
		start[32] = 0.004362;
		start[33] = 0.0042204;
		start[34] = 0.0076633;
		start[35] = 0.0095971;
		start[36] = 0.0070675;
		start[37] = 0.0076104;
		start[38] = 0.0078537;
		start[39] = 0.0011731;
		start[40] = 0.0085561;
		start[41] = 0.006934;
		start[42] = 0.0099212;
		start[43] = 0.0088032;
		start[44] = 0.008744;
		start[45] = 0.0095742;
		start[46] = 0.0034701;
		start[47] = 0.0034435;
		start[48] = 0.0088464;
		start[49] = 0.0050346;
		start[50] = 0.0081762;
		start[51] = 0.0084381;
		start[52] = 0.006055;
		start[53] = 0.0088806;
		start[54] = 0.0011223;
		start[55] = 0.0086118;
		start[56] = 0.0020238;
		start[57] = 0.0043755;
		start[58] = 0.0098966;
		start[59] = 0.0066243;
		start[60] = 0.0018907;
		start[61] = 0.0098014;
		start[62] = 0.0055045;
		start[63] = 0.0044611;
		start[64] = 0.0068418;
		start[65] = 0.0051482;
		start[66] = 0.0075852;
		start[67] = 0.0071937;
		start[68] = 0.006468;
		start[69] = 0.00088028;
		start[70] = 0.0058807;
		start[71] = 0.002852;
		start[72] = 0.0028956;
		start[73] = 0.0045894;
		start[74] = 0.00051249;
		start[75] = 0.00065137;
		start[76] = 0.0097587;
		start[77] = 0.008819;
		start[78] = 0.0084063;
		start[79] = 0.0090373;
		start[80] = 0.0037352;
		start[81] = 0.007193;
		start[82] = 0.0098338;
		start[83] = 8.6799e-05;
		start[84] = 0.004523;
		start[85] = 0.0029408;
		start[86] = 0.0061324;
		start[87] = 0.0044357;
		start[88] = 0.0088095;
		start[89] = 0.0037628;
		start[90] = 0.0071608;
		start[91] = 0.0047309;
		start[92] = 0.0027293;
		start[93] = 0.0068337;
		start[94] = 0.003278;
		start[95] = 0.008686;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0073434;
		start[11] = 0.0058901;
		start[12] = 0.0068434;
		start[13] = 0.0086144;
		start[14] = 0.00050642;
		start[15] = 0.00046998;
		start[16] = 0.0090157;
		start[17] = 0.00071838;
		start[18] = 0.003741;
		start[19] = 0.0011343;
		start[20] = 0.0069252;
		start[21] = 0.0092554;
		start[22] = 0.0028168;
		start[23] = 0.0057282;
		start[24] = 0.0039361;
		start[25] = 0.0045486;
		start[26] = 0.0088638;
		start[27] = 0.0087301;
		start[28] = 0.0092783;
		start[29] = 0.0035623;
		start[30] = 0.0085701;
		start[31] = 0.00056912;
		start[32] = 0.0007365;
		start[33] = 0.0087032;
		start[34] = 0.0086593;
		start[35] = 0.0064282;
		start[36] = 0.0064558;
		start[37] = 0.0035137;
		start[38] = 0.00066698;
		start[39] = 0.0032248;
		start[40] = 0.0096001;
		start[41] = 0.0081515;
		start[42] = 0.0047588;
		start[43] = 0.0097376;
		start[44] = 0.0022173;
		start[45] = 0.0020475;
		start[46] = 0.0013923;
		start[47] = 0.0059373;
		start[48] = 0.0027906;
		start[49] = 0.005597;
		start[50] = 0.0062793;
		start[51] = 0.0052217;
		start[52] = 0.0086701;
		start[53] = 0.0055174;
		start[54] = 0.0098578;
		start[55] = 0.0076302;
		start[56] = 0.0072594;
		start[57] = 0.0092277;
		start[58] = 0.0087336;
		start[59] = 0.0021703;
		start[60] = 0.0066927;
		start[61] = 0.00069567;
		start[62] = 0.00092166;
		start[63] = 0.0093497;
		start[64] = 0.0061466;
		start[65] = 0.007038;
		start[66] = 0.0096233;
		start[67] = 0.0081117;
		start[68] = 0.0068212;
		start[69] = 0.0035004;
		start[70] = 0.0078707;
		start[71] = 0.0054429;
		start[72] = 0.002383;
		start[73] = 0.00060895;
		start[74] = 0.0069065;
		start[75] = 0.0092435;
		start[76] = 0.0014781;
		start[77] = 0.0072699;
		start[78] = 0.0046012;
		start[79] = 0.0026884;
		start[80] = 0.007797;
		start[81] = 0.0055139;
		start[82] = 0.0067813;
		start[83] = 0.0073264;
		start[84] = 0.0033683;
		start[85] = 0.0013128;
		start[86] = 0.00084065;
		start[87] = 0.0078615;
		start[88] = 0.0051839;
		start[89] = 0.0078687;
		start[90] = 0.0091552;
		start[91] = 0.0080598;
		start[92] = 0.0011678;
		start[93] = 0.0096287;
		start[94] = 0.00016822;
		start[95] = 0.00089967;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0090394;
		start[11] = 0.0064173;
		start[12] = 0.0031826;
		start[13] = 0.0065295;
		start[14] = 0.0063344;
		start[15] = 0.0017112;
		start[16] = 0.0071658;
		start[17] = 0.006825;
		start[18] = 0.0018012;
		start[19] = 0.00097005;
		start[20] = 0.0018577;
		start[21] = 0.0088276;
		start[22] = 0.0026872;
		start[23] = 0.0093248;
		start[24] = 0.0029796;
		start[25] = 0.0079052;
		start[26] = 0.0022823;
		start[27] = 0.0082816;
		start[28] = 0.0097256;
		start[29] = 0.0023533;
		start[30] = 0.0095485;
		start[31] = 0.0018365;
		start[32] = 0.007394;
		start[33] = 0.0020813;
		start[34] = 0.0066572;
		start[35] = 0.0052108;
		start[36] = 0.0079752;
		start[37] = 0.0040197;
		start[38] = 0.0096026;
		start[39] = 0.004492;
		start[40] = 0.0069682;
		start[41] = 0.00054867;
		start[42] = 0.0050857;
		start[43] = 0.0063449;
		start[44] = 0.0029742;
		start[45] = 0.0049681;
		start[46] = 0.0086284;
		start[47] = 0.0040949;
		start[48] = 0.0048218;
		start[49] = 0.0079894;
		start[50] = 0.00051027;
		start[51] = 0.0051495;
		start[52] = 0.006188;
		start[53] = 0.0062623;
		start[54] = 0.0053364;
		start[55] = 0.0089612;
		start[56] = 0.0037999;
		start[57] = 0.0036756;
		start[58] = 0.0011411;
		start[59] = 0.0094848;
		start[60] = 0.0092189;
		start[61] = 0.0045163;
		start[62] = 0.002423;
		start[63] = 0.0050682;
		start[64] = 0.0087904;
		start[65] = 0.0041488;
		start[66] = 0.0071554;
		start[67] = 0.0043606;
		start[68] = 0.0064742;
		start[69] = 0.0035776;
		start[70] = 0.0013517;
		start[71] = 0.0051739;
		start[72] = 0.0038531;
		start[73] = 0.0071132;
		start[74] = 0.0084027;
		start[75] = 0.0051297;
		start[76] = 0.0014873;
		start[77] = 0.00047187;
		start[78] = 0.0087615;
		start[79] = 0.006288;
		start[80] = 0.0064892;
		start[81] = 0.006671;
		start[82] = 0.00069079;
		start[83] = 0.0043975;
		start[84] = 0.0035178;
		start[85] = 0.002594;
		start[86] = 0.00046402;
		start[87] = 0.0087959;
		start[88] = 0.0034004;
		start[89] = 0.0020591;
		start[90] = 0.0008283;
		start[91] = 0.0044119;
		start[92] = 0.0040703;
		start[93] = 0.0098943;
		start[94] = 0.0014598;
		start[95] = 0.0084023;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0032157;
		start[11] = 0.0050922;
		start[12] = 0.0031478;
		start[13] = 7.8961e-05;
		start[14] = 0.0073036;
		start[15] = 0.0013033;
		start[16] = 0.0012353;
		start[17] = 0.0092695;
		start[18] = 0.0051479;
		start[19] = 0.0015244;
		start[20] = 0.0088859;
		start[21] = 0.0039778;
		start[22] = 0.00286;
		start[23] = 0.0037477;
		start[24] = 0.003073;
		start[25] = 0.0078619;
		start[26] = 0.0073855;
		start[27] = 0.0045951;
		start[28] = 0.008019;
		start[29] = 0.0051677;
		start[30] = 0.00061941;
		start[31] = 0.0087867;
		start[32] = 0.0026146;
		start[33] = 0.0024423;
		start[34] = 1.4043e-05;
		start[35] = 0.0069719;
		start[36] = 0.0041458;
		start[37] = 0.0081947;
		start[38] = 0.0014909;
		start[39] = 0.00063721;
		start[40] = 0.0056685;
		start[41] = 0.0035042;
		start[42] = 0.0074684;
		start[43] = 0.0090539;
		start[44] = 0.00085151;
		start[45] = 0.004591;
		start[46] = 0.0075034;
		start[47] = 0.0013389;
		start[48] = 0.00091052;
		start[49] = 0.0080782;
		start[50] = 0.0079404;
		start[51] = 0.0058429;
		start[52] = 0.0076525;
		start[53] = 0.005307;
		start[54] = 0.0068841;
		start[55] = 0.005328;
		start[56] = 0.00075135;
		start[57] = 0.007413;
		start[58] = 0.0072302;
		start[59] = 0.0076981;
		start[60] = 0.0082075;
		start[61] = 0.0089091;
		start[62] = 0.000554;
		start[63] = 0.00028361;
		start[64] = 0.00085228;
		start[65] = 0.0073975;
		start[66] = 0.0082131;
		start[67] = 0.0018099;
		start[68] = 0.0083307;
		start[69] = 0.00038157;
		start[70] = 0.0045361;
		start[71] = 0.003711;
		start[72] = 0.0042596;
		start[73] = 0.0009438;
		start[74] = 0.0049255;
		start[75] = 0.0044953;
		start[76] = 0.0071748;
		start[77] = 0.0042353;
		start[78] = 0.0068778;
		start[79] = 0.005292;
		start[80] = 0.00051034;
		start[81] = 0.0046666;
		start[82] = 0.0096013;
		start[83] = 0.0067203;
		start[84] = 0.0084876;
		start[85] = 0.0081497;
		start[86] = 0.0074714;
		start[87] = 0.0081975;
		start[88] = 0.0068574;
		start[89] = 0.00077804;
		start[90] = 0.0020611;
		start[91] = 0.0078331;
		start[92] = 0.0036029;
		start[93] = 0.0071133;
		start[94] = 0.0079188;
		start[95] = 0.0041577;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 4.0587e-05;
		start[11] = 0.0086098;
		start[12] = 0.009824;
		start[13] = 0.0045244;
		start[14] = 0.0082577;
		start[15] = 0.0042264;
		start[16] = 0.0047198;
		start[17] = 0.0019616;
		start[18] = 0.0027968;
		start[19] = 0.0023367;
		start[20] = 0.0039883;
		start[21] = 0.000409;
		start[22] = 0.001853;
		start[23] = 0.0015715;
		start[24] = 0.00079787;
		start[25] = 0.0027566;
		start[26] = 0.00079003;
		start[27] = 0.0071682;
		start[28] = 0.0016679;
		start[29] = 0.0058577;
		start[30] = 0.0084616;
		start[31] = 0.0024299;
		start[32] = 0.0040373;
		start[33] = 0.0070854;
		start[34] = 0.007954;
		start[35] = 0.0025896;
		start[36] = 0.0062766;
		start[37] = 0.0059982;
		start[38] = 0.0087121;
		start[39] = 0.0073188;
		start[40] = 0.0043367;
		start[41] = 0.0085253;
		start[42] = 0.0040986;
		start[43] = 0.0081041;
		start[44] = 0.0011534;
		start[45] = 0.0032887;
		start[46] = 0.0065222;
		start[47] = 0.0077968;
		start[48] = 0.0067357;
		start[49] = 0.0029473;
		start[50] = 0.0049427;
		start[51] = 0.0063879;
		start[52] = 0.0044749;
		start[53] = 0.0062298;
		start[54] = 0.0028434;
		start[55] = 0.0044263;
		start[56] = 0.0038667;
		start[57] = 0.0090272;
		start[58] = 0.0088849;
		start[59] = 0.0011152;
		start[60] = 0.0002591;
		start[61] = 0.0066768;
		start[62] = 0.0012896;
		start[63] = 0.0040212;
		start[64] = 0.0068113;
		start[65] = 0.0051325;
		start[66] = 0.0053805;
		start[67] = 0.0075788;
		start[68] = 0.0084663;
		start[69] = 0.0090959;
		start[70] = 0.0049132;
		start[71] = 0.0086734;
		start[72] = 0.0014032;
		start[73] = 0.0025974;
		start[74] = 0.006933;
		start[75] = 0.0099106;
		start[76] = 0.00036129;
		start[77] = 0.00089884;
		start[78] = 0.00025864;
		start[79] = 0.0068832;
		start[80] = 0.0060252;
		start[81] = 7.1798e-05;
		start[82] = 0.0010567;
		start[83] = 0.0089057;
		start[84] = 0.0028121;
		start[85] = 0.0096365;
		start[86] = 0.0071318;
		start[87] = 0.0077105;
		start[88] = 0.0048855;
		start[89] = 0.0097735;
		start[90] = 0.0021199;
		start[91] = 0.0099281;
		start[92] = 0.0076032;
		start[93] = 0.0048141;
		start[94] = 0.0063218;
		start[95] = 0.0079259;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.006497;
		start[11] = 0.0019358;
		start[12] = 0.0045463;
		start[13] = 0.0030397;
		start[14] = 0.00029668;
		start[15] = 0.0031603;
		start[16] = 0.0094319;
		start[17] = 0.0024039;
		start[18] = 0.0057323;
		start[19] = 0.0091373;
		start[20] = 0.0020507;
		start[21] = 0.0013996;
		start[22] = 0.0068907;
		start[23] = 0.00019492;
		start[24] = 0.0068896;
		start[25] = 0.0088178;
		start[26] = 0.0018047;
		start[27] = 0.00168;
		start[28] = 0.0070593;
		start[29] = 0.0044387;
		start[30] = 0.009955;
		start[31] = 0.0039364;
		start[32] = 0.008421;
		start[33] = 0.0044578;
		start[34] = 0.00040154;
		start[35] = 0.0028395;
		start[36] = 0.0046888;
		start[37] = 0.0041955;
		start[38] = 0.0020546;
		start[39] = 0.0082935;
		start[40] = 0.0081541;
		start[41] = 0.0040315;
		start[42] = 0.0020863;
		start[43] = 0.0012061;
		start[44] = 0.0045731;
		start[45] = 0.0095356;
		start[46] = 0.0075289;
		start[47] = 0.0098996;
		start[48] = 0.00014062;
		start[49] = 0.0052848;
		start[50] = 0.0047479;
		start[51] = 0.0095014;
		start[52] = 0.0063691;
		start[53] = 0.0090893;
		start[54] = 0.0036362;
		start[55] = 0.0098938;
		start[56] = 0.0060645;
		start[57] = 0.0016598;
		start[58] = 0.0010663;
		start[59] = 0.0099224;
		start[60] = 0.0026221;
		start[61] = 0.0082382;
		start[62] = 0.0024153;
		start[63] = 0.0081548;
		start[64] = 0.0061693;
		start[65] = 0.0031043;
		start[66] = 0.00020234;
		start[67] = 0.0063105;
		start[68] = 0.0098007;
		start[69] = 0.0064339;
		start[70] = 0.0081377;
		start[71] = 0.0065843;
		start[72] = 0.0063332;
		start[73] = 0.0058491;
		start[74] = 0.00042849;
		start[75] = 0.0056301;
		start[76] = 0.00075223;
		start[77] = 0.0051244;
		start[78] = 0.0063257;
		start[79] = 0.0098118;
		start[80] = 0.0013666;
		start[81] = 0.0055084;
		start[82] = 0.0018247;
		start[83] = 0.00054761;
		start[84] = 0.0077558;
		start[85] = 0.0072701;
		start[86] = 0.0070535;
		start[87] = 0.0025185;
		start[88] = 0.0050159;
		start[89] = 0.0040817;
		start[90] = 0.0085581;
		start[91] = 0.0072724;
		start[92] = 0.0034825;
		start[93] = 0.0061926;
		start[94] = 0.0030249;
		start[95] = 0.0064198;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.003486;
		start[11] = 0.0008208;
		start[12] = 0.0053145;
		start[13] = 0.0064639;
		start[14] = 0.0037101;
		start[15] = 0.0059659;
		start[16] = 0.0043727;
		start[17] = 0.0018336;
		start[18] = 0.0035782;
		start[19] = 0.0092586;
		start[20] = 0.0014185;
		start[21] = 0.0099025;
		start[22] = 0.001945;
		start[23] = 0.0039358;
		start[24] = 0.0039411;
		start[25] = 0.00059946;
		start[26] = 0.0025029;
		start[27] = 0.0050585;
		start[28] = 0.00085863;
		start[29] = 0.008212;
		start[30] = 0.0046186;
		start[31] = 0.0064798;
		start[32] = 0.0020244;
		start[33] = 0.0087796;
		start[34] = 0.0083124;
		start[35] = 0.0010542;
		start[36] = 0.0016741;
		start[37] = 0.0022005;
		start[38] = 0.0097758;
		start[39] = 0.0073382;
		start[40] = 0.0026978;
		start[41] = 0.0039158;
		start[42] = 0.0060841;
		start[43] = 0.0059105;
		start[44] = 0.0024303;
		start[45] = 0.002935;
		start[46] = 0.0081747;
		start[47] = 0.009396;
		start[48] = 0.00074956;
		start[49] = 0.0025839;
		start[50] = 0.00044469;
		start[51] = 0.0045777;
		start[52] = 0.0030256;
		start[53] = 0.0039;
		start[54] = 0.0030098;
		start[55] = 0.00023628;
		start[56] = 0.00099422;
		start[57] = 0.0057661;
		start[58] = 0.0040804;
		start[59] = 0.0023086;
		start[60] = 0.0037846;
		start[61] = 0.0063961;
		start[62] = 0.0015747;
		start[63] = 0.0021858;
		start[64] = 0.0029559;
		start[65] = 0.006829;
		start[66] = 0.0081517;
		start[67] = 0.0029643;
		start[68] = 0.0016113;
		start[69] = 0.0082729;
		start[70] = 0.0047061;
		start[71] = 0.0076282;
		start[72] = 0.0088401;
		start[73] = 0.0059753;
		start[74] = 0.0080287;
		start[75] = 0.0083252;
		start[76] = 0.0080397;
		start[77] = 0.0067588;
		start[78] = 0.0054514;
		start[79] = 0.0047967;
		start[80] = 0.0031276;
		start[81] = 0.0048521;
		start[82] = 0.0043456;
		start[83] = 0.0056564;
		start[84] = 0.002583;
		start[85] = 0.0010889;
		start[86] = 0.0096374;
		start[87] = 0.00069232;
		start[88] = 0.009976;
		start[89] = 0.0093759;
		start[90] = 0.0054505;
		start[91] = 0.0085276;
		start[92] = 0.0060198;
		start[93] = 0.0043128;
		start[94] = 0.00058104;
		start[95] = 0.0031142;
		std::vector<double> endEff (3);
		endEff[0] = -1.0696;
		endEff[1] = -0.069152;
		endEff[2] = -0.27794;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 4.3715e-05;
		start[11] = 0.0075276;
		start[12] = 0.0095388;
		start[13] = 0.0096933;
		start[14] = 0.0082179;
		start[15] = 0.00082957;
		start[16] = 0.0035826;
		start[17] = 0.0026322;
		start[18] = 0.0015225;
		start[19] = 0.0067301;
		start[20] = 0.00042752;
		start[21] = 0.00038063;
		start[22] = 0.00076514;
		start[23] = 0.0021742;
		start[24] = 0.0068736;
		start[25] = 0.0086224;
		start[26] = 0.0018901;
		start[27] = 0.0096064;
		start[28] = 0.00026539;
		start[29] = 2.5107e-05;
		start[30] = 0.0069174;
		start[31] = 0.0041448;
		start[32] = 0.0073678;
		start[33] = 0.0034731;
		start[34] = 0.0041299;
		start[35] = 0.00607;
		start[36] = 0.0021594;
		start[37] = 0.0067235;
		start[38] = 0.0090712;
		start[39] = 0.0097229;
		start[40] = 0.0099521;
		start[41] = 0.0012826;
		start[42] = 0.0098966;
		start[43] = 0.0079239;
		start[44] = 0.0060058;
		start[45] = 0.0048861;
		start[46] = 0.0069435;
		start[47] = 0.00057329;
		start[48] = 0.0066963;
		start[49] = 0.0099221;
		start[50] = 0.0032672;
		start[51] = 0.0007885;
		start[52] = 0.0073195;
		start[53] = 0.0028899;
		start[54] = 0.0046583;
		start[55] = 0.0096517;
		start[56] = 1.8386e-05;
		start[57] = 0.0052295;
		start[58] = 0.0090107;
		start[59] = 0.0090869;
		start[60] = 0.00043676;
		start[61] = 0.0047199;
		start[62] = 0.0013228;
		start[63] = 0.006311;
		start[64] = 0.0088824;
		start[65] = 0.0076789;
		start[66] = 0.0011234;
		start[67] = 0.00053482;
		start[68] = 0.0029294;
		start[69] = 0.0084509;
		start[70] = 0.0068768;
		start[71] = 0.0093712;
		start[72] = 0.00293;
		start[73] = 5.3597e-05;
		start[74] = 0.0071256;
		start[75] = 0.0029809;
		start[76] = 0.0041811;
		start[77] = 0.0031923;
		start[78] = 0.0053708;
		start[79] = 0.0050831;
		start[80] = 0.0072881;
		start[81] = 0.0029068;
		start[82] = 0.006544;
		start[83] = 0.0055277;
		start[84] = 0.0048001;
		start[85] = 0.002744;
		start[86] = 0.0073757;
		start[87] = 0.0082268;
		start[88] = 0.002712;
		start[89] = 0.0051244;
		start[90] = 1.3955e-06;
		start[91] = 0.0036397;
		start[92] = 0.0030198;
		start[93] = 0.0043653;
		start[94] = 0.0044744;
		start[95] = 0.0034818;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0024226;
		start[11] = 0.0086869;
		start[12] = 0.0080947;
		start[13] = 0.0092211;
		start[14] = 0.0023581;
		start[15] = 0.0042354;
		start[16] = 0.0092519;
		start[17] = 0.00042297;
		start[18] = 0.0046158;
		start[19] = 0.0042767;
		start[20] = 0.009762;
		start[21] = 0.0070802;
		start[22] = 0.0091498;
		start[23] = 0.006056;
		start[24] = 0.0075556;
		start[25] = 0.0035002;
		start[26] = 0.007204;
		start[27] = 0.0018368;
		start[28] = 0.0095427;
		start[29] = 0.0071712;
		start[30] = 0.0040001;
		start[31] = 0.0075527;
		start[32] = 0.0013969;
		start[33] = 0.00097122;
		start[34] = 0.0019404;
		start[35] = 0.0045569;
		start[36] = 0.0019941;
		start[37] = 0.007962;
		start[38] = 0.0056684;
		start[39] = 0.00013478;
		start[40] = 0.0071567;
		start[41] = 0.0020702;
		start[42] = 0.0011848;
		start[43] = 0.0049162;
		start[44] = 0.0038096;
		start[45] = 0.0034473;
		start[46] = 0.0057601;
		start[47] = 0.0022016;
		start[48] = 0.0070489;
		start[49] = 0.0026957;
		start[50] = 0.0095826;
		start[51] = 0.0071113;
		start[52] = 3.2794e-05;
		start[53] = 0.0036119;
		start[54] = 0.00079197;
		start[55] = 0.0026895;
		start[56] = 0.0029628;
		start[57] = 0.0030577;
		start[58] = 0.0011369;
		start[59] = 0.0094974;
		start[60] = 0.0077734;
		start[61] = 0.0068098;
		start[62] = 0.0052711;
		start[63] = 0.0078498;
		start[64] = 0.0051387;
		start[65] = 0.0020436;
		start[66] = 0.0048315;
		start[67] = 0.00094157;
		start[68] = 0.0013949;
		start[69] = 0.0053748;
		start[70] = 6.2318e-06;
		start[71] = 0.0043037;
		start[72] = 0.00057067;
		start[73] = 0.0062442;
		start[74] = 0.0069953;
		start[75] = 0.0084093;
		start[76] = 0.0039593;
		start[77] = 0.00039599;
		start[78] = 0.0050711;
		start[79] = 0.0047488;
		start[80] = 0.0061582;
		start[81] = 0.0089609;
		start[82] = 0.0071816;
		start[83] = 0.0096819;
		start[84] = 0.0052753;
		start[85] = 0.0097616;
		start[86] = 0.0094915;
		start[87] = 0.0033611;
		start[88] = 0.0074753;
		start[89] = 0.0061009;
		start[90] = 0.0074105;
		start[91] = 0.005322;
		start[92] = 0.0074347;
		start[93] = 0.00041754;
		start[94] = 0.0061326;
		start[95] = 0.00099992;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0025303;
		start[11] = 0.0074893;
		start[12] = 0.0014828;
		start[13] = 0.0028586;
		start[14] = 0.00040767;
		start[15] = 0.0066012;
		start[16] = 0.0050986;
		start[17] = 0.005403;
		start[18] = 0.0059351;
		start[19] = 0.0068319;
		start[20] = 0.0032521;
		start[21] = 0.0087241;
		start[22] = 9.1757e-05;
		start[23] = 0.0081958;
		start[24] = 0.0059401;
		start[25] = 0.009839;
		start[26] = 0.0028424;
		start[27] = 0.0056545;
		start[28] = 0.0006333;
		start[29] = 0.0031197;
		start[30] = 0.00059737;
		start[31] = 0.0020946;
		start[32] = 0.0063198;
		start[33] = 0.0074877;
		start[34] = 0.0050385;
		start[35] = 0.00061695;
		start[36] = 0.0083011;
		start[37] = 0.0034155;
		start[38] = 0.0018217;
		start[39] = 0.0035015;
		start[40] = 0.0013576;
		start[41] = 0.00049433;
		start[42] = 0.0051014;
		start[43] = 0.0079755;
		start[44] = 0.0024409;
		start[45] = 0.00029321;
		start[46] = 0.00029679;
		start[47] = 0.00013913;
		start[48] = 0.0062781;
		start[49] = 0.0019745;
		start[50] = 0.0079843;
		start[51] = 0.0031156;
		start[52] = 0.0060015;
		start[53] = 0.00037996;
		start[54] = 0.0058996;
		start[55] = 0.0098184;
		start[56] = 0.00046596;
		start[57] = 0.0010212;
		start[58] = 0.0063801;
		start[59] = 0.0031464;
		start[60] = 0.0019549;
		start[61] = 0.0028519;
		start[62] = 0.0033144;
		start[63] = 0.0071998;
		start[64] = 0.00069749;
		start[65] = 0.0050292;
		start[66] = 0.00079269;
		start[67] = 0.0045448;
		start[68] = 0.0070851;
		start[69] = 0.0072418;
		start[70] = 0.0025857;
		start[71] = 0.0054567;
		start[72] = 0.0097938;
		start[73] = 0.0035988;
		start[74] = 0.0083407;
		start[75] = 0.00095144;
		start[76] = 0.0099767;
		start[77] = 0.0074098;
		start[78] = 0.0095612;
		start[79] = 0.0098186;
		start[80] = 0.003628;
		start[81] = 0.0028139;
		start[82] = 0.0075574;
		start[83] = 0.0048542;
		start[84] = 0.008567;
		start[85] = 0.0028513;
		start[86] = 0.0015557;
		start[87] = 0.00011618;
		start[88] = 0.0060096;
		start[89] = 0.0068137;
		start[90] = 0.009914;
		start[91] = 0.0080571;
		start[92] = 0.0029277;
		start[93] = 0.0036783;
		start[94] = 0.0031842;
		start[95] = 0.0018133;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0032547;
		start[11] = 0.0019968;
		start[12] = 0.0052748;
		start[13] = 9.7615e-05;
		start[14] = 0.0014586;
		start[15] = 0.0057463;
		start[16] = 0.00038872;
		start[17] = 0.0055376;
		start[18] = 0.0086162;
		start[19] = 0.0069208;
		start[20] = 0.0098426;
		start[21] = 0.0035762;
		start[22] = 0.004403;
		start[23] = 0.0077103;
		start[24] = 0.0042869;
		start[25] = 0.0025033;
		start[26] = 0.0018455;
		start[27] = 0.0047033;
		start[28] = 0.0018707;
		start[29] = 0.0094839;
		start[30] = 0.0055844;
		start[31] = 0.004686;
		start[32] = 0.0019604;
		start[33] = 0.0073824;
		start[34] = 0.0066965;
		start[35] = 0.0052646;
		start[36] = 0.0075768;
		start[37] = 0.0024413;
		start[38] = 0.0092042;
		start[39] = 0.0029629;
		start[40] = 0.0088233;
		start[41] = 0.0083209;
		start[42] = 0.0051041;
		start[43] = 0.0032688;
		start[44] = 0.0045497;
		start[45] = 0.0087887;
		start[46] = 0.0032056;
		start[47] = 0.0018365;
		start[48] = 0.0068279;
		start[49] = 0.0086325;
		start[50] = 0.0053522;
		start[51] = 0.00053495;
		start[52] = 7.5447e-05;
		start[53] = 0.0023311;
		start[54] = 0.0021013;
		start[55] = 0.0026282;
		start[56] = 0.0011061;
		start[57] = 0.0023933;
		start[58] = 0.0039616;
		start[59] = 0.0077871;
		start[60] = 0.0055146;
		start[61] = 0.004708;
		start[62] = 0.0014385;
		start[63] = 0.0029849;
		start[64] = 0.00064105;
		start[65] = 0.0078863;
		start[66] = 0.0032278;
		start[67] = 0.00472;
		start[68] = 0.006939;
		start[69] = 0.0018049;
		start[70] = 0.0010508;
		start[71] = 0.0071491;
		start[72] = 0.0015453;
		start[73] = 0.0051715;
		start[74] = 0.0052456;
		start[75] = 0.0041401;
		start[76] = 0.001252;
		start[77] = 0.0054476;
		start[78] = 0.00098411;
		start[79] = 0.0095487;
		start[80] = 0.00898;
		start[81] = 0.002209;
		start[82] = 0.00088536;
		start[83] = 0.0068699;
		start[84] = 0.0064488;
		start[85] = 0.0054482;
		start[86] = 0.0026528;
		start[87] = 2.5129e-05;
		start[88] = 0.0058041;
		start[89] = 0.0063255;
		start[90] = 0.005764;
		start[91] = 0.0056426;
		start[92] = 0.0064363;
		start[93] = 0.0049593;
		start[94] = 0.00089134;
		start[95] = 0.0052661;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0027299;
		start[11] = 0.0095064;
		start[12] = 0.00071741;
		start[13] = 0.0019225;
		start[14] = 0.0078879;
		start[15] = 0.0009442;
		start[16] = 0.003388;
		start[17] = 0.0063003;
		start[18] = 0.0018069;
		start[19] = 0.0070842;
		start[20] = 0.0047598;
		start[21] = 0.0080217;
		start[22] = 0.0010332;
		start[23] = 0.0063818;
		start[24] = 0.00062962;
		start[25] = 0.0079706;
		start[26] = 0.0034868;
		start[27] = 0.007091;
		start[28] = 0.0017682;
		start[29] = 0.0091377;
		start[30] = 0.0037224;
		start[31] = 0.0090273;
		start[32] = 0.0026334;
		start[33] = 0.0022429;
		start[34] = 0.0042267;
		start[35] = 0.0059633;
		start[36] = 0.0019082;
		start[37] = 0.00070886;
		start[38] = 0.006584;
		start[39] = 0.0077065;
		start[40] = 0.0064374;
		start[41] = 0.0063071;
		start[42] = 0.0047502;
		start[43] = 0.007789;
		start[44] = 0.00058133;
		start[45] = 0.0003431;
		start[46] = 0.00035679;
		start[47] = 0.0012744;
		start[48] = 0.0055001;
		start[49] = 0.0072591;
		start[50] = 0.0011178;
		start[51] = 0.0089785;
		start[52] = 0.0097747;
		start[53] = 0.0073643;
		start[54] = 0.0010787;
		start[55] = 0.0066519;
		start[56] = 0.0082688;
		start[57] = 0.0076798;
		start[58] = 0.0093186;
		start[59] = 0.0095521;
		start[60] = 0.0021134;
		start[61] = 0.0068936;
		start[62] = 0.0092556;
		start[63] = 0.0017942;
		start[64] = 0.0042213;
		start[65] = 0.0078221;
		start[66] = 0.0061759;
		start[67] = 0.0084596;
		start[68] = 0.009062;
		start[69] = 0.0033013;
		start[70] = 0.0058264;
		start[71] = 0.00082367;
		start[72] = 0.0074337;
		start[73] = 0.0083414;
		start[74] = 0.0087781;
		start[75] = 0.0093003;
		start[76] = 0.002959;
		start[77] = 0.0011696;
		start[78] = 0.0024977;
		start[79] = 0.0076543;
		start[80] = 0.0051071;
		start[81] = 0.0069808;
		start[82] = 0.0027672;
		start[83] = 0.0006703;
		start[84] = 0.0093469;
		start[85] = 0.0015541;
		start[86] = 0.0067922;
		start[87] = 0.0053548;
		start[88] = 0.0096288;
		start[89] = 0.0038904;
		start[90] = 0.0084603;
		start[91] = 0.00096755;
		start[92] = 0.0030845;
		start[93] = 0.0026573;
		start[94] = 0.0029847;
		start[95] = 0.0021624;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0053742;
		start[11] = 0.0063953;
		start[12] = 0.0096885;
		start[13] = 0.0015581;
		start[14] = 0.0093183;
		start[15] = 0.009398;
		start[16] = 0.0099747;
		start[17] = 0.0048894;
		start[18] = 0.0050371;
		start[19] = 0.0088376;
		start[20] = 0.0069409;
		start[21] = 0.0012299;
		start[22] = 0.0073072;
		start[23] = 0.008197;
		start[24] = 0.0067725;
		start[25] = 0.0025053;
		start[26] = 0.0085964;
		start[27] = 0.0030736;
		start[28] = 0.0086007;
		start[29] = 0.0099426;
		start[30] = 0.0042193;
		start[31] = 0.0097112;
		start[32] = 0.0087872;
		start[33] = 0.0042572;
		start[34] = 0.0093083;
		start[35] = 0.00057038;
		start[36] = 0.0072081;
		start[37] = 0.0037679;
		start[38] = 0.0012908;
		start[39] = 0.0029075;
		start[40] = 0.0070496;
		start[41] = 0.0035897;
		start[42] = 0.0011699;
		start[43] = 0.0012063;
		start[44] = 0.0068143;
		start[45] = 0.0010839;
		start[46] = 0.0067648;
		start[47] = 0.0044524;
		start[48] = 0.0036038;
		start[49] = 0.0015582;
		start[50] = 0.0046449;
		start[51] = 0.0033612;
		start[52] = 0.0013634;
		start[53] = 0.005049;
		start[54] = 0.00057304;
		start[55] = 0.0082749;
		start[56] = 0.0051901;
		start[57] = 0.0019949;
		start[58] = 0.0064508;
		start[59] = 0.00014388;
		start[60] = 0.0048208;
		start[61] = 0.0034569;
		start[62] = 0.0019001;
		start[63] = 0.0053424;
		start[64] = 0.0021316;
		start[65] = 0.00023557;
		start[66] = 0.0026129;
		start[67] = 0.0085883;
		start[68] = 0.0026483;
		start[69] = 0.0070938;
		start[70] = 0.0074225;
		start[71] = 0.0031479;
		start[72] = 0.007294;
		start[73] = 0.0044511;
		start[74] = 0.0080388;
		start[75] = 0.0068301;
		start[76] = 0.0049349;
		start[77] = 0.0024967;
		start[78] = 0.0096416;
		start[79] = 0.0044017;
		start[80] = 0.0041055;
		start[81] = 0.0031271;
		start[82] = 0.0036142;
		start[83] = 0.0052019;
		start[84] = 0.0010915;
		start[85] = 0.0019848;
		start[86] = 0.0043829;
		start[87] = 0.002987;
		start[88] = 0.005583;
		start[89] = 0.0009043;
		start[90] = 0.0047657;
		start[91] = 0.00086693;
		start[92] = 0.0046315;
		start[93] = 0.0056598;
		start[94] = 0.0035872;
		start[95] = 0.0062996;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0040859;
		start[11] = 0.0064802;
		start[12] = 0.0061993;
		start[13] = 0.0090205;
		start[14] = 0.0096962;
		start[15] = 0.0043046;
		start[16] = 0.0097472;
		start[17] = 0.0051918;
		start[18] = 0.0057383;
		start[19] = 0.0076804;
		start[20] = 0.00040631;
		start[21] = 0.00054208;
		start[22] = 0.0042045;
		start[23] = 0.0030112;
		start[24] = 0.0017204;
		start[25] = 0.00028396;
		start[26] = 0.0024992;
		start[27] = 0.0063493;
		start[28] = 0.00096432;
		start[29] = 0.0073989;
		start[30] = 0.0024547;
		start[31] = 0.0066231;
		start[32] = 0.0031372;
		start[33] = 0.0024942;
		start[34] = 0.0022552;
		start[35] = 0.0053448;
		start[36] = 0.0049051;
		start[37] = 0.0029501;
		start[38] = 0.0021376;
		start[39] = 0.0039403;
		start[40] = 0.0078373;
		start[41] = 0.0052423;
		start[42] = 0.0060956;
		start[43] = 0.0043789;
		start[44] = 0.006992;
		start[45] = 0.0044076;
		start[46] = 0.0079144;
		start[47] = 0.0021004;
		start[48] = 0.0081667;
		start[49] = 0.0037005;
		start[50] = 0.0053588;
		start[51] = 0.0018226;
		start[52] = 0.0077519;
		start[53] = 0.0071788;
		start[54] = 0.0084624;
		start[55] = 0.0039847;
		start[56] = 0.006126;
		start[57] = 0.0046053;
		start[58] = 0.0029705;
		start[59] = 0.002242;
		start[60] = 0.0081467;
		start[61] = 0.0010388;
		start[62] = 0.00094731;
		start[63] = 0.0063412;
		start[64] = 0.0076863;
		start[65] = 0.009496;
		start[66] = 0.0089647;
		start[67] = 0.0057891;
		start[68] = 0.0063206;
		start[69] = 0.0023941;
		start[70] = 0.0046168;
		start[71] = 0.0032504;
		start[72] = 0.0081972;
		start[73] = 0.003483;
		start[74] = 0.0028612;
		start[75] = 0.0059183;
		start[76] = 0.0022114;
		start[77] = 0.0081;
		start[78] = 0.00062986;
		start[79] = 0.0010964;
		start[80] = 0.0014275;
		start[81] = 0.0066685;
		start[82] = 0.0011548;
		start[83] = 0.00073892;
		start[84] = 0.0012556;
		start[85] = 0.0048553;
		start[86] = 0.0019728;
		start[87] = 0.0068767;
		start[88] = 0.0091375;
		start[89] = 0.0033088;
		start[90] = 0.0088266;
		start[91] = 0.0087431;
		start[92] = 0.00097143;
		start[93] = 0.0048284;
		start[94] = 0.000108;
		start[95] = 0.0047164;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0048254;
		start[11] = 0.00013417;
		start[12] = 0.0011672;
		start[13] = 0.0097666;
		start[14] = 0.0060981;
		start[15] = 0.00071685;
		start[16] = 0.0078361;
		start[17] = 0.0058694;
		start[18] = 0.0032002;
		start[19] = 0.0013968;
		start[20] = 0.006827;
		start[21] = 0.0026155;
		start[22] = 0.0071484;
		start[23] = 0.009452;
		start[24] = 0.0021262;
		start[25] = 0.0077157;
		start[26] = 0.0052728;
		start[27] = 0.0032203;
		start[28] = 0.0084397;
		start[29] = 0.0059353;
		start[30] = 0.0011194;
		start[31] = 0.0076907;
		start[32] = 0.0024626;
		start[33] = 0.0044474;
		start[34] = 0.0032362;
		start[35] = 4.0709e-05;
		start[36] = 0.00058431;
		start[37] = 0.00057708;
		start[38] = 0.001043;
		start[39] = 0.0036627;
		start[40] = 1.0898e-05;
		start[41] = 0.0074515;
		start[42] = 0.0042701;
		start[43] = 0.0022677;
		start[44] = 0.0066382;
		start[45] = 0.0073673;
		start[46] = 0.0019826;
		start[47] = 0.0012626;
		start[48] = 0.0099262;
		start[49] = 0.001735;
		start[50] = 0.0021268;
		start[51] = 0.0052895;
		start[52] = 0.00070152;
		start[53] = 0.0031549;
		start[54] = 0.0049453;
		start[55] = 0.0037392;
		start[56] = 0.0056897;
		start[57] = 0.0038146;
		start[58] = 0.0039514;
		start[59] = 0.0003768;
		start[60] = 0.0085964;
		start[61] = 0.000843;
		start[62] = 0.0060615;
		start[63] = 0.00099097;
		start[64] = 0.0035458;
		start[65] = 0.009424;
		start[66] = 0.0079336;
		start[67] = 0.0033708;
		start[68] = 6.3889e-05;
		start[69] = 0.0020873;
		start[70] = 0.0018013;
		start[71] = 0.0076974;
		start[72] = 0.00093654;
		start[73] = 0.0038242;
		start[74] = 0.0095215;
		start[75] = 0.0082696;
		start[76] = 0.0052762;
		start[77] = 0.0064032;
		start[78] = 0.0010651;
		start[79] = 0.006955;
		start[80] = 0.0028972;
		start[81] = 0.0040006;
		start[82] = 0.00043763;
		start[83] = 0.0023415;
		start[84] = 0.0073477;
		start[85] = 0.0072243;
		start[86] = 0.0068693;
		start[87] = 0.0033921;
		start[88] = 0.0049741;
		start[89] = 0.0024771;
		start[90] = 0.0058016;
		start[91] = 0.0022019;
		start[92] = 0.0055738;
		start[93] = 0.002608;
		start[94] = 0.00040099;
		start[95] = 0.00080259;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0083578;
		start[11] = 0.0037881;
		start[12] = 0.0048551;
		start[13] = 0.0088187;
		start[14] = 0.0097652;
		start[15] = 0.0080797;
		start[16] = 0.0052489;
		start[17] = 0.0084279;
		start[18] = 0.0063387;
		start[19] = 0.0055049;
		start[20] = 0.0049738;
		start[21] = 0.0041851;
		start[22] = 0.0099693;
		start[23] = 0.0078141;
		start[24] = 0.0070879;
		start[25] = 0.0030637;
		start[26] = 0.0028336;
		start[27] = 0.0057522;
		start[28] = 0.0013766;
		start[29] = 0.0075541;
		start[30] = 0.00011862;
		start[31] = 0.00021856;
		start[32] = 0.0034626;
		start[33] = 0.0085988;
		start[34] = 0.0041415;
		start[35] = 0.0073454;
		start[36] = 0.0022183;
		start[37] = 0.0067828;
		start[38] = 0.0091558;
		start[39] = 0.00804;
		start[40] = 0.0061374;
		start[41] = 0.005587;
		start[42] = 0.0037284;
		start[43] = 0.0075257;
		start[44] = 0.003636;
		start[45] = 0.00077877;
		start[46] = 0.0037226;
		start[47] = 0.0073526;
		start[48] = 0.0085061;
		start[49] = 0.0029269;
		start[50] = 0.0066137;
		start[51] = 0.0095913;
		start[52] = 0.0058904;
		start[53] = 7.1539e-05;
		start[54] = 0.0030795;
		start[55] = 0.0041455;
		start[56] = 0.0035367;
		start[57] = 0.0096968;
		start[58] = 0.0084661;
		start[59] = 0.0031625;
		start[60] = 0.0036926;
		start[61] = 0.0019202;
		start[62] = 0.0059588;
		start[63] = 0.0047898;
		start[64] = 0.0017698;
		start[65] = 0.00045528;
		start[66] = 0.0038839;
		start[67] = 0.000216;
		start[68] = 0.0068624;
		start[69] = 0.0061249;
		start[70] = 0.0050022;
		start[71] = 0.0058072;
		start[72] = 0.0068971;
		start[73] = 0.00026992;
		start[74] = 0.002167;
		start[75] = 0.0013653;
		start[76] = 0.0067244;
		start[77] = 0.0041821;
		start[78] = 0.0011556;
		start[79] = 0.0069369;
		start[80] = 0.0063564;
		start[81] = 0.0077832;
		start[82] = 0.0090564;
		start[83] = 0.0065783;
		start[84] = 0.0039148;
		start[85] = 0.0038056;
		start[86] = 0.002183;
		start[87] = 0.0036764;
		start[88] = 0.0036356;
		start[89] = 0.0038178;
		start[90] = 0.0074986;
		start[91] = 0.003859;
		start[92] = 0.0014765;
		start[93] = 0.0008587;
		start[94] = 0.0071726;
		start[95] = 0.0052213;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0075327;
		start[11] = 0.0054049;
		start[12] = 0.006332;
		start[13] = 0.0078433;
		start[14] = 0.0012516;
		start[15] = 0.0059603;
		start[16] = 0.0066853;
		start[17] = 0.0059662;
		start[18] = 0.0046086;
		start[19] = 0.0047334;
		start[20] = 0.0015155;
		start[21] = 0.0043597;
		start[22] = 0.0028255;
		start[23] = 0.0079637;
		start[24] = 0.0013353;
		start[25] = 0.002508;
		start[26] = 0.0025054;
		start[27] = 0.008127;
		start[28] = 0.0013458;
		start[29] = 0.0087746;
		start[30] = 0.0030749;
		start[31] = 0.0062539;
		start[32] = 0.0081511;
		start[33] = 0.0039254;
		start[34] = 0.006996;
		start[35] = 0.0066463;
		start[36] = 0.0060492;
		start[37] = 0.0044103;
		start[38] = 0.0098098;
		start[39] = 0.0064236;
		start[40] = 2.5507e-05;
		start[41] = 0.00081956;
		start[42] = 0.0021128;
		start[43] = 0.0091241;
		start[44] = 0.0071104;
		start[45] = 0.0034903;
		start[46] = 0.0025578;
		start[47] = 0.0078956;
		start[48] = 0.0032671;
		start[49] = 0.0073235;
		start[50] = 0.0064308;
		start[51] = 0.0052614;
		start[52] = 0.0027028;
		start[53] = 0.0046468;
		start[54] = 0.0099644;
		start[55] = 0.0098577;
		start[56] = 0.0067506;
		start[57] = 0.0091954;
		start[58] = 0.0097034;
		start[59] = 0.0086907;
		start[60] = 0.00040026;
		start[61] = 0.0078916;
		start[62] = 0.0097545;
		start[63] = 0.002197;
		start[64] = 0.0012088;
		start[65] = 0.0015955;
		start[66] = 0.0036941;
		start[67] = 0.007011;
		start[68] = 0.0089089;
		start[69] = 0.0085845;
		start[70] = 0.0030956;
		start[71] = 0.0069797;
		start[72] = 0.0082034;
		start[73] = 0.0061211;
		start[74] = 0.0030127;
		start[75] = 0.0069808;
		start[76] = 0.0067522;
		start[77] = 0.0024905;
		start[78] = 0.0028174;
		start[79] = 0.0081527;
		start[80] = 0.0038142;
		start[81] = 0.0036318;
		start[82] = 0.0021559;
		start[83] = 0.0030328;
		start[84] = 0.0069679;
		start[85] = 0.0040185;
		start[86] = 0.0058658;
		start[87] = 0.0078473;
		start[88] = 0.0099797;
		start[89] = 0.002125;
		start[90] = 0.0080914;
		start[91] = 0.0069056;
		start[92] = 0.0085326;
		start[93] = 0.0099181;
		start[94] = 0.006434;
		start[95] = 0.0096144;
		std::vector<double> endEff (3);
		endEff[0] = 0.012399;
		endEff[1] = 1.3172;
		endEff[2] = -0.41865;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0042452;
		start[11] = 0.0074577;
		start[12] = 0.0098568;
		start[13] = 0.0015763;
		start[14] = 0.0012926;
		start[15] = 0.0077895;
		start[16] = 0.0072121;
		start[17] = 0.0021954;
		start[18] = 0.0022446;
		start[19] = 0.0057065;
		start[20] = 0.0003037;
		start[21] = 0.0049051;
		start[22] = 0.0023172;
		start[23] = 0.0010202;
		start[24] = 0.0091128;
		start[25] = 0.0057301;
		start[26] = 0.0011164;
		start[27] = 0.0066645;
		start[28] = 0.0022815;
		start[29] = 0.0099991;
		start[30] = 0.0060589;
		start[31] = 0.0052865;
		start[32] = 0.0090644;
		start[33] = 0.0014534;
		start[34] = 0.0053654;
		start[35] = 0.0055287;
		start[36] = 0.0031511;
		start[37] = 0.0031513;
		start[38] = 0.0076333;
		start[39] = 0.002278;
		start[40] = 0.0040834;
		start[41] = 0.0092912;
		start[42] = 0.0053945;
		start[43] = 0.0012297;
		start[44] = 0.0054171;
		start[45] = 0.0089259;
		start[46] = 0.0040995;
		start[47] = 0.0036308;
		start[48] = 0.001333;
		start[49] = 0.0089957;
		start[50] = 0.00082292;
		start[51] = 0.0078555;
		start[52] = 0.0086106;
		start[53] = 0.005401;
		start[54] = 0.0040319;
		start[55] = 0.0049857;
		start[56] = 0.0037885;
		start[57] = 0.0096912;
		start[58] = 0.0026293;
		start[59] = 0.0051658;
		start[60] = 0.0045141;
		start[61] = 0.0016234;
		start[62] = 0.0052562;
		start[63] = 0.0021711;
		start[64] = 0.0063236;
		start[65] = 0.0075103;
		start[66] = 0.0015208;
		start[67] = 0.00041194;
		start[68] = 0.0018712;
		start[69] = 0.00051352;
		start[70] = 0.0017223;
		start[71] = 0.0056341;
		start[72] = 0.0067181;
		start[73] = 0.0022828;
		start[74] = 0.0096753;
		start[75] = 0.001607;
		start[76] = 0.0060961;
		start[77] = 0.00049109;
		start[78] = 0.0037907;
		start[79] = 0.0050352;
		start[80] = 0.0001065;
		start[81] = 0.000116;
		start[82] = 0.00078019;
		start[83] = 0.0032292;
		start[84] = 0.0019387;
		start[85] = 0.0033802;
		start[86] = 0.002927;
		start[87] = 0.0079306;
		start[88] = 0.0096249;
		start[89] = 0.0036857;
		start[90] = 0.0086903;
		start[91] = 0.002224;
		start[92] = 0.0006516;
		start[93] = 0.0064704;
		start[94] = 0.0005009;
		start[95] = 0.0065242;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.006403;
		start[11] = 0.0064877;
		start[12] = 0.0055067;
		start[13] = 0.0020084;
		start[14] = 0.0079171;
		start[15] = 0.00080688;
		start[16] = 0.0017627;
		start[17] = 0.0057168;
		start[18] = 0.0026475;
		start[19] = 0.0029324;
		start[20] = 0.0028503;
		start[21] = 0.0034645;
		start[22] = 0.0020895;
		start[23] = 0.0031467;
		start[24] = 0.002079;
		start[25] = 0.0038176;
		start[26] = 0.0060039;
		start[27] = 0.0063122;
		start[28] = 0.0021971;
		start[29] = 0.0019313;
		start[30] = 0.0083936;
		start[31] = 0.0076494;
		start[32] = 0.0030089;
		start[33] = 0.00090195;
		start[34] = 0.00082614;
		start[35] = 0.0065993;
		start[36] = 0.0045805;
		start[37] = 0.0078671;
		start[38] = 0.007372;
		start[39] = 0.0024561;
		start[40] = 0.0086819;
		start[41] = 0.0036405;
		start[42] = 0.0056845;
		start[43] = 0.002685;
		start[44] = 0.0027933;
		start[45] = 0.0043574;
		start[46] = 0.008521;
		start[47] = 0.0067416;
		start[48] = 0.00081114;
		start[49] = 0.0099364;
		start[50] = 0.0077615;
		start[51] = 0.003117;
		start[52] = 0.0025699;
		start[53] = 0.0093315;
		start[54] = 0.0057705;
		start[55] = 0.00084406;
		start[56] = 0.0091838;
		start[57] = 0.0066669;
		start[58] = 0.0046376;
		start[59] = 0.005081;
		start[60] = 0.0080348;
		start[61] = 0.007172;
		start[62] = 0.0063153;
		start[63] = 0.0087503;
		start[64] = 0.0063684;
		start[65] = 0.0029659;
		start[66] = 0.0017265;
		start[67] = 0.0037021;
		start[68] = 0.0038732;
		start[69] = 0.0056645;
		start[70] = 0.0062076;
		start[71] = 0.006784;
		start[72] = 0.0039331;
		start[73] = 0.0090993;
		start[74] = 0.0058031;
		start[75] = 0.0058124;
		start[76] = 0.0099085;
		start[77] = 0.0098273;
		start[78] = 0.0056137;
		start[79] = 0.0076344;
		start[80] = 0.0025506;
		start[81] = 0.0049225;
		start[82] = 0.00065305;
		start[83] = 0.0014036;
		start[84] = 0.008426;
		start[85] = 0.0085913;
		start[86] = 0.0098781;
		start[87] = 0.0034861;
		start[88] = 0.0036875;
		start[89] = 0.0031182;
		start[90] = 0.0099819;
		start[91] = 0.0015952;
		start[92] = 0.0098676;
		start[93] = 0.0012136;
		start[94] = 0.0021531;
		start[95] = 0.0065681;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0027657;
		start[11] = 0.0032404;
		start[12] = 0.0040101;
		start[13] = 0.0056735;
		start[14] = 0.0011208;
		start[15] = 0.0012867;
		start[16] = 0.00073851;
		start[17] = 0.0017814;
		start[18] = 0.0018748;
		start[19] = 0.0062536;
		start[20] = 0.00028399;
		start[21] = 0.0047499;
		start[22] = 0.0049534;
		start[23] = 0.0032648;
		start[24] = 0.0041749;
		start[25] = 0.0016188;
		start[26] = 0.00025257;
		start[27] = 0.0071615;
		start[28] = 0.0051918;
		start[29] = 0.002667;
		start[30] = 0.0041387;
		start[31] = 0.0016783;
		start[32] = 0.0024481;
		start[33] = 0.0075827;
		start[34] = 0.0083779;
		start[35] = 0.0047755;
		start[36] = 0.0028805;
		start[37] = 0.0075787;
		start[38] = 0.0073372;
		start[39] = 0.00065474;
		start[40] = 0.0098983;
		start[41] = 0.0003968;
		start[42] = 0.0077791;
		start[43] = 0.0097325;
		start[44] = 0.0041513;
		start[45] = 0.0031078;
		start[46] = 0.00604;
		start[47] = 0.0013475;
		start[48] = 0.0018224;
		start[49] = 0.0045474;
		start[50] = 0.0032502;
		start[51] = 0.0047681;
		start[52] = 0.00045675;
		start[53] = 0.00025255;
		start[54] = 0.00088444;
		start[55] = 0.0073593;
		start[56] = 0.0080296;
		start[57] = 0.001991;
		start[58] = 0.0091766;
		start[59] = 0.0089761;
		start[60] = 0.0058367;
		start[61] = 0.0068092;
		start[62] = 0.008348;
		start[63] = 0.0075484;
		start[64] = 0.0057818;
		start[65] = 0.0039996;
		start[66] = 0.00042622;
		start[67] = 0.00049527;
		start[68] = 0.003033;
		start[69] = 0.0073542;
		start[70] = 0.0030518;
		start[71] = 0.0035392;
		start[72] = 0.0055795;
		start[73] = 0.0019173;
		start[74] = 0.0058835;
		start[75] = 0.00042794;
		start[76] = 0.0080076;
		start[77] = 0.0036554;
		start[78] = 0.0024521;
		start[79] = 0.0056046;
		start[80] = 0.0062425;
		start[81] = 0.0030238;
		start[82] = 0.0047257;
		start[83] = 0.0058789;
		start[84] = 0.0087089;
		start[85] = 0.0017003;
		start[86] = 0.0048407;
		start[87] = 0.0053071;
		start[88] = 0.0083537;
		start[89] = 0.0090956;
		start[90] = 1.4729e-05;
		start[91] = 0.0021431;
		start[92] = 0.0026;
		start[93] = 0.0064546;
		start[94] = 0.0095643;
		start[95] = 0.0080979;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0061199;
		start[11] = 0.0033103;
		start[12] = 0.0041115;
		start[13] = 0.0058499;
		start[14] = 0.0035357;
		start[15] = 0.0039832;
		start[16] = 2.4547e-05;
		start[17] = 0.006753;
		start[18] = 0.0092468;
		start[19] = 0.0099276;
		start[20] = 0.0023399;
		start[21] = 0.0087394;
		start[22] = 0.0070144;
		start[23] = 0.00090211;
		start[24] = 0.00046486;
		start[25] = 0.0087189;
		start[26] = 0.0095383;
		start[27] = 0.009622;
		start[28] = 0.0012635;
		start[29] = 0.0073708;
		start[30] = 0.0097558;
		start[31] = 0.0036678;
		start[32] = 0.0050897;
		start[33] = 0.0031544;
		start[34] = 0.0012744;
		start[35] = 0.0081772;
		start[36] = 0.0074553;
		start[37] = 0.0059645;
		start[38] = 0.0057556;
		start[39] = 0.0026085;
		start[40] = 0.00064405;
		start[41] = 0.0043684;
		start[42] = 0.0055251;
		start[43] = 0.0064886;
		start[44] = 0.0043237;
		start[45] = 0.0041679;
		start[46] = 0.00051737;
		start[47] = 0.0015981;
		start[48] = 0.0078328;
		start[49] = 0.0014785;
		start[50] = 0.0090915;
		start[51] = 0.0059143;
		start[52] = 0.0088654;
		start[53] = 0.00053645;
		start[54] = 0.004663;
		start[55] = 0.0011209;
		start[56] = 0.0090073;
		start[57] = 0.0095302;
		start[58] = 0.008127;
		start[59] = 0.0033189;
		start[60] = 0.0027123;
		start[61] = 0.00051238;
		start[62] = 0.0088928;
		start[63] = 0.0098533;
		start[64] = 0.0036436;
		start[65] = 0.0064633;
		start[66] = 0.00028877;
		start[67] = 0.0023032;
		start[68] = 0.0072072;
		start[69] = 0.0092439;
		start[70] = 0.0056748;
		start[71] = 0.0083877;
		start[72] = 0.0092762;
		start[73] = 0.0025159;
		start[74] = 0.00033331;
		start[75] = 0.0072209;
		start[76] = 0.00047515;
		start[77] = 0.0055433;
		start[78] = 0.00056861;
		start[79] = 0.0089876;
		start[80] = 0.0052302;
		start[81] = 0.00723;
		start[82] = 0.0013915;
		start[83] = 0.0026174;
		start[84] = 0.0025414;
		start[85] = 0.0079198;
		start[86] = 0.0089428;
		start[87] = 0.0047313;
		start[88] = 0.0059921;
		start[89] = 0.0043573;
		start[90] = 0.0047514;
		start[91] = 0.0015824;
		start[92] = 0.0029453;
		start[93] = 0.00595;
		start[94] = 0.0080874;
		start[95] = 0.0093225;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0058889;
		start[11] = 0.008783;
		start[12] = 0.0028979;
		start[13] = 0.0043403;
		start[14] = 0.0047676;
		start[15] = 0.0050753;
		start[16] = 0.0052191;
		start[17] = 0.009979;
		start[18] = 0.0087011;
		start[19] = 0.0012999;
		start[20] = 0.0022643;
		start[21] = 0.0047272;
		start[22] = 0.0012244;
		start[23] = 0.0020335;
		start[24] = 0.0047266;
		start[25] = 0.0075177;
		start[26] = 0.0069464;
		start[27] = 0.0010062;
		start[28] = 0.0038149;
		start[29] = 0.0043602;
		start[30] = 0.0024751;
		start[31] = 0.0060353;
		start[32] = 0.0090304;
		start[33] = 0.0052362;
		start[34] = 0.0090895;
		start[35] = 0.0084298;
		start[36] = 0.0026055;
		start[37] = 0.0093768;
		start[38] = 0.0024654;
		start[39] = 0.0052684;
		start[40] = 0.00080164;
		start[41] = 0.0023025;
		start[42] = 0.0046452;
		start[43] = 0.0087971;
		start[44] = 0.0096993;
		start[45] = 0.0039907;
		start[46] = 0.0090144;
		start[47] = 0.00054964;
		start[48] = 0.0031118;
		start[49] = 0.008563;
		start[50] = 0.0085813;
		start[51] = 0.0058426;
		start[52] = 0.0023858;
		start[53] = 0.0056141;
		start[54] = 0.0096405;
		start[55] = 0.005964;
		start[56] = 0.0094504;
		start[57] = 0.0056784;
		start[58] = 0.0018147;
		start[59] = 0.0067497;
		start[60] = 0.0047835;
		start[61] = 0.0011764;
		start[62] = 0.0091114;
		start[63] = 0.0078852;
		start[64] = 0.0054245;
		start[65] = 0.0074386;
		start[66] = 0.0092171;
		start[67] = 0.0066568;
		start[68] = 0.0049361;
		start[69] = 0.0014974;
		start[70] = 0.0024004;
		start[71] = 0.0097422;
		start[72] = 0.0090336;
		start[73] = 0.007155;
		start[74] = 0.0018662;
		start[75] = 0.0025429;
		start[76] = 0.0050635;
		start[77] = 0.0066429;
		start[78] = 0.0066158;
		start[79] = 0.009301;
		start[80] = 0.00779;
		start[81] = 0.0028342;
		start[82] = 0.00042098;
		start[83] = 0.0086357;
		start[84] = 0.0094301;
		start[85] = 0.00074776;
		start[86] = 0.0028328;
		start[87] = 0.00056646;
		start[88] = 0.0020794;
		start[89] = 0.0047529;
		start[90] = 0.0052598;
		start[91] = 0.0021269;
		start[92] = 0.0018002;
		start[93] = 0.0073806;
		start[94] = 0.0054464;
		start[95] = 0.00038443;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 0.0013314;
		start[11] = 0.0007927;
		start[12] = 0.0087507;
		start[13] = 0.008462;
		start[14] = 0.0049901;
		start[15] = 0.0086443;
		start[16] = 0.0050248;
		start[17] = 0.0055776;
		start[18] = 0.0050286;
		start[19] = 0.0085348;
		start[20] = 0.002163;
		start[21] = 0.0032175;
		start[22] = 0.0066854;
		start[23] = 0.0042206;
		start[24] = 0.0053951;
		start[25] = 0.0066617;
		start[26] = 0.0051142;
		start[27] = 0.007286;
		start[28] = 0.0085439;
		start[29] = 0.0090538;
		start[30] = 3.1486e-05;
		start[31] = 0.0046317;
		start[32] = 0.0053655;
		start[33] = 0.0023352;
		start[34] = 0.0028143;
		start[35] = 0.0016935;
		start[36] = 0.0015616;
		start[37] = 0.0042205;
		start[38] = 0.0023796;
		start[39] = 0.0087185;
		start[40] = 0.0029192;
		start[41] = 0.0012224;
		start[42] = 0.0082375;
		start[43] = 0.0015105;
		start[44] = 0.0027004;
		start[45] = 0.004336;
		start[46] = 0.0096202;
		start[47] = 0.0079648;
		start[48] = 0.006067;
		start[49] = 0.005928;
		start[50] = 0.0063895;
		start[51] = 0.0080891;
		start[52] = 0.0091778;
		start[53] = 0.0089813;
		start[54] = 0.0017483;
		start[55] = 0.0016105;
		start[56] = 0.00033528;
		start[57] = 0.0033843;
		start[58] = 0.0074241;
		start[59] = 0.00035394;
		start[60] = 0.0034837;
		start[61] = 0.0077456;
		start[62] = 0.0048744;
		start[63] = 0.00094481;
		start[64] = 0.001016;
		start[65] = 0.0070888;
		start[66] = 0.00096858;
		start[67] = 0.0067696;
		start[68] = 0.00169;
		start[69] = 0.007971;
		start[70] = 0.0020833;
		start[71] = 0.0065127;
		start[72] = 0.0039749;
		start[73] = 0.0047888;
		start[74] = 0.0054211;
		start[75] = 0.0065981;
		start[76] = 0.0019463;
		start[77] = 0.0031067;
		start[78] = 0.0020808;
		start[79] = 0.00046622;
		start[80] = 0.0079972;
		start[81] = 0.0082293;
		start[82] = 0.0074298;
		start[83] = 0.0049034;
		start[84] = 0.0057023;
		start[85] = 0.003684;
		start[86] = 0.0083535;
		start[87] = 0.0089973;
		start[88] = 0.0066138;
		start[89] = 0.0077894;
		start[90] = 2.8152e-05;
		start[91] = 0.0087002;
		start[92] = 0.00068509;
		start[93] = 0.0057329;
		start[94] = 0.0059201;
		start[95] = 0.0082046;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0061351;
		start[11] = 0.0053783;
		start[12] = 0.0053591;
		start[13] = 0.0097327;
		start[14] = 0.0013115;
		start[15] = 0.005697;
		start[16] = 0.0042935;
		start[17] = 0.0007146;
		start[18] = 0.0029129;
		start[19] = 0.0091853;
		start[20] = 0.0010209;
		start[21] = 0.0062144;
		start[22] = 0.0046243;
		start[23] = 0.0096615;
		start[24] = 0.0099033;
		start[25] = 0.0083113;
		start[26] = 0.004983;
		start[27] = 0.0084876;
		start[28] = 0.0087969;
		start[29] = 0.0050481;
		start[30] = 0.0052985;
		start[31] = 0.0016438;
		start[32] = 0.0065147;
		start[33] = 0.0020127;
		start[34] = 0.009438;
		start[35] = 0.0099274;
		start[36] = 0.0090673;
		start[37] = 0.0051027;
		start[38] = 0.0034205;
		start[39] = 0.0083573;
		start[40] = 0.00083154;
		start[41] = 0.00093941;
		start[42] = 0.0062174;
		start[43] = 0.0013806;
		start[44] = 0.0098511;
		start[45] = 0.00079712;
		start[46] = 0.0057461;
		start[47] = 0.0064735;
		start[48] = 0.0048459;
		start[49] = 0.008542;
		start[50] = 0.0038651;
		start[51] = 0.00063749;
		start[52] = 0.0018671;
		start[53] = 0.0038094;
		start[54] = 0.0074861;
		start[55] = 0.0021075;
		start[56] = 0.0044464;
		start[57] = 0.0019801;
		start[58] = 0.0028985;
		start[59] = 0.008757;
		start[60] = 0.0059088;
		start[61] = 0.0021328;
		start[62] = 0.0048417;
		start[63] = 0.0070759;
		start[64] = 0.0027299;
		start[65] = 0.0075866;
		start[66] = 0.005402;
		start[67] = 0.0012211;
		start[68] = 0.0013106;
		start[69] = 0.0049563;
		start[70] = 0.00024413;
		start[71] = 0.0022292;
		start[72] = 0.0035639;
		start[73] = 0.001635;
		start[74] = 0.007587;
		start[75] = 0.0082992;
		start[76] = 0.0010575;
		start[77] = 0.0034541;
		start[78] = 8.7138e-05;
		start[79] = 0.0062303;
		start[80] = 0.0021482;
		start[81] = 0.0013031;
		start[82] = 0.0086476;
		start[83] = 0.001889;
		start[84] = 0.0010619;
		start[85] = 0.0049294;
		start[86] = 0.0073043;
		start[87] = 0.0087011;
		start[88] = 0.0036581;
		start[89] = 0.0057514;
		start[90] = 0.0025015;
		start[91] = 0.008798;
		start[92] = 0.00043577;
		start[93] = 0.0059843;
		start[94] = 0.0024377;
		start[95] = 0.008578;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0077676;
		start[11] = 0.0038312;
		start[12] = 0.0056136;
		start[13] = 0.00087879;
		start[14] = 0.0058986;
		start[15] = 0.0038034;
		start[16] = 0.00055651;
		start[17] = 0.0041059;
		start[18] = 0.0050841;
		start[19] = 0.0011074;
		start[20] = 0.0015944;
		start[21] = 0.0083894;
		start[22] = 0.007869;
		start[23] = 0.0039238;
		start[24] = 0.008204;
		start[25] = 0.0081356;
		start[26] = 0.0072985;
		start[27] = 0.0054144;
		start[28] = 0.00026535;
		start[29] = 0.0042551;
		start[30] = 0.0078488;
		start[31] = 0.005064;
		start[32] = 0.0061538;
		start[33] = 0.0046386;
		start[34] = 0.0060986;
		start[35] = 0.0068791;
		start[36] = 0.0024776;
		start[37] = 0.0053289;
		start[38] = 0.0044197;
		start[39] = 0.0060468;
		start[40] = 0.0097804;
		start[41] = 0.002043;
		start[42] = 0.0070547;
		start[43] = 0.0041247;
		start[44] = 0.0074369;
		start[45] = 0.0066947;
		start[46] = 0.0017941;
		start[47] = 0.0048318;
		start[48] = 0.0085814;
		start[49] = 0.004689;
		start[50] = 0.0041748;
		start[51] = 0.0066766;
		start[52] = 0.0061027;
		start[53] = 0.0099473;
		start[54] = 0.0036888;
		start[55] = 0.0085602;
		start[56] = 0.0079643;
		start[57] = 0.001857;
		start[58] = 0.0035841;
		start[59] = 0.0010008;
		start[60] = 0.0093855;
		start[61] = 0.00071262;
		start[62] = 0.003635;
		start[63] = 0.008121;
		start[64] = 0.00079175;
		start[65] = 0.0028526;
		start[66] = 0.007114;
		start[67] = 0.0060499;
		start[68] = 0.0098738;
		start[69] = 0.0072949;
		start[70] = 0.0071731;
		start[71] = 0.0066839;
		start[72] = 0.0059623;
		start[73] = 0.0022284;
		start[74] = 0.0018197;
		start[75] = 0.00046666;
		start[76] = 0.0061999;
		start[77] = 0.0049108;
		start[78] = 0.0060781;
		start[79] = 0.0089375;
		start[80] = 0.0087164;
		start[81] = 0.009249;
		start[82] = 0.0040141;
		start[83] = 0.00098086;
		start[84] = 0.007103;
		start[85] = 0.0093328;
		start[86] = 0.0017743;
		start[87] = 0.0058739;
		start[88] = 0.0095306;
		start[89] = 0.006368;
		start[90] = 0.0087915;
		start[91] = 0.00023531;
		start[92] = 0.00083493;
		start[93] = 0.0074017;
		start[94] = 0.0082074;
		start[95] = 0.0027824;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0016534;
		start[11] = 0.0010393;
		start[12] = 0.009764;
		start[13] = 0.00038792;
		start[14] = 0.0088269;
		start[15] = 0.0095757;
		start[16] = 0.0035169;
		start[17] = 0.0026874;
		start[18] = 0.0095762;
		start[19] = 0.0088354;
		start[20] = 0.004218;
		start[21] = 0.0064416;
		start[22] = 0.00065069;
		start[23] = 0.0042024;
		start[24] = 0.0044341;
		start[25] = 0.0012333;
		start[26] = 0.0039632;
		start[27] = 0.00575;
		start[28] = 0.0056511;
		start[29] = 0.0030336;
		start[30] = 0.0023984;
		start[31] = 0.0043095;
		start[32] = 0.0053597;
		start[33] = 0.0058387;
		start[34] = 0.0062617;
		start[35] = 0.0071527;
		start[36] = 0.0049868;
		start[37] = 0.0027687;
		start[38] = 0.0036331;
		start[39] = 0.0030628;
		start[40] = 0.0051202;
		start[41] = 0.0019975;
		start[42] = 0.00086451;
		start[43] = 0.00787;
		start[44] = 0.0049425;
		start[45] = 0.00559;
		start[46] = 0.0039369;
		start[47] = 0.0098512;
		start[48] = 0.0070414;
		start[49] = 0.0027173;
		start[50] = 4.2187e-05;
		start[51] = 0.0065771;
		start[52] = 0.0048003;
		start[53] = 0.0088942;
		start[54] = 0.00088308;
		start[55] = 0.0095102;
		start[56] = 0.00089427;
		start[57] = 0.0056525;
		start[58] = 0.0030704;
		start[59] = 0.001102;
		start[60] = 6.8308e-05;
		start[61] = 0.00086653;
		start[62] = 0.0074705;
		start[63] = 0.00049706;
		start[64] = 0.001859;
		start[65] = 0.0033527;
		start[66] = 0.001505;
		start[67] = 0.00038468;
		start[68] = 0.0030322;
		start[69] = 0.0010948;
		start[70] = 0.0092603;
		start[71] = 0.0078832;
		start[72] = 0.00090423;
		start[73] = 0.0087041;
		start[74] = 0.0052608;
		start[75] = 0.0038503;
		start[76] = 0.0049456;
		start[77] = 0.0024136;
		start[78] = 0.0057776;
		start[79] = 0.0085104;
		start[80] = 0.0011224;
		start[81] = 0.008085;
		start[82] = 0.0072887;
		start[83] = 0.0015713;
		start[84] = 0.0065543;
		start[85] = 0.00057303;
		start[86] = 0.0030849;
		start[87] = 0.003542;
		start[88] = 0.00030274;
		start[89] = 0.0039522;
		start[90] = 0.0014771;
		start[91] = 0.001605;
		start[92] = 0.0090621;
		start[93] = 0.0074786;
		start[94] = 0.0051294;
		start[95] = 0.0095036;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0072337;
		start[11] = 0.0016431;
		start[12] = 0.0018532;
		start[13] = 0.0020279;
		start[14] = 0.00041283;
		start[15] = 0.0093375;
		start[16] = 0.00094013;
		start[17] = 0.0096238;
		start[18] = 1.0192e-05;
		start[19] = 0.006062;
		start[20] = 0.0096479;
		start[21] = 0.006896;
		start[22] = 0.0094059;
		start[23] = 0.004968;
		start[24] = 0.0060373;
		start[25] = 0.0075061;
		start[26] = 0.0049012;
		start[27] = 0.00029174;
		start[28] = 0.00065171;
		start[29] = 0.008881;
		start[30] = 0.0035982;
		start[31] = 0.0037195;
		start[32] = 0.0012477;
		start[33] = 0.0075825;
		start[34] = 0.001608;
		start[35] = 0.0034585;
		start[36] = 0.0025739;
		start[37] = 0.0048182;
		start[38] = 0.0064369;
		start[39] = 0.0052805;
		start[40] = 0.0093127;
		start[41] = 0.0026426;
		start[42] = 0.0061351;
		start[43] = 0.0072605;
		start[44] = 0.0020739;
		start[45] = 0.0039733;
		start[46] = 0.0082291;
		start[47] = 0.0061192;
		start[48] = 0.0050488;
		start[49] = 0.0054367;
		start[50] = 0.0049222;
		start[51] = 0.0084042;
		start[52] = 0.0042763;
		start[53] = 0.0059132;
		start[54] = 0.0094594;
		start[55] = 0.0032248;
		start[56] = 0.0012576;
		start[57] = 0.0061349;
		start[58] = 0.0063407;
		start[59] = 0.0039143;
		start[60] = 0.001857;
		start[61] = 0.0017573;
		start[62] = 0.0081312;
		start[63] = 0.0077763;
		start[64] = 0.0060614;
		start[65] = 0.0030989;
		start[66] = 0.0061493;
		start[67] = 0.0045189;
		start[68] = 0.0060382;
		start[69] = 0.0063219;
		start[70] = 0.0074848;
		start[71] = 0.00044839;
		start[72] = 0.0045351;
		start[73] = 0.0095865;
		start[74] = 0.0040432;
		start[75] = 0.0048866;
		start[76] = 0.0041862;
		start[77] = 0.0044049;
		start[78] = 0.0092479;
		start[79] = 0.0030775;
		start[80] = 0.0055776;
		start[81] = 0.00078196;
		start[82] = 0.0095004;
		start[83] = 0.0012206;
		start[84] = 0.0037634;
		start[85] = 0.0092097;
		start[86] = 0.0093886;
		start[87] = 0.0071321;
		start[88] = 0.0048683;
		start[89] = 0.0035493;
		start[90] = 0.0092363;
		start[91] = 0.005964;
		start[92] = 0.002882;
		start[93] = 0.0059504;
		start[94] = 0.0056091;
		start[95] = 0.0050026;
		std::vector<double> endEff (3);
		endEff[0] = -0.44337;
		endEff[1] = 0.95325;
		endEff[2] = 0.55869;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.05215;
		start[1] = -0.071691;
		start[2] = 0.047945;
		start[3] = -0.042595;
		start[4] = 0.0084884;
		start[5] = -0.0031517;
		start[6] = 0.034644;
		start[7] = 0.020542;
		start[8] = -0.0033357;
		start[9] = -0.0071984;
		start[10] = 0.0046158;
		start[11] = 0.0051296;
		start[12] = 0.0046961;
		start[13] = 0.0056315;
		start[14] = 0.0066186;
		start[15] = 0.0046322;
		start[16] = 0.0037147;
		start[17] = 0.0016974;
		start[18] = 0.0092156;
		start[19] = 0.0019845;
		start[20] = 0.0027492;
		start[21] = 0.0023938;
		start[22] = 0.0078477;
		start[23] = 0.0056281;
		start[24] = 0.0095418;
		start[25] = 0.0037163;
		start[26] = 0.00054499;
		start[27] = 0.0062538;
		start[28] = 0.0046562;
		start[29] = 0.0074576;
		start[30] = 0.0090121;
		start[31] = 0.008398;
		start[32] = 0.0033233;
		start[33] = 0.0029808;
		start[34] = 0.0022672;
		start[35] = 0.00017962;
		start[36] = 0.0089708;
		start[37] = 0.0072775;
		start[38] = 0.0027705;
		start[39] = 0.0068939;
		start[40] = 0.0010367;
		start[41] = 0.0094878;
		start[42] = 0.0029446;
		start[43] = 0.0030139;
		start[44] = 0.005017;
		start[45] = 0.0086701;
		start[46] = 0.0097696;
		start[47] = 0.002176;
		start[48] = 0.0099668;
		start[49] = 0.0067665;
		start[50] = 0.0028794;
		start[51] = 0.0092696;
		start[52] = 0.0003028;
		start[53] = 0.00093745;
		start[54] = 0.0016507;
		start[55] = 0.0052397;
		start[56] = 0.0055715;
		start[57] = 0.0099151;
		start[58] = 0.0038923;
		start[59] = 0.0032397;
		start[60] = 0.0015351;
		start[61] = 0.0015477;
		start[62] = 0.0035809;
		start[63] = 0.0071119;
		start[64] = 0.0022408;
		start[65] = 0.0013718;
		start[66] = 0.007462;
		start[67] = 0.0092556;
		start[68] = 0.0099497;
		start[69] = 0.0057406;
		start[70] = 0.0064104;
		start[71] = 0.0055841;
		start[72] = 0.0089944;
		start[73] = 0.00020482;
		start[74] = 0.0035829;
		start[75] = 0.0014533;
		start[76] = 0.0043242;
		start[77] = 0.0063996;
		start[78] = 1.7698e-05;
		start[79] = 0.0050789;
		start[80] = 0.0038497;
		start[81] = 0.0044676;
		start[82] = 0.0012583;
		start[83] = 0.0025035;
		start[84] = 0.0049848;
		start[85] = 0.0026896;
		start[86] = 0.0047962;
		start[87] = 0.0021301;
		start[88] = 0.0063537;
		start[89] = 0.0064152;
		start[90] = 0.009975;
		start[91] = 0.0027187;
		start[92] = 0.0005503;
		start[93] = 0.0027451;
		start[94] = 0.0093824;
		start[95] = 0.005524;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.094607;
		start[1] = -0.098297;
		start[2] = -0.060811;
		start[3] = 0.052962;
		start[4] = -0.088928;
		start[5] = 0.092678;
		start[6] = 0.015093;
		start[7] = 0.021057;
		start[8] = -0.018699;
		start[9] = -0.088289;
		start[10] = 0.0054786;
		start[11] = 0.007555;
		start[12] = 0.0059843;
		start[13] = 0.0070946;
		start[14] = 0.0021978;
		start[15] = 0.004212;
		start[16] = 0.0028429;
		start[17] = 0.0093227;
		start[18] = 0.0077373;
		start[19] = 0.0097675;
		start[20] = 0.00086542;
		start[21] = 0.0059596;
		start[22] = 0.0065439;
		start[23] = 0.0059869;
		start[24] = 0.002173;
		start[25] = 0.0050371;
		start[26] = 0.009858;
		start[27] = 5.5861e-05;
		start[28] = 0.004788;
		start[29] = 0.0059831;
		start[30] = 0.0048536;
		start[31] = 0.0091255;
		start[32] = 0.0022803;
		start[33] = 0.0032335;
		start[34] = 0.00052044;
		start[35] = 0.0056527;
		start[36] = 0.0084998;
		start[37] = 0.0074781;
		start[38] = 0.0048241;
		start[39] = 0.0047247;
		start[40] = 0.002766;
		start[41] = 0.0056774;
		start[42] = 0.007989;
		start[43] = 0.0051288;
		start[44] = 0.009955;
		start[45] = 0.0067844;
		start[46] = 0.0042931;
		start[47] = 0.0055639;
		start[48] = 0.0024255;
		start[49] = 0.0032792;
		start[50] = 0.0083727;
		start[51] = 0.0077082;
		start[52] = 0.0093739;
		start[53] = 0.0089597;
		start[54] = 0.0091605;
		start[55] = 0.0085563;
		start[56] = 0.0097863;
		start[57] = 0.0047243;
		start[58] = 0.0093878;
		start[59] = 0.0099498;
		start[60] = 0.0016741;
		start[61] = 0.0091763;
		start[62] = 0.0038326;
		start[63] = 0.0091526;
		start[64] = 0.0003477;
		start[65] = 0.0075347;
		start[66] = 0.0017504;
		start[67] = 0.0018777;
		start[68] = 0.0014211;
		start[69] = 0.0079186;
		start[70] = 0.0010516;
		start[71] = 0.0078947;
		start[72] = 0.0021658;
		start[73] = 0.0037627;
		start[74] = 0.0011644;
		start[75] = 5.1221e-05;
		start[76] = 0.009184;
		start[77] = 0.0038414;
		start[78] = 0.0025188;
		start[79] = 0.0047597;
		start[80] = 0.0032888;
		start[81] = 0.0030676;
		start[82] = 0.0018567;
		start[83] = 0.0048559;
		start[84] = 0.004976;
		start[85] = 0.0029487;
		start[86] = 0.0080922;
		start[87] = 0.0072468;
		start[88] = 0.0017076;
		start[89] = 0.0030899;
		start[90] = 0.0068815;
		start[91] = 0.0035326;
		start[92] = 0.001362;
		start[93] = 0.001612;
		start[94] = 0.007016;
		start[95] = 0.009631;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.010037;
		start[1] = 0.047953;
		start[2] = -0.030769;
		start[3] = -0.0085558;
		start[4] = -0.052196;
		start[5] = -0.036182;
		start[6] = -0.0027866;
		start[7] = 0.014305;
		start[8] = -0.068978;
		start[9] = -0.048379;
		start[10] = 0.0084892;
		start[11] = 0.003557;
		start[12] = 0.0060403;
		start[13] = 0.0086321;
		start[14] = 0.0082052;
		start[15] = 0.0085673;
		start[16] = 0.0047922;
		start[17] = 0.0069325;
		start[18] = 0.0018419;
		start[19] = 0.0016004;
		start[20] = 0.0099493;
		start[21] = 0.0006612;
		start[22] = 0.0099261;
		start[23] = 0.0021767;
		start[24] = 0.0088556;
		start[25] = 0.0033722;
		start[26] = 0.0031645;
		start[27] = 0.0031046;
		start[28] = 0.0071311;
		start[29] = 0.0066368;
		start[30] = 0.0071797;
		start[31] = 0.0010464;
		start[32] = 0.0070048;
		start[33] = 0.00080586;
		start[34] = 0.008912;
		start[35] = 0.0069388;
		start[36] = 0.0043647;
		start[37] = 0.0065699;
		start[38] = 0.0094809;
		start[39] = 0.0077105;
		start[40] = 0.0088335;
		start[41] = 0.0034297;
		start[42] = 0.0031266;
		start[43] = 0.0050769;
		start[44] = 0.0051252;
		start[45] = 0.0058185;
		start[46] = 0.0030279;
		start[47] = 0.0024072;
		start[48] = 0.0071644;
		start[49] = 0.007699;
		start[50] = 0.0079124;
		start[51] = 0.0073001;
		start[52] = 0.00048459;
		start[53] = 0.0028632;
		start[54] = 0.0064846;
		start[55] = 0.0055197;
		start[56] = 0.0070477;
		start[57] = 0.0094922;
		start[58] = 0.0040367;
		start[59] = 0.0087476;
		start[60] = 0.00067336;
		start[61] = 0.0080387;
		start[62] = 0.0033741;
		start[63] = 0.0077543;
		start[64] = 0.00061986;
		start[65] = 0.0057537;
		start[66] = 0.0055077;
		start[67] = 0.0079944;
		start[68] = 0.0037844;
		start[69] = 0.0053425;
		start[70] = 0.0095008;
		start[71] = 0.0012111;
		start[72] = 0.0036126;
		start[73] = 0.0014415;
		start[74] = 0.0058873;
		start[75] = 0.0054591;
		start[76] = 0.0033601;
		start[77] = 0.0029456;
		start[78] = 0.0057017;
		start[79] = 0.0080239;
		start[80] = 0.0039823;
		start[81] = 0.0068867;
		start[82] = 0.0090872;
		start[83] = 0.0011375;
		start[84] = 0.0011437;
		start[85] = 0.0062827;
		start[86] = 0.0012252;
		start[87] = 0.0069622;
		start[88] = 0.0010189;
		start[89] = 0.0049147;
		start[90] = 0.004103;
		start[91] = 0.0090081;
		start[92] = 0.0051633;
		start[93] = 0.0067203;
		start[94] = 0.0020872;
		start[95] = 0.0053142;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0050519;
		start[1] = 0.074773;
		start[2] = 0.078258;
		start[3] = 0.014126;
		start[4] = 0.0084424;
		start[5] = -0.068145;
		start[6] = -0.080467;
		start[7] = -0.02808;
		start[8] = -0.055667;
		start[9] = 0.060975;
		start[10] = 0.0051801;
		start[11] = 0.0055317;
		start[12] = 0.0013947;
		start[13] = 0.0088271;
		start[14] = 0.0012333;
		start[15] = 0.0016586;
		start[16] = 0.0041652;
		start[17] = 0.0049848;
		start[18] = 0.0084166;
		start[19] = 0.0094644;
		start[20] = 0.007605;
		start[21] = 0.0056413;
		start[22] = 0.0056615;
		start[23] = 0.004871;
		start[24] = 0.0037756;
		start[25] = 0.00081399;
		start[26] = 0.0059546;
		start[27] = 0.0057337;
		start[28] = 0.0020021;
		start[29] = 0.0062243;
		start[30] = 0.0033332;
		start[31] = 0.0033634;
		start[32] = 0.0039353;
		start[33] = 0.0062748;
		start[34] = 0.0044146;
		start[35] = 0.0019779;
		start[36] = 0.0025303;
		start[37] = 0.0079058;
		start[38] = 0.00090225;
		start[39] = 0.00056356;
		start[40] = 0.0035218;
		start[41] = 0.00087094;
		start[42] = 0.0051104;
		start[43] = 0.0082303;
		start[44] = 0.0022344;
		start[45] = 0.0059826;
		start[46] = 0.00085374;
		start[47] = 0.00040341;
		start[48] = 0.0094393;
		start[49] = 0.0045553;
		start[50] = 0.0095389;
		start[51] = 0.008103;
		start[52] = 0.004678;
		start[53] = 0.0082953;
		start[54] = 0.0022011;
		start[55] = 0.009405;
		start[56] = 0.002961;
		start[57] = 0.0092016;
		start[58] = 0.0030778;
		start[59] = 0.0075412;
		start[60] = 0.0034626;
		start[61] = 0.0021753;
		start[62] = 2.4943e-05;
		start[63] = 0.0099969;
		start[64] = 0.0041596;
		start[65] = 0.0065108;
		start[66] = 0.0073228;
		start[67] = 0.0074104;
		start[68] = 0.0027454;
		start[69] = 0.001477;
		start[70] = 0.0025114;
		start[71] = 0.0054875;
		start[72] = 0.0095117;
		start[73] = 0.0040712;
		start[74] = 0.00088965;
		start[75] = 0.0027769;
		start[76] = 0.0033537;
		start[77] = 0.0056383;
		start[78] = 0.0061696;
		start[79] = 0.0089325;
		start[80] = 0.0017322;
		start[81] = 0.008031;
		start[82] = 0.00074965;
		start[83] = 0.00035277;
		start[84] = 0.0065951;
		start[85] = 0.0030427;
		start[86] = 0.0064911;
		start[87] = 0.0044129;
		start[88] = 0.0057393;
		start[89] = 0.0033873;
		start[90] = 0.0026482;
		start[91] = 0.0089468;
		start[92] = 0.0060857;
		start[93] = 0.0041637;
		start[94] = 0.0096087;
		start[95] = 0.0028808;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.036733;
		start[1] = -0.042285;
		start[2] = -0.051469;
		start[3] = -0.05859;
		start[4] = -0.034501;
		start[5] = 0.076066;
		start[6] = -0.042527;
		start[7] = 0.025095;
		start[8] = 0.05387;
		start[9] = -0.055073;
		start[10] = 0.0089254;
		start[11] = 0.0038071;
		start[12] = 0.0092375;
		start[13] = 0.0058616;
		start[14] = 0.0035078;
		start[15] = 0.0029638;
		start[16] = 0.0033999;
		start[17] = 0.0063496;
		start[18] = 0.001431;
		start[19] = 0.0077961;
		start[20] = 0.0028083;
		start[21] = 0.0029595;
		start[22] = 0.0039498;
		start[23] = 0.0031718;
		start[24] = 0.0023397;
		start[25] = 0.0023642;
		start[26] = 0.0037731;
		start[27] = 0.00076158;
		start[28] = 0.0080057;
		start[29] = 0.002277;
		start[30] = 0.0019274;
		start[31] = 0.0026007;
		start[32] = 0.00079187;
		start[33] = 0.0075221;
		start[34] = 0.0022148;
		start[35] = 0.0062165;
		start[36] = 0.00083655;
		start[37] = 0.0078988;
		start[38] = 0.00018812;
		start[39] = 0.0014285;
		start[40] = 0.0056049;
		start[41] = 0.0019991;
		start[42] = 0.0067444;
		start[43] = 0.0025046;
		start[44] = 0.0041276;
		start[45] = 0.0060823;
		start[46] = 0.0022965;
		start[47] = 0.0054046;
		start[48] = 0.0016881;
		start[49] = 0.0045894;
		start[50] = 0.0026225;
		start[51] = 0.0027189;
		start[52] = 0.0060108;
		start[53] = 0.0074385;
		start[54] = 0.0037471;
		start[55] = 0.009332;
		start[56] = 0.0075169;
		start[57] = 0.0033778;
		start[58] = 0.0078345;
		start[59] = 0.0021074;
		start[60] = 0.0077771;
		start[61] = 0.0075596;
		start[62] = 0.0032326;
		start[63] = 0.0053838;
		start[64] = 0.0047613;
		start[65] = 0.0048786;
		start[66] = 0.0010149;
		start[67] = 0.0029523;
		start[68] = 0.0015032;
		start[69] = 0.0050852;
		start[70] = 0.0061254;
		start[71] = 0.004329;
		start[72] = 0.008316;
		start[73] = 0.0023878;
		start[74] = 0.0019764;
		start[75] = 0.0012042;
		start[76] = 0.0084761;
		start[77] = 0.00063707;
		start[78] = 0.0086115;
		start[79] = 0.00057301;
		start[80] = 0.0098254;
		start[81] = 0.0049952;
		start[82] = 0.0044242;
		start[83] = 0.004364;
		start[84] = 0.0029161;
		start[85] = 0.0032244;
		start[86] = 0.0098683;
		start[87] = 0.0099592;
		start[88] = 0.0006998;
		start[89] = 0.0041994;
		start[90] = 0.00545;
		start[91] = 0.003033;
		start[92] = 0.0026216;
		start[93] = 0.0035165;
		start[94] = 0.0076313;
		start[95] = 0.001803;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.011449;
		start[1] = -0.04375;
		start[2] = -0.094391;
		start[3] = -0.070543;
		start[4] = 0.038939;
		start[5] = -0.088783;
		start[6] = -0.088232;
		start[7] = 0.0081744;
		start[8] = -0.056552;
		start[9] = 0.012915;
		start[10] = 1.1007e-07;
		start[11] = 0.0048964;
		start[12] = 0.0027993;
		start[13] = 0.0041576;
		start[14] = 0.0088882;
		start[15] = 5.8394e-05;
		start[16] = 0.0085325;
		start[17] = 0.0035843;
		start[18] = 0.0052614;
		start[19] = 0.0082131;
		start[20] = 0.0094443;
		start[21] = 0.0014708;
		start[22] = 0.0096236;
		start[23] = 0.008245;
		start[24] = 0.0060621;
		start[25] = 0.0032999;
		start[26] = 0.0075267;
		start[27] = 0.0086247;
		start[28] = 0.0045719;
		start[29] = 0.0047566;
		start[30] = 0.0003575;
		start[31] = 0.0085941;
		start[32] = 0.0046647;
		start[33] = 0.0050086;
		start[34] = 0.0077016;
		start[35] = 0.0085991;
		start[36] = 0.0010338;
		start[37] = 0.0053092;
		start[38] = 0.0099567;
		start[39] = 0.0070857;
		start[40] = 0.0071507;
		start[41] = 0.0067977;
		start[42] = 0.006037;
		start[43] = 0.0043992;
		start[44] = 0.0014519;
		start[45] = 0.0035416;
		start[46] = 0.002112;
		start[47] = 0.0020623;
		start[48] = 0.0069822;
		start[49] = 0.0018018;
		start[50] = 0.0047217;
		start[51] = 0.0083422;
		start[52] = 0.0085499;
		start[53] = 0.009083;
		start[54] = 0.0075762;
		start[55] = 0.00075597;
		start[56] = 0.0091742;
		start[57] = 0.0071571;
		start[58] = 0.0067626;
		start[59] = 0.0053824;
		start[60] = 0.0098988;
		start[61] = 0.0012442;
		start[62] = 0.0089223;
		start[63] = 0.0002509;
		start[64] = 0.0044132;
		start[65] = 0.000127;
		start[66] = 0.0068808;
		start[67] = 0.0065094;
		start[68] = 0.0054589;
		start[69] = 0.0070114;
		start[70] = 0.0022889;
		start[71] = 0.0015322;
		start[72] = 0.0015569;
		start[73] = 0.0053801;
		start[74] = 0.00078994;
		start[75] = 0.009327;
		start[76] = 0.0014782;
		start[77] = 0.004939;
		start[78] = 0.0086763;
		start[79] = 0.0031178;
		start[80] = 0.00035664;
		start[81] = 0.0024849;
		start[82] = 0.0037995;
		start[83] = 0.0090888;
		start[84] = 0.0085329;
		start[85] = 0.0072307;
		start[86] = 0.0012159;
		start[87] = 0.0045999;
		start[88] = 0.0039417;
		start[89] = 0.0060282;
		start[90] = 0.0093899;
		start[91] = 0.0056346;
		start[92] = 0.0060706;
		start[93] = 0.0068116;
		start[94] = 0.0025225;
		start[95] = 0.0053631;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.0085994;
		start[1] = -0.031762;
		start[2] = -0.0077498;
		start[3] = 0.092183;
		start[4] = 0.050655;
		start[5] = -0.028318;
		start[6] = 0.064914;
		start[7] = -0.07117;
		start[8] = 0.013581;
		start[9] = -0.090248;
		start[10] = 0.0014204;
		start[11] = 0.0062345;
		start[12] = 0.0053261;
		start[13] = 0.00068075;
		start[14] = 0.00028776;
		start[15] = 0.0018989;
		start[16] = 0.0021006;
		start[17] = 0.004343;
		start[18] = 0.0050456;
		start[19] = 0.00018114;
		start[20] = 0.0069363;
		start[21] = 0.0014459;
		start[22] = 0.0098688;
		start[23] = 0.0095907;
		start[24] = 0.0041368;
		start[25] = 0.0024788;
		start[26] = 0.0048042;
		start[27] = 0.0094104;
		start[28] = 0.0019089;
		start[29] = 0.00065259;
		start[30] = 0.0020303;
		start[31] = 0.0026101;
		start[32] = 0.00040883;
		start[33] = 0.0091524;
		start[34] = 0.0034522;
		start[35] = 0.006295;
		start[36] = 0.0096314;
		start[37] = 0.00015156;
		start[38] = 0.0041324;
		start[39] = 0.0089017;
		start[40] = 0.0087437;
		start[41] = 0.0081044;
		start[42] = 0.0046178;
		start[43] = 0.002339;
		start[44] = 0.0064847;
		start[45] = 0.0018625;
		start[46] = 0.0021326;
		start[47] = 0.0013755;
		start[48] = 0.0099698;
		start[49] = 0.00817;
		start[50] = 0.006552;
		start[51] = 0.0058931;
		start[52] = 0.0059313;
		start[53] = 0.0043098;
		start[54] = 0.0052759;
		start[55] = 0.0033001;
		start[56] = 0.0024134;
		start[57] = 0.0085105;
		start[58] = 0.0091404;
		start[59] = 0.0037877;
		start[60] = 0.0038154;
		start[61] = 0.0052455;
		start[62] = 0.002175;
		start[63] = 0.0095977;
		start[64] = 0.0018837;
		start[65] = 0.0060428;
		start[66] = 0.0088298;
		start[67] = 0.0041788;
		start[68] = 0.003273;
		start[69] = 0.0028343;
		start[70] = 0.003667;
		start[71] = 0.0078149;
		start[72] = 0.0029813;
		start[73] = 0.0091225;
		start[74] = 0.0025513;
		start[75] = 0.0057549;
		start[76] = 0.00088698;
		start[77] = 0.0051733;
		start[78] = 0.0095927;
		start[79] = 0.0019698;
		start[80] = 0.0085575;
		start[81] = 0.0055889;
		start[82] = 0.0046967;
		start[83] = 0.0050151;
		start[84] = 0.0085169;
		start[85] = 0.00097705;
		start[86] = 0.00739;
		start[87] = 0.0016885;
		start[88] = 0.0017759;
		start[89] = 0.003303;
		start[90] = 0.0021451;
		start[91] = 0.00016872;
		start[92] = 0.0066891;
		start[93] = 0.0049111;
		start[94] = 0.0041631;
		start[95] = 0.0035745;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.022645;
		start[1] = -0.025629;
		start[2] = -0.072068;
		start[3] = -0.083485;
		start[4] = -0.010385;
		start[5] = -0.063934;
		start[6] = 0.0086021;
		start[7] = -0.093994;
		start[8] = 0.098828;
		start[9] = 0.081332;
		start[10] = 0.0050628;
		start[11] = 0.00094711;
		start[12] = 0.0055796;
		start[13] = 0.0058076;
		start[14] = 0.005133;
		start[15] = 0.0042254;
		start[16] = 0.0046437;
		start[17] = 0.0016509;
		start[18] = 0.004747;
		start[19] = 0.003993;
		start[20] = 0.0099994;
		start[21] = 0.0021638;
		start[22] = 0.0032395;
		start[23] = 0.0028163;
		start[24] = 0.0026792;
		start[25] = 0.006671;
		start[26] = 0.0025813;
		start[27] = 0.0059858;
		start[28] = 0.0069754;
		start[29] = 0.0043025;
		start[30] = 0.00033173;
		start[31] = 0.0051456;
		start[32] = 0.001935;
		start[33] = 0.0062711;
		start[34] = 0.003101;
		start[35] = 0.0022821;
		start[36] = 0.0008865;
		start[37] = 0.00066662;
		start[38] = 0.002724;
		start[39] = 0.0062451;
		start[40] = 0.0026755;
		start[41] = 0.0086271;
		start[42] = 0.0090239;
		start[43] = 0.0047087;
		start[44] = 0.0059752;
		start[45] = 0.0063901;
		start[46] = 0.0024995;
		start[47] = 0.0049558;
		start[48] = 0.0065051;
		start[49] = 8.3112e-05;
		start[50] = 0.0052466;
		start[51] = 0.0080672;
		start[52] = 0.0029629;
		start[53] = 0.00082328;
		start[54] = 0.006988;
		start[55] = 0.0076477;
		start[56] = 0.00066451;
		start[57] = 0.00956;
		start[58] = 0.0061365;
		start[59] = 0.0048049;
		start[60] = 0.00027386;
		start[61] = 0.0076361;
		start[62] = 0.0093057;
		start[63] = 0.0016035;
		start[64] = 0.0093428;
		start[65] = 0.0028512;
		start[66] = 0.002516;
		start[67] = 0.0024769;
		start[68] = 0.0018579;
		start[69] = 0.0081873;
		start[70] = 0.0053269;
		start[71] = 0.0066863;
		start[72] = 0.0014561;
		start[73] = 0.008478;
		start[74] = 0.0042025;
		start[75] = 0.00045455;
		start[76] = 0.00039347;
		start[77] = 0.0090567;
		start[78] = 0.0016934;
		start[79] = 0.0085614;
		start[80] = 0.0022471;
		start[81] = 0.0050235;
		start[82] = 0.0080214;
		start[83] = 0.0089073;
		start[84] = 0.0073131;
		start[85] = 0.0091098;
		start[86] = 0.0022638;
		start[87] = 0.0039822;
		start[88] = 0.0014073;
		start[89] = 0.0046663;
		start[90] = 0.0038997;
		start[91] = 0.0078025;
		start[92] = 0.00097653;
		start[93] = 0.0020238;
		start[94] = 0.0080809;
		start[95] = 2.456e-05;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = -0.078792;
		start[1] = -0.073145;
		start[2] = 0.018974;
		start[3] = 0.035229;
		start[4] = 0.053385;
		start[5] = 0.05229;
		start[6] = -0.091311;
		start[7] = -0.023949;
		start[8] = 0.088566;
		start[9] = -0.040909;
		start[10] = 0.0089806;
		start[11] = 0.0056988;
		start[12] = 0.0014914;
		start[13] = 0.007269;
		start[14] = 0.0071826;
		start[15] = 0.00069447;
		start[16] = 0.0052876;
		start[17] = 0.0018682;
		start[18] = 0.0019907;
		start[19] = 0.0069324;
		start[20] = 0.0031611;
		start[21] = 0.008646;
		start[22] = 0.0057388;
		start[23] = 0.0019894;
		start[24] = 0.0064134;
		start[25] = 0.003994;
		start[26] = 0.00014928;
		start[27] = 0.0035533;
		start[28] = 0.0037587;
		start[29] = 0.0072735;
		start[30] = 0.00042835;
		start[31] = 0.0091481;
		start[32] = 0.0092914;
		start[33] = 0.0055629;
		start[34] = 0.0042788;
		start[35] = 0.0091707;
		start[36] = 0.009816;
		start[37] = 0.0011028;
		start[38] = 0.0070228;
		start[39] = 0.0015917;
		start[40] = 0.0016138;
		start[41] = 0.0063806;
		start[42] = 0.0021963;
		start[43] = 0.0053462;
		start[44] = 0.0035018;
		start[45] = 0.0050539;
		start[46] = 0.0048629;
		start[47] = 0.0093514;
		start[48] = 0.00070352;
		start[49] = 0.0088109;
		start[50] = 0.0055495;
		start[51] = 0.0017601;
		start[52] = 0.0086664;
		start[53] = 0.006808;
		start[54] = 0.0080509;
		start[55] = 0.0077374;
		start[56] = 0.0042813;
		start[57] = 0.00044776;
		start[58] = 0.0063171;
		start[59] = 0.00065873;
		start[60] = 0.0057531;
		start[61] = 0.0016228;
		start[62] = 0.007138;
		start[63] = 0.0037592;
		start[64] = 0.0021674;
		start[65] = 0.0094103;
		start[66] = 0.00088182;
		start[67] = 0.0010908;
		start[68] = 0.0087445;
		start[69] = 0.0076041;
		start[70] = 0.00094358;
		start[71] = 0.005984;
		start[72] = 0.0070793;
		start[73] = 0.0047951;
		start[74] = 0.0090619;
		start[75] = 0.00091503;
		start[76] = 0.0029974;
		start[77] = 0.00598;
		start[78] = 0.0096867;
		start[79] = 0.0075508;
		start[80] = 0.0069557;
		start[81] = 0.0023945;
		start[82] = 0.0042698;
		start[83] = 0.0058503;
		start[84] = 0.0044943;
		start[85] = 0.0034883;
		start[86] = 0.0083626;
		start[87] = 0.0083484;
		start[88] = 0.0092799;
		start[89] = 0.0049783;
		start[90] = 0.0069977;
		start[91] = 0.0023498;
		start[92] = 0.00045894;
		start[93] = 0.0024056;
		start[94] = 0.0039432;
		start[95] = 0.0027311;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}
	{
		std::vector<double> start (96);
		start[0] = 0.046919;
		start[1] = 0.072705;
		start[2] = -0.029575;
		start[3] = 0.006733;
		start[4] = 0.051533;
		start[5] = -0.08949;
		start[6] = 0.0049471;
		start[7] = 0.0099307;
		start[8] = -0.055887;
		start[9] = 0.0024729;
		start[10] = 0.0011616;
		start[11] = 0.0048633;
		start[12] = 0.0080419;
		start[13] = 0.009683;
		start[14] = 0.0039372;
		start[15] = 0.0013114;
		start[16] = 0.0077131;
		start[17] = 0.0011973;
		start[18] = 0.0062264;
		start[19] = 0.0060135;
		start[20] = 0.0023299;
		start[21] = 0.0031443;
		start[22] = 0.0090784;
		start[23] = 0.00527;
		start[24] = 0.0080779;
		start[25] = 0.0058352;
		start[26] = 0.003394;
		start[27] = 0.00055365;
		start[28] = 0.0014018;
		start[29] = 0.0072183;
		start[30] = 0.0075336;
		start[31] = 0.0066628;
		start[32] = 0.0058098;
		start[33] = 0.0074046;
		start[34] = 0.0075406;
		start[35] = 0.0026759;
		start[36] = 0.0091972;
		start[37] = 0.0078583;
		start[38] = 0.0095364;
		start[39] = 0.0081214;
		start[40] = 0.0051092;
		start[41] = 0.0072084;
		start[42] = 0.0075417;
		start[43] = 0.0063436;
		start[44] = 0.0016744;
		start[45] = 0.002851;
		start[46] = 0.0039372;
		start[47] = 0.0073794;
		start[48] = 0.0058027;
		start[49] = 0.00040645;
		start[50] = 0.00043646;
		start[51] = 0.0011915;
		start[52] = 0.0088102;
		start[53] = 0.0022501;
		start[54] = 0.0089207;
		start[55] = 0.0078414;
		start[56] = 0.0073599;
		start[57] = 0.0007901;
		start[58] = 0.0041428;
		start[59] = 0.0078879;
		start[60] = 0.0053584;
		start[61] = 0.0089888;
		start[62] = 0.00011353;
		start[63] = 0.0038598;
		start[64] = 0.0011429;
		start[65] = 0.007258;
		start[66] = 0.0087433;
		start[67] = 0.0096345;
		start[68] = 0.0029795;
		start[69] = 0.00019418;
		start[70] = 0.0002038;
		start[71] = 0.0012158;
		start[72] = 0.0023511;
		start[73] = 0.00044172;
		start[74] = 0.0095339;
		start[75] = 0.0073194;
		start[76] = 0.0046003;
		start[77] = 0.0054457;
		start[78] = 0.0072222;
		start[79] = 0.00028552;
		start[80] = 0.00013661;
		start[81] = 0.0074179;
		start[82] = 0.0033371;
		start[83] = 0.0015167;
		start[84] = 0.0023636;
		start[85] = 0.0059151;
		start[86] = 0.008005;
		start[87] = 0.0061278;
		start[88] = 0.0039024;
		start[89] = 0.0057979;
		start[90] = 0.00045969;
		start[91] = 0.00528;
		start[92] = 4.7098e-05;
		start[93] = 0.0036448;
		start[94] = 0.0029263;
		start[95] = 0.0083638;
		std::vector<double> endEff (3);
		endEff[0] = -0.13411;
		endEff[1] = 0.54043;
		endEff[2] = 1.1908;
		solveFor( start, endEff);
	}


  return 0;
}
